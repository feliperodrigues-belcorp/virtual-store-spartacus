{
  "swagger": "2.0",
  "info": {
    "description": "Commerce Webservices Version 2",
    "version": "2.0",
    "title": "Commerce Webservices V2"
  },
  "host": "backoffice.christian-spartacus1-s2-public.model-t.myhybris.cloud",
  "basePath": "/rest/v2",
  "tags": [
    {
      "name": "Products",
      "description": "Products Controller"
    },
    {
      "name": "Promotions",
      "description": "Promotions Controller"
    },
    {
      "name": "Customer Groups",
      "description": "Customer Groups Controller"
    },
    {
      "name": "Save Cart",
      "description": "Save Cart Controller"
    },
    {
      "name": "Component",
      "description": "Component Controller"
    },
    {
      "name": "Miscs",
      "description": "Miscs Controller"
    },
    {
      "name": "Users",
      "description": "Users Controller"
    },
    {
      "name": "Catalogs",
      "description": "Catalogs Controller"
    },
    {
      "name": "Export",
      "description": "Export Controller"
    },
    {
      "name": "Vouchers",
      "description": "Vouchers Controller"
    },
    {
      "name": "Stores",
      "description": "Stores Controller"
    },
    {
      "name": "Feeds",
      "description": "Feeds Controller"
    },
    {
      "name": "Orders",
      "description": "Orders Controller"
    },
    {
      "name": "Page",
      "description": "Page Controller"
    },
    {
      "name": "Carts",
      "description": "Carts Controller"
    },
    {
      "name": "Forgotten Passwords",
      "description": "Forgotten Passwords Controller"
    }
  ],
  "produces": [
    "application/xml",
    "application/json"
  ],
  "paths": {
    "/{baseSiteId}/cardtypes": {
      "get": {
        "tags": [
          "Miscs"
        ],
        "summary": "Get a list of supported payment card types.",
        "description": "Lists supported payment card types.",
        "operationId": "getCardTypes",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CardTypeList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/catalogs": {
      "get": {
        "tags": [
          "Catalogs"
        ],
        "summary": "Get a list of catalogs",
        "description": "Returns all catalogs with versions defined for the base store.",
        "operationId": "getCatalogs",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CatalogList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/catalogs/{catalogId}": {
      "get": {
        "tags": [
          "Catalogs"
        ],
        "summary": "Get a catalog",
        "description": "Returns information about a catalog based on its ID, along with the versions defined for the current base store.",
        "operationId": "getCatalog",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "catalogId",
            "in": "path",
            "description": "Catalog identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Catalog"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/catalogs/{catalogId}/{catalogVersionId}": {
      "get": {
        "tags": [
          "Catalogs"
        ],
        "summary": "Get information about catalog version",
        "description": "Returns information about the catalog version that exists for the current base store.",
        "operationId": "getCatalogVersion",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "catalogId",
            "in": "path",
            "description": "Catalog identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "catalogVersionId",
            "in": "path",
            "description": "Catalog version identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CatalogVersion"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/catalogs/{catalogId}/{catalogVersionId}/categories/{categoryId}": {
      "get": {
        "tags": [
          "Catalogs"
        ],
        "summary": "Get information about catagory in a catalog version",
        "description": "Returns information about a specified category that exists in a catalog version available for the current base store.",
        "operationId": "getCategories",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "catalogId",
            "in": "path",
            "description": "Catalog identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "catalogVersionId",
            "in": "path",
            "description": "Catalog version identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "categoryId",
            "in": "path",
            "description": "Category identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CategoryHierarchy"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/cms/components": {
      "post": {
        "tags": [
          "Component"
        ],
        "summary": "Get components' data by id given in body",
        "description": "Given a list of component identifiers in body, return cms component data.",
        "operationId": "getComponentByIdList",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "componentIdList",
            "description": "List of Component identifiers",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ComponentIDList"
            }
          },
          {
            "name": "catalogCode",
            "in": "query",
            "description": "Catalog code",
            "required": false,
            "type": "string"
          },
          {
            "name": "productCode",
            "in": "query",
            "description": "Product code",
            "required": false,
            "type": "string"
          },
          {
            "name": "categoryCode",
            "in": "query",
            "description": "Category code",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "Optional pagination parameter. Default value 0.",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Optional pagination parameter. Default value 10.",
            "required": false,
            "type": "integer",
            "default": 10,
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Optional sort criterion. No default value.",
            "required": false,
            "type": "string"
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListAdaptedComponents"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/cms/components/{componentId}": {
      "get": {
        "tags": [
          "Component"
        ],
        "summary": "Get component data",
        "description": "Given a component identifier, return cms component data.",
        "operationId": "getComponentById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "componentId",
            "in": "path",
            "description": "Component identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "catalogCode",
            "in": "query",
            "description": "Catalog code",
            "required": false,
            "type": "string"
          },
          {
            "name": "productCode",
            "in": "query",
            "description": "Product code",
            "required": false,
            "type": "string"
          },
          {
            "name": "categoryCode",
            "in": "query",
            "description": "Category code",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ComponentAdaptedData"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/cms/pages": {
      "get": {
        "tags": [
          "Page"
        ],
        "summary": "Get page data with list of cms content slots",
        "description": "Given a page identifier, return the page data with a list of cms content slots, each of which contains a list of cms component data.",
        "operationId": "getPageData",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "pageType",
            "in": "query",
            "description": "page type",
            "required": false,
            "type": "string",
            "default": "ContentPage",
            "enum": [
              "ContentPage",
              "ProductPage",
              "CategoryPage",
              "CatalogPage"
            ]
          },
          {
            "name": "pageLabelOrId",
            "in": "query",
            "description": "Page Label or Id",
            "required": false,
            "type": "string"
          },
          {
            "name": "code",
            "in": "query",
            "description": "If pageType is ProductPage, code should be product code; if pageType is CategoryPage, code should be category code; if pageType is CatalogPage, code should be catalog code",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration (list of fields, which should be returned in response)",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CMSPage"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/currencies": {
      "get": {
        "tags": [
          "Miscs"
        ],
        "summary": "Get a list of available currencies.",
        "description": "Lists all available currencies (all usable currencies for the current store). If the list of currencies for a base store is empty, a list of all currencies available in the system is returned.",
        "operationId": "getCurrencies",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CurrencyList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/customergroups": {
      "get": {
        "tags": [
          "Customer Groups"
        ],
        "summary": "Get all subgroups of a customergroup.",
        "description": "Returns all customer groups that are direct subgroups of a customergroup.\n\nTo try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.",
        "operationId": "getAllCustomerGroups",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "currentPage",
            "in": "query",
            "description": "Current page number (starts with 0).",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of customer group returned in one page.",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "BASIC",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserGroupList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      },
      "post": {
        "tags": [
          "Customer Groups"
        ],
        "summary": "Creates a new customer group.",
        "description": "Creates a new customer group that is a direct subgroup of a customergroup.\n\nTo try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.",
        "operationId": "createNewCustomerGroupPrim",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "userGroup",
            "description": "User group object with id and name.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserGroup"
            }
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/customergroups/{groupId}": {
      "get": {
        "tags": [
          "Customer Groups"
        ],
        "summary": "Get a specific customer group.",
        "description": "Returns a customer group with a specific groupId.\n\nTo try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.",
        "operationId": "getCustomerGroup",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group identifier.",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "BASIC",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/customergroups/{groupId}/members": {
      "put": {
        "tags": [
          "Customer Groups"
        ],
        "summary": "Sets members for a user group.",
        "description": "Sets members for a user group. The list of existing members is overwritten with a new one.\n\nTo try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.",
        "operationId": "setUserListForCustomerGroupPrim",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group identifier.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "members",
            "description": "List of users to set for customer group.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberList"
            }
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Customer Groups"
        ],
        "summary": "Assigns user(s) to a customer group.",
        "description": "Assigns user(s) to a customer group.\n\nTo try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.",
        "operationId": "assignUserToCustomerGroupPrim",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group identifier.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "members",
            "description": "List of users to assign to customer group.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberList"
            }
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/customergroups/{groupId}/members/{userId}": {
      "delete": {
        "tags": [
          "Customer Groups"
        ],
        "summary": "Delete a user from a customer group.",
        "description": "Removes user from a customer group.\n\nTo try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.",
        "operationId": "removeUsersFromCustomerGroup",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group identifier.",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier.",
            "required": true,
            "type": "string"
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/deliverycountries": {
      "get": {
        "tags": [
          "Miscs"
        ],
        "summary": "Get a list of supported countries.",
        "description": "Lists all supported delivery countries for the current store. The list is sorted alphabetically.",
        "operationId": "getDeliveryCountries",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CountryList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/export/products": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Get a list of product exports.",
        "description": "Used for product export. Depending on the timestamp parameter, it can return all products or only products modified after the given time.",
        "operationId": "exportProducts",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested.",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page.",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          },
          {
            "name": "catalog",
            "in": "query",
            "description": "The catalog to retrieve products from. The catalog must be provided along with the version.",
            "required": false,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "The catalog version. The catalog version must be provided along with the catalog.",
            "required": false,
            "type": "string"
          },
          {
            "name": "timestamp",
            "in": "query",
            "description": "When this parameter is set, only products modified after the given time will be returned. This parameter should be in ISO-8601 format (for example, 2018-01-09T16:28:45+0000).",
            "required": false,
            "type": "string"
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/feeds/orders/statusfeed": {
      "get": {
        "tags": [
          "Feeds"
        ],
        "summary": "Get a list of orders with status updates",
        "description": "Returns the orders that have changed status. Returns only the elements from the current baseSite that have been updated after the provided timestamp.",
        "operationId": "orderStatusFeed",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "timestamp",
            "in": "query",
            "description": "Only items newer than the given parameter are retrieved. This parameter should be in ISO-8601 format (for example, 2018-01-09T16:28:45+0000).",
            "required": true,
            "type": "string"
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrderStatusUpdateElementList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/forgottenpasswordtokens": {
      "post": {
        "tags": [
          "Forgotten Passwords"
        ],
        "summary": "Generates a token to restore a customer's forgotten password.",
        "description": "Generates a token to restore a customer's forgotten password.",
        "operationId": "restorePassword",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "Customer's user id. Customer user id is case insensitive.",
            "required": true,
            "type": "string"
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/languages": {
      "get": {
        "tags": [
          "Miscs"
        ],
        "summary": "Get a list of available languages.",
        "description": "Lists all available languages (all languages used for a particular store). If the list of languages for a base store is empty, a list of all languages available in the system will be returned.",
        "operationId": "getLanguages",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LanguageList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/orders/{code}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get a order",
        "description": "Returns details of a specific order based on the order GUID (Globally Unique Identifier) or the order CODE. The response contains detailed order information.",
        "operationId": "getOrder",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "Order GUID (Globally Unique Identifier) or order CODE",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/products/expressupdate": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get products added to the express update feed",
        "description": "Returns products added to the express update feed. Returns only elements updated after the provided timestamp. The queue is cleared using a defined cronjob.",
        "operationId": "expressUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "timestamp",
            "in": "query",
            "description": "Only items newer than the given parameter are retrieved from the queue. This parameter should be in ISO-8601 format.",
            "required": true,
            "type": "string"
          },
          {
            "name": "catalog",
            "in": "query",
            "description": "Only products from this catalog are returned. Format: catalogId:catalogVersion",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductExpressUpdateElementList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/products/search": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get a list of products and additional data",
        "description": "Returns a list of products and additional data, such as available facets, available sorting, and pagination options. It can also include spelling suggestions. To make spelling suggestions work, you need to make sure that \"enableSpellCheck\" on the SearchQuery is set to \"true\" (by default, it should already be set to \"true\"). You also need to have indexed properties configured to be used for spellchecking.",
        "operationId": "searchProducts",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Serialized query, free text search, facets. The format of a serialized query: freeTextSearch:sort:facetKey1:facetValue1:facetKey2:facetValue2",
            "required": false,
            "type": "string"
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested.",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page.",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The context to be used in the search query.",
            "required": false,
            "type": "string",
            "default": "DEFAULT"
          },
          {
            "name": "searchQueryContext",
            "in": "query",
            "description": "searchQueryContext",
            "required": false,
            "type": "string"
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductSearchPage"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      },
      "head": {
        "tags": [
          "Products"
        ],
        "summary": "Get a header with total number of products",
        "description": "In the response header, the \"x-total-count\" indicates the total number of products satisfying a query.",
        "operationId": "countSearchProducts",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Serialized query, free text search, facets. The format of a serialized query: freeTextSearch:sort:facetKey1:facetValue1:facetKey2:facetValue2",
            "required": false,
            "type": "string"
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/products/suggestions": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get a list of available suggestions",
        "description": "Returns a list of all available suggestions related to a given term and limits the results to a specific value of the max parameter.",
        "operationId": "getSuggestions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "term",
            "in": "query",
            "description": "Specified term",
            "required": true,
            "type": "string"
          },
          {
            "name": "max",
            "in": "query",
            "description": "Specifies the limit of results.",
            "required": true,
            "type": "integer",
            "default": 10,
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SuggestionList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/products/{productCode}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get product details",
        "description": "Returns details of a single product according to a product code.",
        "operationId": "getProductByCode",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "description": "Product identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/products/{productCode}/references": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get a product reference",
        "description": "Returns references for a product with a given product code. Reference type specifies which references to return.",
        "operationId": "exportProductReferences",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "description": "Product identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Maximum size of returned results.",
            "required": false,
            "type": "integer",
            "default": 2147483647,
            "format": "int32"
          },
          {
            "name": "referenceType",
            "in": "query",
            "description": "Reference type according to enum ProductReferenceTypeEnum",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductReferenceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/products/{productCode}/reviews": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get reviews for a product",
        "description": "Returns the reviews for a product with a given product code.",
        "operationId": "getProductReviews",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "description": "Product identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "maxCount",
            "in": "query",
            "description": "Maximum count of reviews",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReviewList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      },
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Creates a new customer review as an anonymous user",
        "description": "Creates a new customer review as an anonymous user.",
        "operationId": "createReviewPrim",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "description": "Product identifier",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "review",
            "description": "Object contains review details like : rating, alias, headline, comment",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Review"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Review"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/products/{productCode}/stock": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get a product's stock level",
        "description": "Returns a product's stock levels sorted by distance from the specified location, which is provided using the free-text \"location\" parameter, or by using the longitude and latitude parameters. The following two sets of parameters are available: location (required), currentPage (optional), pageSize (optional); or longitude (required), latitude (required), currentPage (optional), pageSize(optional).",
        "operationId": "searchProductStockByLocation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "description": "Product identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "location",
            "in": "query",
            "description": "Free-text location",
            "required": false,
            "type": "string"
          },
          {
            "name": "latitude",
            "in": "query",
            "description": "Latitude location parameter.",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "longitude",
            "in": "query",
            "description": "Longitude location parameter.",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested.",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page.",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StoreFinderStockSearchPage"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      },
      "head": {
        "tags": [
          "Products"
        ],
        "summary": "Get header with a total number of product's stock levels",
        "description": "In the response header, the \"x-total-count\" indicates the total number of a product's stock levels. The following two sets of parameters are available: location (required); or longitude (required), and latitude (required).",
        "operationId": "countSearchProductStockByLocation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "description": "Product identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "location",
            "in": "query",
            "description": "Free-text location",
            "required": false,
            "type": "string"
          },
          {
            "name": "latitude",
            "in": "query",
            "description": "Latitude location parameter.",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "longitude",
            "in": "query",
            "description": "Longitude location parameter.",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/products/{productCode}/stock/{storeName}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get a product's stock level for a store",
        "description": "Returns a product's stock level for a particular store (in other words, for a particular point of sale).",
        "operationId": "getStockData",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "productCode",
            "in": "path",
            "description": "Product identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeName",
            "in": "path",
            "description": "Store identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Stock"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/promotions": {
      "get": {
        "tags": [
          "Promotions"
        ],
        "summary": "Get a list of promotions",
        "description": "Returns promotions defined for a current base site. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers and therefore some of them are currently not compatible with the new promotion engine.",
        "operationId": "getPromotionsPrim",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Defines what type of promotions should be returned. Values supported for that parameter are: <ul><li>all: All available promotions are returned</li><li>product: Only product promotions are returned</li><li>order: Only order promotions are returned</li></ul>",
            "required": true,
            "type": "string",
            "enum": [
              "all",
              "product",
              "order"
            ]
          },
          {
            "name": "promotionGroup",
            "in": "query",
            "description": "Only promotions from this group are returned",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "BASIC",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PromotionList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/promotions/{code}": {
      "get": {
        "tags": [
          "Promotions"
        ],
        "summary": "Get a promotion based on code",
        "description": "Returns details of a single promotion specified by a promotion code. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers and therefore some of them are currently not compatible with the new promotion engine.",
        "operationId": "getPromotionByCode",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "Promotion identifier (code)",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "BASIC",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Promotion"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/stores": {
      "get": {
        "tags": [
          "Stores"
        ],
        "summary": "Get a list of store locations",
        "description": "Lists all store locations that are near the location specified in a query or based on latitude and longitude.",
        "operationId": "locationSearch",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Location in natural language i.e. city or country.",
            "required": false,
            "type": "string"
          },
          {
            "name": "latitude",
            "in": "query",
            "description": "Coordinate that specifies the north-south position of a point on the Earth's surface.",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "longitude",
            "in": "query",
            "description": "Coordinate that specifies the east-west position of a point on the Earth's surface.",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested.",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page.",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting method applied to the return results.",
            "required": false,
            "type": "string",
            "default": "asc"
          },
          {
            "name": "radius",
            "in": "query",
            "description": "Radius in meters. Max value: 40075000.0 (Earth's perimeter).",
            "required": false,
            "type": "number",
            "default": 100000.0,
            "format": "double"
          },
          {
            "name": "accuracy",
            "in": "query",
            "description": "Accuracy in meters.",
            "required": false,
            "type": "number",
            "default": 0.0,
            "format": "double"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StoreFinderSearchPage"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      },
      "head": {
        "tags": [
          "Stores"
        ],
        "summary": "Get a header with the number of store locations",
        "description": "In the response header, the \"x-total-count\" indicates the number of all store locations that are near the location specified in a query, or based on latitude and longitude.",
        "operationId": "countLocationSearch",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Location in natural language i.e. city or country.",
            "required": false,
            "type": "string"
          },
          {
            "name": "latitude",
            "in": "query",
            "description": "Coordinate that specifies the north-south position of a point on the Earth's surface.",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "longitude",
            "in": "query",
            "description": "Coordinate that specifies the east-west position of a point on the Earth's surface.",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "radius",
            "in": "query",
            "description": "Radius in meters. Max value: 40075000.0 (Earth's perimeter).",
            "required": false,
            "type": "number",
            "default": 100000.0,
            "format": "double"
          },
          {
            "name": "accuracy",
            "in": "query",
            "description": "Accuracy in meters.",
            "required": false,
            "type": "number",
            "default": 0.0,
            "format": "double"
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/stores/{storeId}": {
      "get": {
        "tags": [
          "Stores"
        ],
        "summary": "Get a store location",
        "description": "Returns store location based on its unique name.",
        "operationId": "locationDetails",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "Store identifier (currently store name)",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PointOfService"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/titles": {
      "get": {
        "tags": [
          "Miscs"
        ],
        "summary": "Get a list of all localized titles.",
        "description": "Lists all localized titles.",
        "operationId": "getTitles",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TitleList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/users": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": " Registers a customer",
        "description": "Registers a customer. There are two options for registering a customer. The first option requires the following parameters: login, password, firstName, lastName, titleCode. The second option converts a guest to a customer. In this case, the required parameters are: guid, password.",
        "operationId": "registerUserPrim",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "description": "User's object.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserSignUp"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get customer profile",
        "description": "Returns customer profile.",
        "operationId": "getUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Updates customer profile",
        "description": "Updates customer profile. Attributes not provided in the request body will be defined again (set to null or default).",
        "operationId": "putUserPrim",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "description": "User's object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete customer profile",
        "description": "Removes customer profile.",
        "operationId": "deactivateUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Updates customer profile",
        "description": "Updates customer profile. Only attributes provided in the request body will be changed.",
        "operationId": "updateUserPrim",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "description": "User's object.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/addresses": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get customer's addresses",
        "description": "Returns customer's addresses.",
        "operationId": "getAddresses",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AddressList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Creates a new address.",
        "description": "Creates a new address.",
        "operationId": "createAddressPrim",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "address",
            "description": "Address object.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Address"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Address"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/addresses/verification": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Verifies address",
        "description": "Verifies address.",
        "operationId": "verifyAddressPrim",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "address",
            "description": "Address object.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Address"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AddressValidation"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/addresses/{addressId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get info about address",
        "description": "Returns detailed information about address with a given id.",
        "operationId": "getAddress",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "Address identifier.",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Address"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Updates the address",
        "description": "Updates the address. Attributes not provided in the request will be defined again (set to null or default).",
        "operationId": "putAddressPrim",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "Address identifier.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "address",
            "description": "Address object.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Address"
            }
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete customer's address",
        "description": "Removes customer's address.",
        "operationId": "deleteAddress",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "Address identifier.",
            "required": true,
            "type": "string"
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Updates the address",
        "description": "Updates the address. Only attributes provided in the request body will be changed.",
        "operationId": "patchAddressPrim",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "Address identifier.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "address",
            "description": "Address object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Address"
            }
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts": {
      "get": {
        "tags": [
          "Carts"
        ],
        "summary": "Get all customer carts.",
        "description": "Lists all customer carts.",
        "operationId": "getCarts",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "savedCartsOnly",
            "in": "query",
            "description": "Optional parameter. If the parameter is provided and its value is true, only saved carts are returned.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "Optional pagination parameter in case of savedCartsOnly == true. Default value 0.",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Optional {@link PaginationData} parameter in case of savedCartsOnly == true. Default value 20.",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Optional sort criterion in case of savedCartsOnly == true. No default value.",
            "required": false,
            "type": "string"
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CartList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      },
      "post": {
        "tags": [
          "Carts"
        ],
        "summary": "Creates or restore a cart for a user.",
        "description": "Creates a new cart or restores an anonymous cart as a user's cart (if an old Cart Id is given in the request).",
        "operationId": "createCart",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "oldCartId",
            "in": "query",
            "description": "Anonymous cart GUID.",
            "required": false,
            "type": "string"
          },
          {
            "name": "toMergeCartGuid",
            "in": "query",
            "description": "The GUID of the user's cart that will be merged with the anonymous cart.",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Cart"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}": {
      "get": {
        "tags": [
          "Carts"
        ],
        "summary": "Get a cart with a given identifier.",
        "description": "Returns the cart with a given identifier.",
        "operationId": "getCart",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Cart"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Carts"
        ],
        "summary": "Deletes a cart with a given cart id.",
        "description": "Deletes a cart with a given cart id.",
        "operationId": "deleteCart",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/addresses/delivery": {
      "post": {
        "tags": [
          "Carts"
        ],
        "summary": "Creates a delivery address for the cart.",
        "description": "Creates an address and assigns it to the cart as the delivery address.",
        "operationId": "createAndSetAddressPrim",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "address",
            "description": "Request body parameter that contains details such as the customer's first name (firstName), the customer's last name (lastName), the customer's title (titleCode), the country (country.isocode), the first part of the address (line1), the second part of the address (line2), the town (town), the postal code (postalCode), and the region (region.isocode).\n\nThe DTO is in XML or .json format.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Address"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Address"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      },
      "put": {
        "tags": [
          "Carts"
        ],
        "summary": "Sets a delivery address for the cart.",
        "description": "Sets a delivery address for the cart. The address country must be placed among the delivery countries of the current base store.",
        "operationId": "setCartDeliveryAddress",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "addressId",
            "in": "query",
            "description": "Address identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Carts"
        ],
        "summary": "Delete the delivery address from the cart.",
        "description": "Removes the delivery address from the cart.",
        "operationId": "removeCartDeliveryAddress",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/clonesavedcart": {
      "post": {
        "tags": [
          "Save Cart"
        ],
        "summary": "Explicitly clones a cart.",
        "description": "Explicitly clones a cart.",
        "operationId": "cloneSaveCart",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name that should be applied to the cloned cart.",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "description": "The description that should be applied to the cloned cart.",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SaveCartResult"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/deliverymode": {
      "get": {
        "tags": [
          "Carts"
        ],
        "summary": "Get the delivery mode selected for the cart.",
        "description": "Returns the delivery mode selected for the cart.",
        "operationId": "getCartDeliveryMode",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeliveryMode"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      },
      "put": {
        "tags": [
          "Carts"
        ],
        "summary": "Sets the delivery mode for a cart.",
        "description": "Sets the delivery mode with a given identifier for the cart.",
        "operationId": "setCartDeliveryMode",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "deliveryModeId",
            "in": "query",
            "description": "Delivery mode identifier (code)",
            "required": true,
            "type": "string"
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Carts"
        ],
        "summary": "Delete the delivery mode from the cart.",
        "description": "Removes the delivery mode from the cart.",
        "operationId": "removeDeliveryMode",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/deliverymodes": {
      "get": {
        "tags": [
          "Carts"
        ],
        "summary": "Get all delivery modes for the current store and delivery address.",
        "description": "Returns all delivery modes supported for the current base store and cart delivery address. A delivery address must be set for the cart, otherwise an empty list will be returned.",
        "operationId": "getSupportedDeliveryModes",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeliveryModeList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/email": {
      "put": {
        "tags": [
          "Carts"
        ],
        "summary": "Assigns an email to the cart.",
        "description": "Assigns an email to the cart. This step is required to make a guest checkout.",
        "operationId": "guestLogin",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "Email of the guest user. It will be used during the checkout process.",
            "required": true,
            "type": "string"
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/entries": {
      "get": {
        "tags": [
          "Carts"
        ],
        "summary": "Get cart entries.",
        "description": "Returns cart entries.",
        "operationId": "getCartEntries",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrderEntryList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      },
      "post": {
        "tags": [
          "Carts"
        ],
        "summary": "Adds a product to the cart.",
        "description": "Adds a product to the cart.",
        "operationId": "addCartEntryPrim",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "entry",
            "description": "Request body parameter that contains details such as the product code (product.code), the quantity of product (quantity), and the pickup store name (deliveryPointOfService.name).\n\nThe DTO is in XML or .json format.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderEntry"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CartModification"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/entries/{entryNumber}": {
      "get": {
        "tags": [
          "Carts"
        ],
        "summary": "Get the details of the cart entries.",
        "description": "Returns the details of the cart entries.",
        "operationId": "getCartEntry",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "entryNumber",
            "in": "path",
            "description": "The entry number. Each entry in a cart has an entry number. Cart entries are numbered in ascending order, starting with zero (0).",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrderEntry"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      },
      "put": {
        "tags": [
          "Carts"
        ],
        "summary": "Set quantity and store details of a cart entry.",
        "description": "Updates the quantity of a single cart entry and the details of the store where the cart entry will be picked up. Attributes not provided in request will be defined again (set to null or default)",
        "operationId": "setCartEntryPrim",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "entryNumber",
            "in": "path",
            "description": "The entry number. Each entry in a cart has an entry number. Cart entries are numbered in ascending order, starting with zero (0).",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "entry",
            "description": "Request body parameter that contains details such as the quantity of product (quantity), and the pickup store name (deliveryPointOfService.name)\n\nThe DTO is in XML or .json format.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderEntry"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CartModification"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Carts"
        ],
        "summary": "Deletes cart entry.",
        "description": "Deletes cart entry.",
        "operationId": "removeCartEntry",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "entryNumber",
            "in": "path",
            "description": "The entry number. Each entry in a cart has an entry number. Cart entries are numbered in ascending order, starting with zero (0).",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Carts"
        ],
        "summary": "Update quantity and store details of a cart entry.",
        "description": "Updates the quantity of a single cart entry and the details of the store where the cart entry will be picked up.",
        "operationId": "updateCartEntryPrim",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "entryNumber",
            "in": "path",
            "description": "The entry number. Each entry in a cart has an entry number. Cart entries are numbered in ascending order, starting with zero (0).",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "entry",
            "description": "Request body parameter that contains details such as the quantity of product (quantity), and the pickup store name (deliveryPointOfService.name)\n\nThe DTO is in XML or .json format.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderEntry"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CartModification"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/flagForDeletion": {
      "patch": {
        "tags": [
          "Save Cart"
        ],
        "summary": "Flag a cart for deletion.",
        "description": "Flags a cart for deletion (the cart doesn't have corresponding save cart attributes anymore). The cart is not actually deleted from the database. But with the removal of the saved cart attributes, this cart will be taken care of by the cart removal job just like any other cart.",
        "operationId": "flagForDeletion",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SaveCartResult"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/paymentdetails": {
      "post": {
        "tags": [
          "Carts"
        ],
        "summary": "Defines and assigns details of a new credit card payment to the cart.",
        "description": "Defines the details of a new credit card, and assigns this payment option to the cart.",
        "operationId": "addPaymentDetailsPrim",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "paymentDetails",
            "description": "Request body parameter that contains details such as the name on the card (accountHolderName), the card number (cardNumber), the card type (cardType.code), the month of the expiry date (expiryMonth), the year of the expiry date (expiryYear), whether the payment details should be saved (saved), whether the payment details should be set as default (defaultPaymentInfo), and the billing address (billingAddress.firstName, billingAddress.lastName, billingAddress.titleCode, billingAddress.country.isocode, billingAddress.line1, billingAddress.line2, billingAddress.town, billingAddress.postalCode, billingAddress.region.isocode)\n\nThe DTO is in XML or .json format.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentDetails"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/PaymentDetails"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      },
      "put": {
        "tags": [
          "Carts"
        ],
        "summary": "Sets credit card payment details for the cart.",
        "description": "Sets credit card payment details for the cart.",
        "operationId": "setPaymentDetails",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentDetailsId",
            "in": "query",
            "description": "Payment details identifier.",
            "required": true,
            "type": "string"
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/promotions": {
      "get": {
        "tags": [
          "Carts"
        ],
        "summary": "Get information about promotions applied on cart.",
        "description": "Returns information about the promotions applied on the cart. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers, and as a result, some of them are currently not compatible with the new promotions engine.",
        "operationId": "getPromotions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PromotionResultList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      },
      "post": {
        "tags": [
          "Carts"
        ],
        "summary": "Enables promotions based on the promotionsId of the cart.",
        "description": "Enables a promotion for the order based on the promotionId defined for the cart. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers, and as a result, some of them are currently not compatible with the new promotions engine.",
        "operationId": "applyPromotion",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "promotionId",
            "in": "query",
            "description": "Promotion identifier (code)",
            "required": true,
            "type": "string"
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/promotions/{promotionId}": {
      "get": {
        "tags": [
          "Carts"
        ],
        "summary": "Get information about promotions applied on cart.",
        "description": "Returns information about a promotion (with a specific promotionId), that has been applied on the cart. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers, and as a result, some of them are currently not compatible with the new promotions engine.",
        "operationId": "getPromotion",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "promotionId",
            "in": "path",
            "description": "Promotion identifier (code)",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PromotionResultList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Carts"
        ],
        "summary": "Disables the promotion based on the promotionsId of the cart.",
        "description": "Disables the promotion for the order based on the promotionId defined for the cart. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers, and as a result, some of them are currently not compatible with the new promotions engine.",
        "operationId": "removePromotion",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "promotionId",
            "in": "path",
            "description": "Promotion identifier (code)",
            "required": true,
            "type": "string"
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/restoresavedcart": {
      "patch": {
        "tags": [
          "Save Cart"
        ],
        "summary": "Restore a saved cart.",
        "description": "Restore a saved cart.",
        "operationId": "restoreSavedCart",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SaveCartResult"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/save": {
      "patch": {
        "tags": [
          "Save Cart"
        ],
        "summary": "Explicitly saves a cart.",
        "description": "Explicitly saves a cart.",
        "operationId": "saveCart",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "saveCartName",
            "in": "query",
            "description": "The name that should be applied to the saved cart.",
            "required": false,
            "type": "string"
          },
          {
            "name": "saveCartDescription",
            "in": "query",
            "description": "The description that should be applied to the saved cart.",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SaveCartResult"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/savedcart": {
      "get": {
        "tags": [
          "Save Cart"
        ],
        "summary": "Get a saved cart.",
        "description": "Returns a saved cart for an authenticated user. The cart is identified using the \"cartId\" parameter.",
        "operationId": "getSavedCart",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SaveCartResult"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/vouchers": {
      "get": {
        "tags": [
          "Carts"
        ],
        "summary": "Get a list of vouchers applied to the cart.",
        "description": "Returns a list of vouchers applied to the cart.",
        "operationId": "getVouchers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VoucherList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      },
      "post": {
        "tags": [
          "Carts"
        ],
        "summary": "Applies a voucher based on the voucherId defined for the cart.",
        "description": "Applies a voucher based on the voucherId defined for the cart.",
        "operationId": "applyVoucherForCart",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "voucherId",
            "in": "query",
            "description": "Voucher identifier (code)",
            "required": true,
            "type": "string"
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/carts/{cartId}/vouchers/{voucherId}": {
      "delete": {
        "tags": [
          "Carts"
        ],
        "summary": "Delete a voucher defined for the current cart.",
        "description": "Removes a voucher based on the voucherId defined for the current cart.",
        "operationId": "releaseVoucherFromCart",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "voucherId",
            "in": "path",
            "description": "Voucher identifier (code)",
            "required": true,
            "type": "string"
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          },
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/customergroups": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all customer groups of a customer.",
        "description": "Returns all customer groups of a customer.",
        "operationId": "getAllCustomerGroupsForCustomer",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserGroupList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/login": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Changes customer's login name.",
        "description": "Changes a customer's login name. Requires the customer's current password.",
        "operationId": "changeLogin",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "newLogin",
            "in": "query",
            "description": "Customer's new login name. Customer login is case insensitive.",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "Customer's current password.",
            "required": true,
            "type": "string"
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orders": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get order history for user",
        "description": "Returns order history data for all orders placed by a specified user for a specified base store. The response can display the results across multiple pages, if required.",
        "operationId": "getOrdersForUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "statuses",
            "in": "query",
            "description": "Filters only certain order statuses. For example, statuses=CANCELLED,CHECKED_VALID would only return orders with status CANCELLED or CHECKED_VALID.",
            "required": false,
            "type": "string"
          },
          {
            "name": "currentPage",
            "in": "query",
            "description": "The current result page requested.",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results returned per page.",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting method applied to the return results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrderHistoryList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      },
      "head": {
        "tags": [
          "Orders"
        ],
        "summary": "Get total number of orders",
        "description": "In the response header, the \"x-total-count\" indicates the total number of orders placed by a specified user for a specified base store.",
        "operationId": "getCountOrdersForUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "statuses",
            "in": "query",
            "description": "Filters only certain order statuses. For example, statuses=CANCELLED,CHECKED_VALID would only return orders with status CANCELLED or CHECKED_VALID.",
            "required": false,
            "type": "string"
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      },
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Post a order",
        "description": "Authorizes the cart and places the order. The response contains the new order data.",
        "operationId": "placeOrder",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "query",
            "description": "Cart code for logged in user, cart GUID for guest checkout",
            "required": true,
            "type": "string"
          },
          {
            "name": "securityCode",
            "in": "query",
            "description": "CCV security code.",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/orders/{code}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get a order",
        "description": "Returns specific order details based on a specific order code. The response contains detailed order information.",
        "operationId": "getOrderForUserByCode",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "Order GUID (Globally Unique Identifier) or order CODE",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/password": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Changes customer's password",
        "description": "Changes customer's password.",
        "operationId": "changePassword",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "old",
            "in": "query",
            "description": "Old password. Required only for ROLE_CUSTOMERGROUP",
            "required": false,
            "type": "string"
          },
          {
            "name": "new",
            "in": "query",
            "description": "New password.",
            "required": true,
            "type": "string"
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/paymentdetails": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get customer's credit card payment details list.",
        "description": "Return customer's credit card payment details list.",
        "operationId": "getPaymentInfos",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "saved",
            "in": "query",
            "description": "Type of payment details.",
            "required": true,
            "type": "boolean",
            "default": false
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaymentDetailsList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/users/{userId}/paymentdetails/{paymentDetailsId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get customer's credit card payment details.",
        "description": "Returns a customer's credit card payment details for the specified paymentDetailsId.",
        "operationId": "getPaymentDetails",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentDetailsId",
            "in": "path",
            "description": "Payment details identifier.",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaymentDetails"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Updates existing customer's credit card payment info.",
        "description": "Updates existing customer's credit card payment info based on the payment info ID. Attributes not given in request will be defined again (set to null or default).",
        "operationId": "putPaymentInfoPrim",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentDetailsId",
            "in": "path",
            "description": "Payment details identifier.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "paymentDetails",
            "description": "Payment details object.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentDetails"
            }
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete customer's credit card payment details.",
        "description": "Removes a customer's credit card payment details based on a specified paymentDetailsId.",
        "operationId": "deletePaymentInfo",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentDetailsId",
            "in": "path",
            "description": "Payment details identifier.",
            "required": true,
            "type": "string"
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Updates existing customer's credit card payment details.",
        "description": "Updates an existing customer's credit card payment details based on the specified paymentDetailsId. Only those attributes provided in the request will be updated.",
        "operationId": "updatePaymentInfoPrim",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentDetailsId",
            "in": "path",
            "description": "Payment details identifier.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "paymentDetails",
            "description": "Payment details object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentDetails"
            }
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2_Password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/{baseSiteId}/vouchers/{code}": {
      "get": {
        "tags": [
          "Vouchers"
        ],
        "summary": "Get a voucher based on code",
        "description": "Returns details of a single voucher that is specified by its voucher identification code.",
        "operationId": "getVoucherByCode",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "Voucher identifier (code)",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body.",
            "required": false,
            "type": "string",
            "default": "BASIC",
            "enum": [
              "BASIC",
              "DEFAULT",
              "FULL"
            ]
          },
          {
            "name": "baseSiteId",
            "in": "path",
            "description": "Base site identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Voucher"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "oauth2_Password": {
      "type": "oauth2",
      "tokenUrl": "/authorizationserver/oauth/token",
      "flow": "password",
      "scopes": {
        "basic": ""
      }
    },
    "oauth2_client_credentials": {
      "type": "oauth2",
      "tokenUrl": "/authorizationserver/oauth/token",
      "flow": "application",
      "scopes": {
        "extended": ""
      }
    }
  },
  "definitions": {
    "AddressList": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Address"
          }
        }
      }
    },
    "AddressValidation": {
      "type": "object",
      "properties": {
        "decision": {
          "type": "string"
        },
        "errors": {
          "$ref": "#/definitions/errorList"
        },
        "suggestedAddresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Address"
          }
        }
      }
    },
    "Address": {
      "type": "object",
      "properties": {
        "companyName": {
          "type": "string"
        },
        "country": {
          "$ref": "#/definitions/Country"
        },
        "defaultAddress": {
          "type": "boolean"
        },
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "formattedAddress": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "line1": {
          "type": "string"
        },
        "line2": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "region": {
          "$ref": "#/definitions/Region"
        },
        "shippingAddress": {
          "type": "boolean"
        },
        "title": {
          "type": "string"
        },
        "titleCode": {
          "type": "string"
        },
        "town": {
          "type": "string"
        },
        "visibleInAddressBook": {
          "type": "boolean"
        }
      }
    },
    "BaseOption": {
      "type": "object",
      "properties": {
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariantOption"
          }
        },
        "selected": {
          "$ref": "#/definitions/VariantOption"
        },
        "variantType": {
          "type": "string"
        }
      }
    },
    "Breadcrumb": {
      "type": "object",
      "properties": {
        "facetCode": {
          "type": "string"
        },
        "facetName": {
          "type": "string"
        },
        "facetValueCode": {
          "type": "string"
        },
        "facetValueName": {
          "type": "string"
        },
        "removeQuery": {
          "$ref": "#/definitions/SearchState"
        },
        "truncateQuery": {
          "$ref": "#/definitions/SearchState"
        }
      }
    },
    "CMSPage": {
      "type": "object",
      "properties": {
        "contentSlots": {
          "$ref": "#/definitions/ContentSlotList"
        },
        "defaultPage": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "template": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "typeCode": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "CardTypeList": {
      "type": "object",
      "properties": {
        "cardTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CardType"
          }
        }
      }
    },
    "CardType": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "CartList": {
      "type": "object",
      "properties": {
        "carts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Cart"
          }
        }
      }
    },
    "CartModification": {
      "type": "object",
      "properties": {
        "deliveryModeChanged": {
          "type": "boolean"
        },
        "entry": {
          "$ref": "#/definitions/OrderEntry"
        },
        "quantity": {
          "type": "integer",
          "format": "int64"
        },
        "quantityAdded": {
          "type": "integer",
          "format": "int64"
        },
        "statusCode": {
          "type": "string"
        },
        "statusMessage": {
          "type": "string"
        }
      }
    },
    "Cart": {
      "type": "object",
      "properties": {
        "appliedOrderPromotions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PromotionResult"
          }
        },
        "appliedProductPromotions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PromotionResult"
          }
        },
        "appliedVouchers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Voucher"
          }
        },
        "calculated": {
          "type": "boolean"
        },
        "code": {
          "type": "string"
        },
        "deliveryAddress": {
          "$ref": "#/definitions/Address"
        },
        "deliveryCost": {
          "$ref": "#/definitions/Price"
        },
        "deliveryItemsQuantity": {
          "type": "integer",
          "format": "int64"
        },
        "deliveryMode": {
          "$ref": "#/definitions/DeliveryMode"
        },
        "deliveryOrderGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeliveryOrderEntryGroup"
          }
        },
        "description": {
          "type": "string"
        },
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderEntry"
          }
        },
        "expirationTime": {
          "type": "string",
          "format": "date-time"
        },
        "guid": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "net": {
          "type": "boolean"
        },
        "orderDiscounts": {
          "$ref": "#/definitions/Price"
        },
        "paymentInfo": {
          "$ref": "#/definitions/PaymentDetails"
        },
        "pickupItemsQuantity": {
          "type": "integer",
          "format": "int64"
        },
        "pickupOrderGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PickupOrderEntryGroup"
          }
        },
        "potentialOrderPromotions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PromotionResult"
          }
        },
        "potentialProductPromotions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PromotionResult"
          }
        },
        "productDiscounts": {
          "$ref": "#/definitions/Price"
        },
        "saveTime": {
          "type": "string",
          "format": "date-time"
        },
        "savedBy": {
          "$ref": "#/definitions/Principal"
        },
        "site": {
          "type": "string"
        },
        "store": {
          "type": "string"
        },
        "subTotal": {
          "$ref": "#/definitions/Price"
        },
        "totalDiscounts": {
          "$ref": "#/definitions/Price"
        },
        "totalItems": {
          "type": "integer",
          "format": "int32"
        },
        "totalPrice": {
          "$ref": "#/definitions/Price"
        },
        "totalPriceWithTax": {
          "$ref": "#/definitions/Price"
        },
        "totalTax": {
          "$ref": "#/definitions/Price"
        },
        "totalUnitCount": {
          "type": "integer",
          "format": "int32"
        },
        "user": {
          "$ref": "#/definitions/Principal"
        }
      }
    },
    "CatalogList": {
      "type": "object",
      "properties": {
        "catalogs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Catalog"
          }
        }
      }
    },
    "CatalogVersion": {
      "type": "object",
      "properties": {
        "categories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryHierarchy"
          }
        },
        "id": {
          "type": "string"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "Catalog": {
      "type": "object",
      "properties": {
        "catalogVersions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogVersion"
          }
        },
        "id": {
          "type": "string"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "CategoryHierarchy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "subcategories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryHierarchy"
          }
        },
        "url": {
          "type": "string"
        }
      }
    },
    "Category": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "image": {
          "$ref": "#/definitions/Image"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "Classification": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "features": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Feature"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ComponentAdaptedData": {
      "type": "object"
    },
    "ComponentIDList": {
      "type": "object",
      "properties": {
        "idList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ComponentList": {
      "type": "object",
      "properties": {
        "component": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Component"
          }
        }
      }
    },
    "Component": {
      "type": "object",
      "properties": {
        "modifiedtime": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "otherProperties": {
          "type": "object"
        },
        "typeCode": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "ConsignmentEntry": {
      "type": "object",
      "properties": {
        "orderEntry": {
          "$ref": "#/definitions/OrderEntry"
        },
        "quantity": {
          "type": "integer",
          "format": "int64"
        },
        "shippedQuantity": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Consignment": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "deliveryPointOfService": {
          "$ref": "#/definitions/PointOfService"
        },
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConsignmentEntry"
          }
        },
        "shippingAddress": {
          "$ref": "#/definitions/Address"
        },
        "status": {
          "type": "string"
        },
        "statusDate": {
          "type": "string",
          "format": "date-time"
        },
        "trackingID": {
          "type": "string"
        }
      }
    },
    "ContentSlotList": {
      "type": "object",
      "properties": {
        "contentSlot": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContentSlot"
          }
        }
      }
    },
    "ContentSlot": {
      "type": "object",
      "properties": {
        "components": {
          "$ref": "#/definitions/ComponentList"
        },
        "name": {
          "type": "string"
        },
        "position": {
          "type": "string"
        },
        "slotId": {
          "type": "string"
        },
        "slotShared": {
          "type": "boolean"
        },
        "slotStatus": {
          "type": "string"
        }
      }
    },
    "CountryList": {
      "type": "object",
      "properties": {
        "countries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Country"
          }
        }
      }
    },
    "Country": {
      "type": "object",
      "properties": {
        "isocode": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "CurrencyList": {
      "type": "object",
      "properties": {
        "currencies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Currency"
          }
        }
      }
    },
    "Currency": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "isocode": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        }
      }
    },
    "DeliveryModeList": {
      "type": "object",
      "properties": {
        "deliveryModes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeliveryMode"
          }
        }
      }
    },
    "DeliveryMode": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "deliveryCost": {
          "$ref": "#/definitions/Price"
        },
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "DeliveryOrderEntryGroup": {
      "type": "object",
      "properties": {
        "deliveryAddress": {
          "$ref": "#/definitions/Address"
        },
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderEntry"
          }
        },
        "quantity": {
          "type": "integer",
          "format": "int64"
        },
        "totalPriceWithTax": {
          "$ref": "#/definitions/Price"
        }
      }
    },
    "FacetValue": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "query": {
          "$ref": "#/definitions/SearchState"
        },
        "selected": {
          "type": "boolean"
        }
      }
    },
    "Facet": {
      "type": "object",
      "properties": {
        "category": {
          "type": "boolean"
        },
        "multiSelect": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "topValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FacetValue"
          }
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FacetValue"
          }
        },
        "visible": {
          "type": "boolean"
        }
      }
    },
    "FeatureUnit": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        },
        "unitType": {
          "type": "string"
        }
      }
    },
    "FeatureValue": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        }
      }
    },
    "Feature": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "comparable": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "featureUnit": {
          "$ref": "#/definitions/FeatureUnit"
        },
        "featureValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeatureValue"
          }
        },
        "name": {
          "type": "string"
        },
        "range": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "FutureStock": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "formattedDate": {
          "type": "string"
        },
        "stock": {
          "$ref": "#/definitions/Stock"
        }
      }
    },
    "GeoPoint": {
      "type": "object",
      "properties": {
        "latitude": {
          "type": "number",
          "format": "double"
        },
        "longitude": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "Image": {
      "type": "object",
      "properties": {
        "altText": {
          "type": "string"
        },
        "format": {
          "type": "string"
        },
        "galleryIndex": {
          "type": "integer",
          "format": "int32"
        },
        "imageType": {
          "type": "string",
          "enum": [
            "PRIMARY",
            "GALLERY"
          ]
        },
        "url": {
          "type": "string"
        }
      }
    },
    "LanguageList": {
      "type": "object",
      "properties": {
        "languages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Language"
          }
        }
      }
    },
    "Language": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "isocode": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "nativeName": {
          "type": "string"
        }
      }
    },
    "ListAdaptedComponents": {
      "type": "object",
      "properties": {
        "components": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComponentAdaptedData"
          }
        },
        "pagination": {
          "$ref": "#/definitions/pagination"
        },
        "sorts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sort"
          }
        }
      }
    },
    "MemberList": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Principal"
          }
        }
      }
    },
    "OpeningSchedule": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "specialDayOpeningList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpecialOpeningDay"
          }
        },
        "weekDayOpeningList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WeekdayOpeningDay"
          }
        }
      }
    },
    "OrderEntryList": {
      "type": "object",
      "properties": {
        "orderEntries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderEntry"
          }
        }
      }
    },
    "OrderEntry": {
      "type": "object",
      "properties": {
        "basePrice": {
          "$ref": "#/definitions/Price"
        },
        "deliveryMode": {
          "$ref": "#/definitions/DeliveryMode"
        },
        "deliveryPointOfService": {
          "$ref": "#/definitions/PointOfService"
        },
        "entryNumber": {
          "type": "integer",
          "format": "int32"
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "quantity": {
          "type": "integer",
          "format": "int64"
        },
        "totalPrice": {
          "$ref": "#/definitions/Price"
        },
        "updateable": {
          "type": "boolean"
        }
      }
    },
    "OrderHistoryList": {
      "type": "object",
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderHistory"
          }
        },
        "pagination": {
          "$ref": "#/definitions/Pagination"
        },
        "sorts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Sort"
          }
        }
      }
    },
    "OrderHistory": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "guid": {
          "type": "string"
        },
        "placed": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string"
        },
        "statusDisplay": {
          "type": "string"
        },
        "total": {
          "$ref": "#/definitions/Price"
        }
      }
    },
    "OrderStatusUpdateElementList": {
      "type": "object",
      "properties": {
        "orderStatusUpdateElements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderStatusUpdateElement"
          }
        }
      }
    },
    "OrderStatusUpdateElement": {
      "type": "object",
      "properties": {
        "baseSiteId": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "Order": {
      "type": "object",
      "properties": {
        "appliedOrderPromotions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PromotionResult"
          }
        },
        "appliedProductPromotions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PromotionResult"
          }
        },
        "appliedVouchers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Voucher"
          }
        },
        "calculated": {
          "type": "boolean"
        },
        "code": {
          "type": "string"
        },
        "consignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Consignment"
          }
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "deliveryAddress": {
          "$ref": "#/definitions/Address"
        },
        "deliveryCost": {
          "$ref": "#/definitions/Price"
        },
        "deliveryItemsQuantity": {
          "type": "integer",
          "format": "int64"
        },
        "deliveryMode": {
          "$ref": "#/definitions/DeliveryMode"
        },
        "deliveryOrderGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeliveryOrderEntryGroup"
          }
        },
        "deliveryStatus": {
          "type": "string"
        },
        "deliveryStatusDisplay": {
          "type": "string"
        },
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderEntry"
          }
        },
        "guestCustomer": {
          "type": "boolean"
        },
        "guid": {
          "type": "string"
        },
        "net": {
          "type": "boolean"
        },
        "orderDiscounts": {
          "$ref": "#/definitions/Price"
        },
        "paymentInfo": {
          "$ref": "#/definitions/PaymentDetails"
        },
        "pickupItemsQuantity": {
          "type": "integer",
          "format": "int64"
        },
        "pickupOrderGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PickupOrderEntryGroup"
          }
        },
        "productDiscounts": {
          "$ref": "#/definitions/Price"
        },
        "site": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "statusDisplay": {
          "type": "string"
        },
        "store": {
          "type": "string"
        },
        "subTotal": {
          "$ref": "#/definitions/Price"
        },
        "totalDiscounts": {
          "$ref": "#/definitions/Price"
        },
        "totalItems": {
          "type": "integer",
          "format": "int32"
        },
        "totalPrice": {
          "$ref": "#/definitions/Price"
        },
        "totalPriceWithTax": {
          "$ref": "#/definitions/Price"
        },
        "totalTax": {
          "$ref": "#/definitions/Price"
        },
        "unconsignedEntries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderEntry"
          }
        },
        "user": {
          "$ref": "#/definitions/Principal"
        }
      }
    },
    "Pagination": {
      "type": "object",
      "properties": {
        "currentPage": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "type": "string"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PaymentDetailsList": {
      "type": "object",
      "properties": {
        "payments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentDetails"
          }
        }
      }
    },
    "PaymentDetails": {
      "type": "object",
      "properties": {
        "accountHolderName": {
          "type": "string"
        },
        "billingAddress": {
          "$ref": "#/definitions/Address"
        },
        "cardNumber": {
          "type": "string"
        },
        "cardType": {
          "$ref": "#/definitions/CardType"
        },
        "defaultPayment": {
          "type": "boolean"
        },
        "expiryMonth": {
          "type": "string"
        },
        "expiryYear": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "issueNumber": {
          "type": "string"
        },
        "saved": {
          "type": "boolean"
        },
        "startMonth": {
          "type": "string"
        },
        "startYear": {
          "type": "string"
        },
        "subscriptionId": {
          "type": "string"
        }
      }
    },
    "PickupOrderEntryGroup": {
      "type": "object",
      "properties": {
        "deliveryPointOfService": {
          "$ref": "#/definitions/PointOfService"
        },
        "distance": {
          "type": "number",
          "format": "double"
        },
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderEntry"
          }
        },
        "quantity": {
          "type": "integer",
          "format": "int64"
        },
        "totalPriceWithTax": {
          "$ref": "#/definitions/Price"
        }
      }
    },
    "PointOfServiceStock": {
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "distanceKm": {
          "type": "number",
          "format": "double"
        },
        "features": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "formattedDistance": {
          "type": "string"
        },
        "geoPoint": {
          "$ref": "#/definitions/GeoPoint"
        },
        "mapIcon": {
          "$ref": "#/definitions/Image"
        },
        "name": {
          "type": "string"
        },
        "openingHours": {
          "$ref": "#/definitions/OpeningSchedule"
        },
        "stockInfo": {
          "$ref": "#/definitions/Stock"
        },
        "storeContent": {
          "type": "string"
        },
        "storeImages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Image"
          }
        },
        "url": {
          "type": "string"
        }
      }
    },
    "PointOfService": {
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "distanceKm": {
          "type": "number",
          "format": "double"
        },
        "features": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "formattedDistance": {
          "type": "string"
        },
        "geoPoint": {
          "$ref": "#/definitions/GeoPoint"
        },
        "mapIcon": {
          "$ref": "#/definitions/Image"
        },
        "name": {
          "type": "string"
        },
        "openingHours": {
          "$ref": "#/definitions/OpeningSchedule"
        },
        "storeContent": {
          "type": "string"
        },
        "storeImages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Image"
          }
        },
        "url": {
          "type": "string"
        }
      }
    },
    "PriceRange": {
      "type": "object",
      "properties": {
        "maxPrice": {
          "$ref": "#/definitions/Price"
        },
        "minPrice": {
          "$ref": "#/definitions/Price"
        }
      }
    },
    "Price": {
      "type": "object",
      "properties": {
        "currencyIso": {
          "type": "string"
        },
        "formattedValue": {
          "type": "string"
        },
        "maxQuantity": {
          "type": "integer",
          "format": "int64"
        },
        "minQuantity": {
          "type": "integer",
          "format": "int64"
        },
        "priceType": {
          "type": "string",
          "enum": [
            "BUY",
            "FROM"
          ]
        },
        "value": {
          "type": "number"
        }
      }
    },
    "Principal": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "ProductExpressUpdateElementList": {
      "type": "object",
      "properties": {
        "productExpressUpdateElements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductExpressUpdateElement"
          }
        }
      }
    },
    "ProductExpressUpdateElement": {
      "type": "object",
      "properties": {
        "catalogId": {
          "type": "string"
        },
        "catalogVersion": {
          "type": "string"
        },
        "code": {
          "type": "string"
        }
      }
    },
    "ProductList": {
      "type": "object",
      "properties": {
        "catalog": {
          "type": "string"
        },
        "currentPage": {
          "type": "integer",
          "format": "int32"
        },
        "products": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Product"
          }
        },
        "totalPageCount": {
          "type": "integer",
          "format": "int32"
        },
        "totalProductCount": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "ProductReferenceList": {
      "type": "object",
      "properties": {
        "references": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductReference"
          }
        }
      }
    },
    "ProductReference": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "preselected": {
          "type": "boolean"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "referenceType": {
          "type": "string"
        },
        "target": {
          "$ref": "#/definitions/Product"
        }
      }
    },
    "ProductSearchPage": {
      "type": "object",
      "properties": {
        "breadcrumbs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Breadcrumb"
          }
        },
        "categoryCode": {
          "type": "string"
        },
        "currentQuery": {
          "$ref": "#/definitions/SearchState"
        },
        "facets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Facet"
          }
        },
        "freeTextSearch": {
          "type": "string"
        },
        "keywordRedirectUrl": {
          "type": "string"
        },
        "pagination": {
          "$ref": "#/definitions/Pagination"
        },
        "products": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Product"
          }
        },
        "sorts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Sort"
          }
        },
        "spellingSuggestion": {
          "$ref": "#/definitions/SpellingSuggestion"
        }
      }
    },
    "Product": {
      "type": "object",
      "properties": {
        "availableForPickup": {
          "type": "boolean"
        },
        "averageRating": {
          "type": "number",
          "format": "double"
        },
        "baseOptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BaseOption"
          }
        },
        "baseProduct": {
          "type": "string"
        },
        "categories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Category"
          }
        },
        "classifications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Classification"
          }
        },
        "code": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "futureStocks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FutureStock"
          }
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Image"
          }
        },
        "manufacturer": {
          "type": "string"
        },
        "multidimensional": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "numberOfReviews": {
          "type": "integer",
          "format": "int32"
        },
        "potentialPromotions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Promotion"
          }
        },
        "price": {
          "$ref": "#/definitions/Price"
        },
        "priceRange": {
          "$ref": "#/definitions/PriceRange"
        },
        "productReferences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductReference"
          }
        },
        "purchasable": {
          "type": "boolean"
        },
        "reviews": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Review"
          }
        },
        "stock": {
          "$ref": "#/definitions/Stock"
        },
        "summary": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "variantMatrix": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariantMatrixElement"
          }
        },
        "variantOptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariantOption"
          }
        },
        "variantType": {
          "type": "string"
        },
        "volumePrices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Price"
          }
        },
        "volumePricesFlag": {
          "type": "boolean"
        }
      }
    },
    "PromotionList": {
      "type": "object",
      "properties": {
        "promotions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Promotion"
          }
        }
      }
    },
    "PromotionOrderEntryConsumed": {
      "type": "object",
      "properties": {
        "adjustedUnitPrice": {
          "type": "number",
          "format": "double"
        },
        "code": {
          "type": "string"
        },
        "orderEntryNumber": {
          "type": "integer",
          "format": "int32"
        },
        "quantity": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PromotionRestriction": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "restrictionType": {
          "type": "string"
        }
      }
    },
    "PromotionResultList": {
      "type": "object",
      "properties": {
        "promotions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PromotionResult"
          }
        }
      }
    },
    "PromotionResult": {
      "type": "object",
      "properties": {
        "consumedEntries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PromotionOrderEntryConsumed"
          }
        },
        "description": {
          "type": "string"
        },
        "promotion": {
          "$ref": "#/definitions/Promotion"
        }
      }
    },
    "Promotion": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "couldFireMessages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "firedMessages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "productBanner": {
          "$ref": "#/definitions/Image"
        },
        "promotionGroup": {
          "type": "string"
        },
        "promotionType": {
          "type": "string"
        },
        "restrictions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PromotionRestriction"
          }
        },
        "startDate": {
          "type": "string",
          "format": "date-time"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "Region": {
      "type": "object",
      "properties": {
        "countryIso": {
          "type": "string"
        },
        "isocode": {
          "type": "string"
        },
        "isocodeShort": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ReviewList": {
      "type": "object",
      "properties": {
        "reviews": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Review"
          }
        }
      }
    },
    "Review": {
      "type": "object",
      "properties": {
        "alias": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "headline": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "principal": {
          "$ref": "#/definitions/User"
        },
        "rating": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "SaveCartResult": {
      "type": "object",
      "properties": {
        "savedCartData": {
          "$ref": "#/definitions/Cart"
        }
      }
    },
    "SearchQuery": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        }
      }
    },
    "SearchState": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/SearchQuery"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "Sort": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "selected": {
          "type": "boolean"
        }
      }
    },
    "SpecialOpeningDay": {
      "type": "object",
      "properties": {
        "closed": {
          "type": "boolean"
        },
        "closingTime": {
          "$ref": "#/definitions/Time"
        },
        "comment": {
          "type": "string"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "formattedDate": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "openingTime": {
          "$ref": "#/definitions/Time"
        }
      }
    },
    "SpellingSuggestion": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string"
        },
        "suggestion": {
          "type": "string"
        }
      }
    },
    "Stock": {
      "type": "object",
      "properties": {
        "stockLevel": {
          "type": "integer",
          "format": "int64"
        },
        "stockLevelStatus": {
          "type": "string"
        }
      }
    },
    "StoreFinderSearchPage": {
      "type": "object",
      "properties": {
        "boundEastLongitude": {
          "type": "number",
          "format": "double"
        },
        "boundNorthLatitude": {
          "type": "number",
          "format": "double"
        },
        "boundSouthLatitude": {
          "type": "number",
          "format": "double"
        },
        "boundWestLongitude": {
          "type": "number",
          "format": "double"
        },
        "locationText": {
          "type": "string"
        },
        "pagination": {
          "$ref": "#/definitions/Pagination"
        },
        "sorts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Sort"
          }
        },
        "sourceLatitude": {
          "type": "number",
          "format": "double"
        },
        "sourceLongitude": {
          "type": "number",
          "format": "double"
        },
        "stores": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PointOfService"
          }
        }
      }
    },
    "StoreFinderStockSearchPage": {
      "type": "object",
      "properties": {
        "boundEastLongitude": {
          "type": "number",
          "format": "double"
        },
        "boundNorthLatitude": {
          "type": "number",
          "format": "double"
        },
        "boundSouthLatitude": {
          "type": "number",
          "format": "double"
        },
        "boundWestLongitude": {
          "type": "number",
          "format": "double"
        },
        "locationText": {
          "type": "string"
        },
        "pagination": {
          "$ref": "#/definitions/Pagination"
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "sorts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Sort"
          }
        },
        "sourceLatitude": {
          "type": "number",
          "format": "double"
        },
        "sourceLongitude": {
          "type": "number",
          "format": "double"
        },
        "stores": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PointOfServiceStock"
          }
        }
      }
    },
    "SuggestionList": {
      "type": "object",
      "properties": {
        "suggestions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Suggestion"
          }
        }
      }
    },
    "Suggestion": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        }
      }
    },
    "Time": {
      "type": "object",
      "properties": {
        "formattedHour": {
          "type": "string"
        },
        "hour": {
          "type": "string",
          "format": "byte"
        },
        "minute": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "TitleList": {
      "type": "object",
      "properties": {
        "titles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Title"
          }
        }
      }
    },
    "Title": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "UserGroupList": {
      "type": "object",
      "properties": {
        "currentPage": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfPages": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "totalNumber": {
          "type": "integer",
          "format": "int32"
        },
        "userGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserGroup"
          }
        }
      }
    },
    "UserGroup": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Principal"
          }
        },
        "membersCount": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "subGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserGroup"
          }
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "UserSignUp": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "titleCode": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "customerId": {
          "type": "string"
        },
        "deactivationDate": {
          "type": "string",
          "format": "date-time"
        },
        "defaultAddress": {
          "$ref": "#/definitions/Address"
        },
        "displayUid": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "language": {
          "$ref": "#/definitions/Language"
        },
        "lastName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "titleCode": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "VariantCategory": {
      "type": "object",
      "properties": {
        "hasImage": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "VariantMatrixElement": {
      "type": "object",
      "properties": {
        "elements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariantMatrixElement"
          }
        },
        "isLeaf": {
          "type": "boolean"
        },
        "parentVariantCategory": {
          "$ref": "#/definitions/VariantCategory"
        },
        "variantOption": {
          "$ref": "#/definitions/VariantOption"
        },
        "variantValueCategory": {
          "$ref": "#/definitions/VariantValueCategory"
        }
      }
    },
    "VariantOptionQualifier": {
      "type": "object",
      "properties": {
        "image": {
          "$ref": "#/definitions/Image"
        },
        "name": {
          "type": "string"
        },
        "qualifier": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "VariantOption": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "priceData": {
          "$ref": "#/definitions/Price"
        },
        "stock": {
          "$ref": "#/definitions/Stock"
        },
        "url": {
          "type": "string"
        },
        "variantOptionQualifiers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariantOptionQualifier"
          }
        }
      }
    },
    "VariantValueCategory": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "sequence": {
          "type": "integer",
          "format": "int32"
        },
        "superCategories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariantCategory"
          }
        }
      }
    },
    "VoucherList": {
      "type": "object",
      "properties": {
        "vouchers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Voucher"
          }
        }
      }
    },
    "Voucher": {
      "type": "object",
      "properties": {
        "appliedValue": {
          "$ref": "#/definitions/Price"
        },
        "code": {
          "type": "string"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "description": {
          "type": "string"
        },
        "freeShipping": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "number",
          "format": "double"
        },
        "valueFormatted": {
          "type": "string"
        },
        "valueString": {
          "type": "string"
        },
        "voucherCode": {
          "type": "string"
        }
      }
    },
    "WeekdayOpeningDay": {
      "type": "object",
      "properties": {
        "closed": {
          "type": "boolean"
        },
        "closingTime": {
          "$ref": "#/definitions/Time"
        },
        "openingTime": {
          "$ref": "#/definitions/Time"
        },
        "weekDay": {
          "type": "string"
        }
      }
    },
    "error": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "Descriptive, human readable error message."
        },
        "reason": {
          "type": "string",
          "description": "Additional classification specific for each error type e.g. 'noStock'."
        },
        "subject": {
          "type": "string",
          "description": "Identifier of the related object e.g. '1'."
        },
        "subjectType": {
          "type": "string",
          "description": "Type of the object related to the error e.g. 'entry'."
        },
        "type": {
          "type": "string",
          "description": "Type of the error e.g. 'LowStockError'."
        }
      },
      "description": "Error message"
    },
    "errorList": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/error"
          }
        }
      },
      "description": "List of errors"
    },
    "pagination": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "Number of elements on this page"
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "Current page number"
        },
        "totalCount": {
          "type": "integer",
          "format": "int64",
          "description": "Total number of elements"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of pages"
        }
      },
      "description": "Pagination info"
    },
    "sort": {
      "type": "object",
      "properties": {
        "asc": {
          "type": "boolean",
          "example": false
        },
        "code": {
          "type": "string"
        }
      },
      "description": "Sort option"
    }
  }
}
