"use strict";
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Defines values for PriceType.
 * Possible values include: 'BUY', 'FROM'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: PriceType = <PriceType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var PriceType;
(function (PriceType) {
    PriceType["BUY"] = "BUY";
    PriceType["FROM"] = "FROM";
})(PriceType = exports.PriceType || (exports.PriceType = {}));
/**
 * Defines values for ImageType.
 * Possible values include: 'PRIMARY', 'GALLERY'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ImageType = <ImageType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var ImageType;
(function (ImageType) {
    ImageType["PRIMARY"] = "PRIMARY";
    ImageType["GALLERY"] = "GALLERY";
})(ImageType = exports.ImageType || (exports.ImageType = {}));
/**
 * Defines values for Fields.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields = <Fields>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields;
(function (Fields) {
    Fields["BASIC"] = "BASIC";
    Fields["DEFAULT"] = "DEFAULT";
    Fields["FULL"] = "FULL";
})(Fields = exports.Fields || (exports.Fields = {}));
/**
 * Defines values for Fields1.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields1 = <Fields1>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields1;
(function (Fields1) {
    Fields1["BASIC"] = "BASIC";
    Fields1["DEFAULT"] = "DEFAULT";
    Fields1["FULL"] = "FULL";
})(Fields1 = exports.Fields1 || (exports.Fields1 = {}));
/**
 * Defines values for Fields2.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields2 = <Fields2>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields2;
(function (Fields2) {
    Fields2["BASIC"] = "BASIC";
    Fields2["DEFAULT"] = "DEFAULT";
    Fields2["FULL"] = "FULL";
})(Fields2 = exports.Fields2 || (exports.Fields2 = {}));
/**
 * Defines values for Fields3.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields3 = <Fields3>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields3;
(function (Fields3) {
    Fields3["BASIC"] = "BASIC";
    Fields3["DEFAULT"] = "DEFAULT";
    Fields3["FULL"] = "FULL";
})(Fields3 = exports.Fields3 || (exports.Fields3 = {}));
/**
 * Defines values for Fields4.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields4 = <Fields4>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields4;
(function (Fields4) {
    Fields4["BASIC"] = "BASIC";
    Fields4["DEFAULT"] = "DEFAULT";
    Fields4["FULL"] = "FULL";
})(Fields4 = exports.Fields4 || (exports.Fields4 = {}));
/**
 * Defines values for Fields5.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields5 = <Fields5>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields5;
(function (Fields5) {
    Fields5["BASIC"] = "BASIC";
    Fields5["DEFAULT"] = "DEFAULT";
    Fields5["FULL"] = "FULL";
})(Fields5 = exports.Fields5 || (exports.Fields5 = {}));
/**
 * Defines values for Fields6.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields6 = <Fields6>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields6;
(function (Fields6) {
    Fields6["BASIC"] = "BASIC";
    Fields6["DEFAULT"] = "DEFAULT";
    Fields6["FULL"] = "FULL";
})(Fields6 = exports.Fields6 || (exports.Fields6 = {}));
/**
 * Defines values for PageType.
 * Possible values include: 'ContentPage', 'ProductPage', 'CategoryPage',
 * 'CatalogPage'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: PageType = <PageType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var PageType;
(function (PageType) {
    PageType["ContentPage"] = "ContentPage";
    PageType["ProductPage"] = "ProductPage";
    PageType["CategoryPage"] = "CategoryPage";
    PageType["CatalogPage"] = "CatalogPage";
})(PageType = exports.PageType || (exports.PageType = {}));
/**
 * Defines values for Fields7.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields7 = <Fields7>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields7;
(function (Fields7) {
    Fields7["BASIC"] = "BASIC";
    Fields7["DEFAULT"] = "DEFAULT";
    Fields7["FULL"] = "FULL";
})(Fields7 = exports.Fields7 || (exports.Fields7 = {}));
/**
 * Defines values for Fields8.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields8 = <Fields8>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields8;
(function (Fields8) {
    Fields8["BASIC"] = "BASIC";
    Fields8["DEFAULT"] = "DEFAULT";
    Fields8["FULL"] = "FULL";
})(Fields8 = exports.Fields8 || (exports.Fields8 = {}));
/**
 * Defines values for Fields9.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields9 = <Fields9>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields9;
(function (Fields9) {
    Fields9["BASIC"] = "BASIC";
    Fields9["DEFAULT"] = "DEFAULT";
    Fields9["FULL"] = "FULL";
})(Fields9 = exports.Fields9 || (exports.Fields9 = {}));
/**
 * Defines values for Fields10.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields10 = <Fields10>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields10;
(function (Fields10) {
    Fields10["BASIC"] = "BASIC";
    Fields10["DEFAULT"] = "DEFAULT";
    Fields10["FULL"] = "FULL";
})(Fields10 = exports.Fields10 || (exports.Fields10 = {}));
/**
 * Defines values for Fields11.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields11 = <Fields11>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields11;
(function (Fields11) {
    Fields11["BASIC"] = "BASIC";
    Fields11["DEFAULT"] = "DEFAULT";
    Fields11["FULL"] = "FULL";
})(Fields11 = exports.Fields11 || (exports.Fields11 = {}));
/**
 * Defines values for Fields12.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields12 = <Fields12>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields12;
(function (Fields12) {
    Fields12["BASIC"] = "BASIC";
    Fields12["DEFAULT"] = "DEFAULT";
    Fields12["FULL"] = "FULL";
})(Fields12 = exports.Fields12 || (exports.Fields12 = {}));
/**
 * Defines values for Fields13.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields13 = <Fields13>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields13;
(function (Fields13) {
    Fields13["BASIC"] = "BASIC";
    Fields13["DEFAULT"] = "DEFAULT";
    Fields13["FULL"] = "FULL";
})(Fields13 = exports.Fields13 || (exports.Fields13 = {}));
/**
 * Defines values for Fields14.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields14 = <Fields14>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields14;
(function (Fields14) {
    Fields14["BASIC"] = "BASIC";
    Fields14["DEFAULT"] = "DEFAULT";
    Fields14["FULL"] = "FULL";
})(Fields14 = exports.Fields14 || (exports.Fields14 = {}));
/**
 * Defines values for Fields15.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields15 = <Fields15>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields15;
(function (Fields15) {
    Fields15["BASIC"] = "BASIC";
    Fields15["DEFAULT"] = "DEFAULT";
    Fields15["FULL"] = "FULL";
})(Fields15 = exports.Fields15 || (exports.Fields15 = {}));
/**
 * Defines values for Fields16.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields16 = <Fields16>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields16;
(function (Fields16) {
    Fields16["BASIC"] = "BASIC";
    Fields16["DEFAULT"] = "DEFAULT";
    Fields16["FULL"] = "FULL";
})(Fields16 = exports.Fields16 || (exports.Fields16 = {}));
/**
 * Defines values for SortEnum.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortEnum = <SortEnum>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var SortEnum;
(function (SortEnum) {
    SortEnum["BASIC"] = "BASIC";
    SortEnum["DEFAULT"] = "DEFAULT";
    SortEnum["FULL"] = "FULL";
})(SortEnum = exports.SortEnum || (exports.SortEnum = {}));
/**
 * Defines values for Fields17.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields17 = <Fields17>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields17;
(function (Fields17) {
    Fields17["BASIC"] = "BASIC";
    Fields17["DEFAULT"] = "DEFAULT";
    Fields17["FULL"] = "FULL";
})(Fields17 = exports.Fields17 || (exports.Fields17 = {}));
/**
 * Defines values for Fields18.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields18 = <Fields18>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields18;
(function (Fields18) {
    Fields18["BASIC"] = "BASIC";
    Fields18["DEFAULT"] = "DEFAULT";
    Fields18["FULL"] = "FULL";
})(Fields18 = exports.Fields18 || (exports.Fields18 = {}));
/**
 * Defines values for Fields19.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields19 = <Fields19>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields19;
(function (Fields19) {
    Fields19["BASIC"] = "BASIC";
    Fields19["DEFAULT"] = "DEFAULT";
    Fields19["FULL"] = "FULL";
})(Fields19 = exports.Fields19 || (exports.Fields19 = {}));
/**
 * Defines values for Fields20.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields20 = <Fields20>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields20;
(function (Fields20) {
    Fields20["BASIC"] = "BASIC";
    Fields20["DEFAULT"] = "DEFAULT";
    Fields20["FULL"] = "FULL";
})(Fields20 = exports.Fields20 || (exports.Fields20 = {}));
/**
 * Defines values for Fields21.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields21 = <Fields21>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields21;
(function (Fields21) {
    Fields21["BASIC"] = "BASIC";
    Fields21["DEFAULT"] = "DEFAULT";
    Fields21["FULL"] = "FULL";
})(Fields21 = exports.Fields21 || (exports.Fields21 = {}));
/**
 * Defines values for Fields22.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields22 = <Fields22>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields22;
(function (Fields22) {
    Fields22["BASIC"] = "BASIC";
    Fields22["DEFAULT"] = "DEFAULT";
    Fields22["FULL"] = "FULL";
})(Fields22 = exports.Fields22 || (exports.Fields22 = {}));
/**
 * Defines values for Fields23.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields23 = <Fields23>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields23;
(function (Fields23) {
    Fields23["BASIC"] = "BASIC";
    Fields23["DEFAULT"] = "DEFAULT";
    Fields23["FULL"] = "FULL";
})(Fields23 = exports.Fields23 || (exports.Fields23 = {}));
/**
 * Defines values for Fields24.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields24 = <Fields24>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields24;
(function (Fields24) {
    Fields24["BASIC"] = "BASIC";
    Fields24["DEFAULT"] = "DEFAULT";
    Fields24["FULL"] = "FULL";
})(Fields24 = exports.Fields24 || (exports.Fields24 = {}));
/**
 * Defines values for Fields25.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields25 = <Fields25>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields25;
(function (Fields25) {
    Fields25["BASIC"] = "BASIC";
    Fields25["DEFAULT"] = "DEFAULT";
    Fields25["FULL"] = "FULL";
})(Fields25 = exports.Fields25 || (exports.Fields25 = {}));
/**
 * Defines values for Fields26.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields26 = <Fields26>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields26;
(function (Fields26) {
    Fields26["BASIC"] = "BASIC";
    Fields26["DEFAULT"] = "DEFAULT";
    Fields26["FULL"] = "FULL";
})(Fields26 = exports.Fields26 || (exports.Fields26 = {}));
/**
 * Defines values for Fields27.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields27 = <Fields27>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields27;
(function (Fields27) {
    Fields27["BASIC"] = "BASIC";
    Fields27["DEFAULT"] = "DEFAULT";
    Fields27["FULL"] = "FULL";
})(Fields27 = exports.Fields27 || (exports.Fields27 = {}));
/**
 * Defines values for Fields28.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields28 = <Fields28>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields28;
(function (Fields28) {
    Fields28["BASIC"] = "BASIC";
    Fields28["DEFAULT"] = "DEFAULT";
    Fields28["FULL"] = "FULL";
})(Fields28 = exports.Fields28 || (exports.Fields28 = {}));
/**
 * Defines values for Fields29.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields29 = <Fields29>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields29;
(function (Fields29) {
    Fields29["BASIC"] = "BASIC";
    Fields29["DEFAULT"] = "DEFAULT";
    Fields29["FULL"] = "FULL";
})(Fields29 = exports.Fields29 || (exports.Fields29 = {}));
/**
 * Defines values for Fields30.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields30 = <Fields30>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields30;
(function (Fields30) {
    Fields30["BASIC"] = "BASIC";
    Fields30["DEFAULT"] = "DEFAULT";
    Fields30["FULL"] = "FULL";
})(Fields30 = exports.Fields30 || (exports.Fields30 = {}));
/**
 * Defines values for Fields31.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields31 = <Fields31>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields31;
(function (Fields31) {
    Fields31["BASIC"] = "BASIC";
    Fields31["DEFAULT"] = "DEFAULT";
    Fields31["FULL"] = "FULL";
})(Fields31 = exports.Fields31 || (exports.Fields31 = {}));
/**
 * Defines values for Fields32.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields32 = <Fields32>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields32;
(function (Fields32) {
    Fields32["BASIC"] = "BASIC";
    Fields32["DEFAULT"] = "DEFAULT";
    Fields32["FULL"] = "FULL";
})(Fields32 = exports.Fields32 || (exports.Fields32 = {}));
/**
 * Defines values for Fields33.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields33 = <Fields33>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields33;
(function (Fields33) {
    Fields33["BASIC"] = "BASIC";
    Fields33["DEFAULT"] = "DEFAULT";
    Fields33["FULL"] = "FULL";
})(Fields33 = exports.Fields33 || (exports.Fields33 = {}));
/**
 * Defines values for Fields34.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields34 = <Fields34>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields34;
(function (Fields34) {
    Fields34["BASIC"] = "BASIC";
    Fields34["DEFAULT"] = "DEFAULT";
    Fields34["FULL"] = "FULL";
})(Fields34 = exports.Fields34 || (exports.Fields34 = {}));
/**
 * Defines values for Fields35.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields35 = <Fields35>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields35;
(function (Fields35) {
    Fields35["BASIC"] = "BASIC";
    Fields35["DEFAULT"] = "DEFAULT";
    Fields35["FULL"] = "FULL";
})(Fields35 = exports.Fields35 || (exports.Fields35 = {}));
/**
 * Defines values for Fields36.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields36 = <Fields36>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields36;
(function (Fields36) {
    Fields36["BASIC"] = "BASIC";
    Fields36["DEFAULT"] = "DEFAULT";
    Fields36["FULL"] = "FULL";
})(Fields36 = exports.Fields36 || (exports.Fields36 = {}));
/**
 * Defines values for Fields37.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields37 = <Fields37>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields37;
(function (Fields37) {
    Fields37["BASIC"] = "BASIC";
    Fields37["DEFAULT"] = "DEFAULT";
    Fields37["FULL"] = "FULL";
})(Fields37 = exports.Fields37 || (exports.Fields37 = {}));
/**
 * Defines values for Fields38.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields38 = <Fields38>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields38;
(function (Fields38) {
    Fields38["BASIC"] = "BASIC";
    Fields38["DEFAULT"] = "DEFAULT";
    Fields38["FULL"] = "FULL";
})(Fields38 = exports.Fields38 || (exports.Fields38 = {}));
/**
 * Defines values for Fields39.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields39 = <Fields39>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields39;
(function (Fields39) {
    Fields39["BASIC"] = "BASIC";
    Fields39["DEFAULT"] = "DEFAULT";
    Fields39["FULL"] = "FULL";
})(Fields39 = exports.Fields39 || (exports.Fields39 = {}));
/**
 * Defines values for Fields40.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields40 = <Fields40>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields40;
(function (Fields40) {
    Fields40["BASIC"] = "BASIC";
    Fields40["DEFAULT"] = "DEFAULT";
    Fields40["FULL"] = "FULL";
})(Fields40 = exports.Fields40 || (exports.Fields40 = {}));
/**
 * Defines values for Fields41.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields41 = <Fields41>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields41;
(function (Fields41) {
    Fields41["BASIC"] = "BASIC";
    Fields41["DEFAULT"] = "DEFAULT";
    Fields41["FULL"] = "FULL";
})(Fields41 = exports.Fields41 || (exports.Fields41 = {}));
/**
 * Defines values for Fields42.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields42 = <Fields42>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields42;
(function (Fields42) {
    Fields42["BASIC"] = "BASIC";
    Fields42["DEFAULT"] = "DEFAULT";
    Fields42["FULL"] = "FULL";
})(Fields42 = exports.Fields42 || (exports.Fields42 = {}));
/**
 * Defines values for Fields43.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields43 = <Fields43>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields43;
(function (Fields43) {
    Fields43["BASIC"] = "BASIC";
    Fields43["DEFAULT"] = "DEFAULT";
    Fields43["FULL"] = "FULL";
})(Fields43 = exports.Fields43 || (exports.Fields43 = {}));
/**
 * Defines values for Fields44.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields44 = <Fields44>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields44;
(function (Fields44) {
    Fields44["BASIC"] = "BASIC";
    Fields44["DEFAULT"] = "DEFAULT";
    Fields44["FULL"] = "FULL";
})(Fields44 = exports.Fields44 || (exports.Fields44 = {}));
/**
 * Defines values for Fields45.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields45 = <Fields45>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields45;
(function (Fields45) {
    Fields45["BASIC"] = "BASIC";
    Fields45["DEFAULT"] = "DEFAULT";
    Fields45["FULL"] = "FULL";
})(Fields45 = exports.Fields45 || (exports.Fields45 = {}));
/**
 * Defines values for Fields46.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields46 = <Fields46>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields46;
(function (Fields46) {
    Fields46["BASIC"] = "BASIC";
    Fields46["DEFAULT"] = "DEFAULT";
    Fields46["FULL"] = "FULL";
})(Fields46 = exports.Fields46 || (exports.Fields46 = {}));
/**
 * Defines values for Fields47.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields47 = <Fields47>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields47;
(function (Fields47) {
    Fields47["BASIC"] = "BASIC";
    Fields47["DEFAULT"] = "DEFAULT";
    Fields47["FULL"] = "FULL";
})(Fields47 = exports.Fields47 || (exports.Fields47 = {}));
/**
 * Defines values for Fields48.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields48 = <Fields48>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields48;
(function (Fields48) {
    Fields48["BASIC"] = "BASIC";
    Fields48["DEFAULT"] = "DEFAULT";
    Fields48["FULL"] = "FULL";
})(Fields48 = exports.Fields48 || (exports.Fields48 = {}));
/**
 * Defines values for Fields49.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields49 = <Fields49>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields49;
(function (Fields49) {
    Fields49["BASIC"] = "BASIC";
    Fields49["DEFAULT"] = "DEFAULT";
    Fields49["FULL"] = "FULL";
})(Fields49 = exports.Fields49 || (exports.Fields49 = {}));
/**
 * Defines values for Fields50.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields50 = <Fields50>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields50;
(function (Fields50) {
    Fields50["BASIC"] = "BASIC";
    Fields50["DEFAULT"] = "DEFAULT";
    Fields50["FULL"] = "FULL";
})(Fields50 = exports.Fields50 || (exports.Fields50 = {}));
/**
 * Defines values for Fields51.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields51 = <Fields51>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields51;
(function (Fields51) {
    Fields51["BASIC"] = "BASIC";
    Fields51["DEFAULT"] = "DEFAULT";
    Fields51["FULL"] = "FULL";
})(Fields51 = exports.Fields51 || (exports.Fields51 = {}));
/**
 * Defines values for Fields52.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields52 = <Fields52>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields52;
(function (Fields52) {
    Fields52["BASIC"] = "BASIC";
    Fields52["DEFAULT"] = "DEFAULT";
    Fields52["FULL"] = "FULL";
})(Fields52 = exports.Fields52 || (exports.Fields52 = {}));
/**
 * Defines values for Fields53.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields53 = <Fields53>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields53;
(function (Fields53) {
    Fields53["BASIC"] = "BASIC";
    Fields53["DEFAULT"] = "DEFAULT";
    Fields53["FULL"] = "FULL";
})(Fields53 = exports.Fields53 || (exports.Fields53 = {}));
/**
 * Defines values for Fields54.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields54 = <Fields54>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields54;
(function (Fields54) {
    Fields54["BASIC"] = "BASIC";
    Fields54["DEFAULT"] = "DEFAULT";
    Fields54["FULL"] = "FULL";
})(Fields54 = exports.Fields54 || (exports.Fields54 = {}));
/**
 * Defines values for Fields55.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields55 = <Fields55>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields55;
(function (Fields55) {
    Fields55["BASIC"] = "BASIC";
    Fields55["DEFAULT"] = "DEFAULT";
    Fields55["FULL"] = "FULL";
})(Fields55 = exports.Fields55 || (exports.Fields55 = {}));
/**
 * Defines values for Fields56.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields56 = <Fields56>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields56;
(function (Fields56) {
    Fields56["BASIC"] = "BASIC";
    Fields56["DEFAULT"] = "DEFAULT";
    Fields56["FULL"] = "FULL";
})(Fields56 = exports.Fields56 || (exports.Fields56 = {}));
/**
 * Defines values for Fields57.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields57 = <Fields57>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields57;
(function (Fields57) {
    Fields57["BASIC"] = "BASIC";
    Fields57["DEFAULT"] = "DEFAULT";
    Fields57["FULL"] = "FULL";
})(Fields57 = exports.Fields57 || (exports.Fields57 = {}));
/**
 * Defines values for Fields58.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields58 = <Fields58>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields58;
(function (Fields58) {
    Fields58["BASIC"] = "BASIC";
    Fields58["DEFAULT"] = "DEFAULT";
    Fields58["FULL"] = "FULL";
})(Fields58 = exports.Fields58 || (exports.Fields58 = {}));
/**
 * Defines values for Fields59.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields59 = <Fields59>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields59;
(function (Fields59) {
    Fields59["BASIC"] = "BASIC";
    Fields59["DEFAULT"] = "DEFAULT";
    Fields59["FULL"] = "FULL";
})(Fields59 = exports.Fields59 || (exports.Fields59 = {}));
/**
 * Defines values for Fields60.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields60 = <Fields60>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields60;
(function (Fields60) {
    Fields60["BASIC"] = "BASIC";
    Fields60["DEFAULT"] = "DEFAULT";
    Fields60["FULL"] = "FULL";
})(Fields60 = exports.Fields60 || (exports.Fields60 = {}));
/**
 * Defines values for Fields61.
 * Possible values include: 'BASIC', 'DEFAULT', 'FULL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Fields61 = <Fields61>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Fields61;
(function (Fields61) {
    Fields61["BASIC"] = "BASIC";
    Fields61["DEFAULT"] = "DEFAULT";
    Fields61["FULL"] = "FULL";
})(Fields61 = exports.Fields61 || (exports.Fields61 = {}));
/**
 * Defines values for Type.
 * Possible values include: 'all', 'product', 'order'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Type = <Type>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Type;
(function (Type) {
    Type["All"] = "all";
    Type["Product"] = "product";
    Type["Order"] = "order";
})(Type = exports.Type || (exports.Type = {}));
//# sourceMappingURL=index.js.map