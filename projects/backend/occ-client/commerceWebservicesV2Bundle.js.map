{"version":3,"sources":["webpack:///webpack/bootstrap 8b830d37aa4a3d361841","webpack:///external \"msRest\"","webpack:///./lib/commerceWebservicesV2.ts","webpack:///./node_modules/tslib/tslib.es6.js","webpack:///./lib/models/index.ts","webpack:///./lib/models/mappers.ts","webpack:///./lib/commerceWebservicesV2Context.ts"],"names":[],"mappings":"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","file":"commerceWebservicesV2Bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 8b830d37aa4a3d361841","module.exports = msRest;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"msRest\"\n// module id = 0\n// module chunks = 0","/*\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"ms-rest-js\";\nimport * as Models from \"./models\";\nimport * as Mappers from \"./models/mappers\";\nimport { CommerceWebservicesV2Context } from \"./commerceWebservicesV2Context\";\nconst WebResource = msRest.WebResource;\n\nclass CommerceWebservicesV2 extends CommerceWebservicesV2Context {\n  serializer = new msRest.Serializer(Mappers);\n\n  /**\n   * @class\n   * Initializes a new instance of the CommerceWebservicesV2 class.\n   * @constructor\n   *\n   * @param {string} [baseUri] - The base URI of the service.\n   *\n   * @param {object} [options] - The parameter options\n   *\n   * @param {Array} [options.filters] - Filters to be added to the request pipeline\n   *\n   * @param {object} [options.requestOptions] - The request options. Detailed info can be found at\n   * {@link https://github.github.io/fetch/#Request Options doc}\n   *\n   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy\n   *\n   */\n  constructor(baseUri?: string, options?: msRest.ServiceClientOptions) {\n    super(baseUri, options);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get a list of supported payment card types.\n   *\n   * Lists supported payment card types.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetCardTypesOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getCardTypesWithHttpOperationResponse(baseSiteId: string, options?: Models.CommerceWebservicesV2GetCardTypesOptionalParams): Promise<msRest.HttpOperationResponse<Models.CardTypeList>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          fields,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/cardtypes\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.CardTypeList\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.CardTypeList;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get a list of catalogs\n   *\n   * Returns all catalogs with versions defined for the base store.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetCatalogsOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getCatalogsWithHttpOperationResponse(baseSiteId: string, options?: Models.CommerceWebservicesV2GetCatalogsOptionalParams): Promise<msRest.HttpOperationResponse<Models.CatalogList>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          fields,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/catalogs\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.CatalogList\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.CatalogList;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get a catalog\n   *\n   * Returns information about a catalog based on its ID, along with the versions defined for the\n   * current base store.\n   *\n   * @param {string} catalogId Catalog identifier\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetCatalogOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getCatalogWithHttpOperationResponse(catalogId: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetCatalogOptionalParams): Promise<msRest.HttpOperationResponse<Models.Catalog>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          catalogId,\n          fields,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/catalogs/{catalogId}\",\n          urlParameters: [\n            {\n              parameterPath: \"catalogId\",\n              mapper: {\n                required: true,\n                serializedName: \"catalogId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.Catalog\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.Catalog;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get information about catalog version\n   *\n   * Returns information about the catalog version that exists for the current base store.\n   *\n   * @param {string} catalogId Catalog identifier\n   *\n   * @param {string} catalogVersionId Catalog version identifier\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetCatalogVersionOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getCatalogVersionWithHttpOperationResponse(catalogId: string, catalogVersionId: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetCatalogVersionOptionalParams): Promise<msRest.HttpOperationResponse<Models.CatalogVersion>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          catalogId,\n          catalogVersionId,\n          fields,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/catalogs/{catalogId}/{catalogVersionId}\",\n          urlParameters: [\n            {\n              parameterPath: \"catalogId\",\n              mapper: {\n                required: true,\n                serializedName: \"catalogId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"catalogVersionId\",\n              mapper: {\n                required: true,\n                serializedName: \"catalogVersionId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.CatalogVersion\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.CatalogVersion;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get information about catagory in a catalog version\n   *\n   * Returns information about a specified category that exists in a catalog version available for\n   * the current base store.\n   *\n   * @param {string} catalogId Catalog identifier\n   *\n   * @param {string} catalogVersionId Catalog version identifier\n   *\n   * @param {string} categoryId Category identifier\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetCategoriesOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getCategoriesWithHttpOperationResponse(catalogId: string, catalogVersionId: string, categoryId: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetCategoriesOptionalParams): Promise<msRest.HttpOperationResponse<Models.CategoryHierarchy>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          catalogId,\n          catalogVersionId,\n          categoryId,\n          fields,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/catalogs/{catalogId}/{catalogVersionId}/categories/{categoryId}\",\n          urlParameters: [\n            {\n              parameterPath: \"catalogId\",\n              mapper: {\n                required: true,\n                serializedName: \"catalogId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"catalogVersionId\",\n              mapper: {\n                required: true,\n                serializedName: \"catalogVersionId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"categoryId\",\n              mapper: {\n                required: true,\n                serializedName: \"categoryId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.CategoryHierarchy\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.CategoryHierarchy;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get components' data by id given in body\n   *\n   * Given a list of component identifiers in body, return cms component data.\n   *\n   * @param {ComponentIDList} componentIdList List of Component identifiers\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetComponentByIdListOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getComponentByIdListWithHttpOperationResponse(componentIdList: Models.ComponentIDList, baseSiteId: string, options?: Models.CommerceWebservicesV2GetComponentByIdListOptionalParams): Promise<msRest.HttpOperationResponse<Models.ListAdaptedComponents>> {\n    let catalogCode = (options && options.catalogCode !== undefined) ? options.catalogCode : undefined;\n    let productCode = (options && options.productCode !== undefined) ? options.productCode : undefined;\n    let categoryCode = (options && options.categoryCode !== undefined) ? options.categoryCode : undefined;\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n    let currentPage = (options && options.currentPage !== undefined) ? options.currentPage : 0;\n    let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : 10;\n    let sort = (options && options.sort !== undefined) ? options.sort : undefined;\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          componentIdList,\n          catalogCode,\n          productCode,\n          categoryCode,\n          fields,\n          currentPage,\n          pageSize,\n          sort,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"POST\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/cms/components\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"catalogCode\",\n              mapper: {\n                serializedName: \"catalogCode\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"productCode\",\n              mapper: {\n                serializedName: \"productCode\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"categoryCode\",\n              mapper: {\n                serializedName: \"categoryCode\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"currentPage\",\n              mapper: {\n                serializedName: \"currentPage\",\n                defaultValue: 0,\n                type: {\n                  name: \"Number\"\n                }\n              }\n            },\n            {\n              parameterPath: \"pageSize\",\n              mapper: {\n                serializedName: \"pageSize\",\n                defaultValue: 10,\n                type: {\n                  name: \"Number\"\n                }\n              }\n            },\n            {\n              parameterPath: \"sort\",\n              mapper: {\n                serializedName: \"sort\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          requestBody: {\n            parameterPath: \"componentIdList\",\n            mapper: {\n              ...Mappers.ComponentIDList,\n              required: true\n            }\n          },\n          contentType: \"application/json; charset=utf-8\",\n          responses: {\n            200: {\n              bodyMapper: Mappers.ListAdaptedComponents\n            },\n            201: {},\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.ListAdaptedComponents;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get component data\n   *\n   * Given a component identifier, return cms component data.\n   *\n   * @param {string} componentId Component identifier\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetComponentByIdOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getComponentByIdWithHttpOperationResponse(componentId: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetComponentByIdOptionalParams): Promise<msRest.HttpOperationResponse<any>> {\n    let catalogCode = (options && options.catalogCode !== undefined) ? options.catalogCode : undefined;\n    let productCode = (options && options.productCode !== undefined) ? options.productCode : undefined;\n    let categoryCode = (options && options.categoryCode !== undefined) ? options.categoryCode : undefined;\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          componentId,\n          catalogCode,\n          productCode,\n          categoryCode,\n          fields,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/cms/components/{componentId}\",\n          urlParameters: [\n            {\n              parameterPath: \"componentId\",\n              mapper: {\n                required: true,\n                serializedName: \"componentId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"catalogCode\",\n              mapper: {\n                serializedName: \"catalogCode\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"productCode\",\n              mapper: {\n                serializedName: \"productCode\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"categoryCode\",\n              mapper: {\n                serializedName: \"categoryCode\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: {\n                serializedName: \"parsedResponse\",\n                type: {\n                  name: \"Object\"\n                }\n              }\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = {\n              serializedName: \"parsedResponse\",\n              type: {\n                name: \"Object\"\n              }\n            };\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get page data with list of cms content slots\n   *\n   * Given a page identifier, return the page data with a list of cms content slots, each of which\n   * contains a list of cms component data.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetPageDataOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getPageDataWithHttpOperationResponse(baseSiteId: string, options?: Models.CommerceWebservicesV2GetPageDataOptionalParams): Promise<msRest.HttpOperationResponse<Models.CMSPage>> {\n    let pageType = (options && options.pageType !== undefined) ? options.pageType : 'ContentPage';\n    let pageLabelOrId = (options && options.pageLabelOrId !== undefined) ? options.pageLabelOrId : undefined;\n    let code = (options && options.code !== undefined) ? options.code : undefined;\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          pageType,\n          pageLabelOrId,\n          code,\n          fields,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/cms/pages\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"pageType\",\n              mapper: {\n                serializedName: \"pageType\",\n                defaultValue: 'ContentPage',\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"pageLabelOrId\",\n              mapper: {\n                serializedName: \"pageLabelOrId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"code\",\n              mapper: {\n                serializedName: \"code\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.CMSPage\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.CMSPage;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get a list of available currencies.\n   *\n   * Lists all available currencies (all usable currencies for the current store). If the list of\n   * currencies for a base store is empty, a list of all currencies available in the system is\n   * returned.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetCurrenciesOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getCurrenciesWithHttpOperationResponse(baseSiteId: string, options?: Models.CommerceWebservicesV2GetCurrenciesOptionalParams): Promise<msRest.HttpOperationResponse<Models.CurrencyList>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          fields,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/currencies\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.CurrencyList\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.CurrencyList;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get all subgroups of a customergroup.\n   *\n   * Returns all customer groups that are direct subgroups of a customergroup.\n   *\n   * To try out the methods of the Customer Groups controller, you must authorize a user who belongs\n   * to the “customermanagergroup”.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetAllCustomerGroupsOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getAllCustomerGroupsWithHttpOperationResponse(baseSiteId: string, options?: Models.CommerceWebservicesV2GetAllCustomerGroupsOptionalParams): Promise<msRest.HttpOperationResponse<Models.UserGroupList>> {\n    let currentPage = (options && options.currentPage !== undefined) ? options.currentPage : 0;\n    let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : 20;\n    let fields = (options && options.fields !== undefined) ? options.fields : 'BASIC';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          currentPage,\n          pageSize,\n          fields,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/customergroups\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"currentPage\",\n              mapper: {\n                serializedName: \"currentPage\",\n                defaultValue: 0,\n                type: {\n                  name: \"Number\"\n                }\n              }\n            },\n            {\n              parameterPath: \"pageSize\",\n              mapper: {\n                serializedName: \"pageSize\",\n                defaultValue: 20,\n                type: {\n                  name: \"Number\"\n                }\n              }\n            },\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'BASIC',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.UserGroupList\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.UserGroupList;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Creates a new customer group.\n   *\n   * Creates a new customer group that is a direct subgroup of a customergroup.\n   *\n   * To try out the methods of the Customer Groups controller, you must authorize a user who belongs\n   * to the “customermanagergroup”.\n   *\n   * @param {UserGroup} userGroup User group object with id and name.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async createNewCustomerGroupPrimWithHttpOperationResponse(userGroup: Models.UserGroup, baseSiteId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          userGroup,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"POST\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/customergroups\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          requestBody: {\n            parameterPath: \"userGroup\",\n            mapper: {\n              ...Mappers.UserGroup,\n              required: true\n            }\n          },\n          contentType: \"application/json; charset=utf-8\",\n          responses: {\n            201: {},\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get a specific customer group.\n   *\n   * Returns a customer group with a specific groupId.\n   *\n   * To try out the methods of the Customer Groups controller, you must authorize a user who belongs\n   * to the “customermanagergroup”.\n   *\n   * @param {string} groupId Group identifier.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetCustomerGroupOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getCustomerGroupWithHttpOperationResponse(groupId: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetCustomerGroupOptionalParams): Promise<msRest.HttpOperationResponse<Models.UserGroup>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'BASIC';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          groupId,\n          fields,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/customergroups/{groupId}\",\n          urlParameters: [\n            {\n              parameterPath: \"groupId\",\n              mapper: {\n                required: true,\n                serializedName: \"groupId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'BASIC',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.UserGroup\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.UserGroup;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Sets members for a user group.\n   *\n   * Sets members for a user group. The list of existing members is overwritten with a new one.\n   *\n   * To try out the methods of the Customer Groups controller, you must authorize a user who belongs\n   * to the “customermanagergroup”.\n   *\n   * @param {string} groupId Group identifier.\n   *\n   * @param {MemberList} members List of users to set for customer group.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async setUserListForCustomerGroupPrimWithHttpOperationResponse(groupId: string, members: Models.MemberList, baseSiteId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          groupId,\n          members,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"PUT\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/customergroups/{groupId}/members\",\n          urlParameters: [\n            {\n              parameterPath: \"groupId\",\n              mapper: {\n                required: true,\n                serializedName: \"groupId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          requestBody: {\n            parameterPath: \"members\",\n            mapper: {\n              ...Mappers.MemberList,\n              required: true\n            }\n          },\n          contentType: \"application/json; charset=utf-8\",\n          responses: {\n            200: {},\n            201: {},\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Assigns user(s) to a customer group.\n   *\n   * Assigns user(s) to a customer group.\n   *\n   * To try out the methods of the Customer Groups controller, you must authorize a user who belongs\n   * to the “customermanagergroup”.\n   *\n   * @param {string} groupId Group identifier.\n   *\n   * @param {MemberList} members List of users to assign to customer group.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async assignUserToCustomerGroupPrimWithHttpOperationResponse(groupId: string, members: Models.MemberList, baseSiteId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          groupId,\n          members,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"PATCH\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/customergroups/{groupId}/members\",\n          urlParameters: [\n            {\n              parameterPath: \"groupId\",\n              mapper: {\n                required: true,\n                serializedName: \"groupId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          requestBody: {\n            parameterPath: \"members\",\n            mapper: {\n              ...Mappers.MemberList,\n              required: true\n            }\n          },\n          contentType: \"application/json; charset=utf-8\",\n          responses: {\n            200: {},\n            204: {},\n            401: {},\n            403: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Delete a user from a customer group.\n   *\n   * Removes user from a customer group.\n   *\n   * To try out the methods of the Customer Groups controller, you must authorize a user who belongs\n   * to the “customermanagergroup”.\n   *\n   * @param {string} groupId Group identifier.\n   *\n   * @param {string} userId User identifier.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async removeUsersFromCustomerGroupWithHttpOperationResponse(groupId: string, userId: string, baseSiteId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          groupId,\n          userId,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"DELETE\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/customergroups/{groupId}/members/{userId}\",\n          urlParameters: [\n            {\n              parameterPath: \"groupId\",\n              mapper: {\n                required: true,\n                serializedName: \"groupId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {},\n            204: {},\n            401: {},\n            403: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get a list of supported countries.\n   *\n   * Lists all supported delivery countries for the current store. The list is sorted alphabetically.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetDeliveryCountriesOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getDeliveryCountriesWithHttpOperationResponse(baseSiteId: string, options?: Models.CommerceWebservicesV2GetDeliveryCountriesOptionalParams): Promise<msRest.HttpOperationResponse<Models.CountryList>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          fields,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/deliverycountries\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.CountryList\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.CountryList;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get a list of product exports.\n   *\n   * Used for product export. Depending on the timestamp parameter, it can return all products or\n   * only products modified after the given time.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2ExportProductsOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async exportProductsWithHttpOperationResponse(baseSiteId: string, options?: Models.CommerceWebservicesV2ExportProductsOptionalParams): Promise<msRest.HttpOperationResponse<Models.ProductList>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n    let currentPage = (options && options.currentPage !== undefined) ? options.currentPage : 0;\n    let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : 20;\n    let catalog = (options && options.catalog !== undefined) ? options.catalog : undefined;\n    let version = (options && options.version !== undefined) ? options.version : undefined;\n    let timestamp = (options && options.timestamp !== undefined) ? options.timestamp : undefined;\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          fields,\n          currentPage,\n          pageSize,\n          catalog,\n          version,\n          timestamp,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/export/products\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"currentPage\",\n              mapper: {\n                serializedName: \"currentPage\",\n                defaultValue: 0,\n                type: {\n                  name: \"Number\"\n                }\n              }\n            },\n            {\n              parameterPath: \"pageSize\",\n              mapper: {\n                serializedName: \"pageSize\",\n                defaultValue: 20,\n                type: {\n                  name: \"Number\"\n                }\n              }\n            },\n            {\n              parameterPath: \"catalog\",\n              mapper: {\n                serializedName: \"catalog\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"version\",\n              mapper: {\n                serializedName: \"version\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"timestamp\",\n              mapper: {\n                serializedName: \"timestamp\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.ProductList\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.ProductList;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get a list of orders with status updates\n   *\n   * Returns the orders that have changed status. Returns only the elements from the current baseSite\n   * that have been updated after the provided timestamp.\n   *\n   * @param {string} timestamp Only items newer than the given parameter are retrieved. This\n   * parameter should be in ISO-8601 format (for example, 2018-01-09T16:28:45+0000).\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2OrderStatusFeedOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async orderStatusFeedWithHttpOperationResponse(timestamp: string, baseSiteId: string, options?: Models.CommerceWebservicesV2OrderStatusFeedOptionalParams): Promise<msRest.HttpOperationResponse<Models.OrderStatusUpdateElementList>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          timestamp,\n          baseSiteId,\n          fields\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/feeds/orders/statusfeed\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"timestamp\",\n              mapper: {\n                required: true,\n                serializedName: \"timestamp\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.OrderStatusUpdateElementList\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.OrderStatusUpdateElementList;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Generates a token to restore a customer's forgotten password.\n   *\n   * Generates a token to restore a customer's forgotten password.\n   *\n   * @param {string} userId Customer's user id. Customer user id is case insensitive.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async restorePasswordWithHttpOperationResponse(userId: string, baseSiteId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          userId,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"POST\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/forgottenpasswordtokens\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            201: {},\n            202: {},\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get a list of available languages.\n   *\n   * Lists all available languages (all languages used for a particular store). If the list of\n   * languages for a base store is empty, a list of all languages available in the system will be\n   * returned.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetLanguagesOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getLanguagesWithHttpOperationResponse(baseSiteId: string, options?: Models.CommerceWebservicesV2GetLanguagesOptionalParams): Promise<msRest.HttpOperationResponse<Models.LanguageList>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          fields,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/languages\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.LanguageList\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.LanguageList;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get a order\n   *\n   * Returns details of a specific order based on the order GUID (Globally Unique Identifier) or the\n   * order CODE. The response contains detailed order information.\n   *\n   * @param {string} code Order GUID (Globally Unique Identifier) or order CODE\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetOrderOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getOrderWithHttpOperationResponse(code: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetOrderOptionalParams): Promise<msRest.HttpOperationResponse<Models.Order>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          code,\n          fields,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/orders/{code}\",\n          urlParameters: [\n            {\n              parameterPath: \"code\",\n              mapper: {\n                required: true,\n                serializedName: \"code\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.Order\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.Order;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get products added to the express update feed\n   *\n   * Returns products added to the express update feed. Returns only elements updated after the\n   * provided timestamp. The queue is cleared using a defined cronjob.\n   *\n   * @param {string} timestamp Only items newer than the given parameter are retrieved from the\n   * queue. This parameter should be in ISO-8601 format.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2ExpressUpdateOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async expressUpdateWithHttpOperationResponse(timestamp: string, baseSiteId: string, options?: Models.CommerceWebservicesV2ExpressUpdateOptionalParams): Promise<msRest.HttpOperationResponse<Models.ProductExpressUpdateElementList>> {\n    let catalog = (options && options.catalog !== undefined) ? options.catalog : undefined;\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          timestamp,\n          catalog,\n          fields,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/products/expressupdate\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"timestamp\",\n              mapper: {\n                required: true,\n                serializedName: \"timestamp\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"catalog\",\n              mapper: {\n                serializedName: \"catalog\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.ProductExpressUpdateElementList\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.ProductExpressUpdateElementList;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get a list of products and additional data\n   *\n   * Returns a list of products and additional data, such as available facets, available sorting, and\n   * pagination options. It can also include spelling suggestions. To make spelling suggestions work,\n   * you need to make sure that \"enableSpellCheck\" on the SearchQuery is set to \"true\" (by default,\n   * it should already be set to \"true\"). You also need to have indexed properties configured to be\n   * used for spellchecking.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2SearchProductsOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async searchProductsWithHttpOperationResponse(baseSiteId: string, options?: Models.CommerceWebservicesV2SearchProductsOptionalParams): Promise<msRest.HttpOperationResponse<Models.ProductSearchPage>> {\n    let query = (options && options.query !== undefined) ? options.query : undefined;\n    let currentPage = (options && options.currentPage !== undefined) ? options.currentPage : 0;\n    let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : 20;\n    let sort = (options && options.sort !== undefined) ? options.sort : undefined;\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n    let searchQueryContext = (options && options.searchQueryContext !== undefined) ? options.searchQueryContext : undefined;\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          query,\n          currentPage,\n          pageSize,\n          sort,\n          fields,\n          searchQueryContext,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/products/search\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"query\",\n              mapper: {\n                serializedName: \"query\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"currentPage\",\n              mapper: {\n                serializedName: \"currentPage\",\n                defaultValue: 0,\n                type: {\n                  name: \"Number\"\n                }\n              }\n            },\n            {\n              parameterPath: \"pageSize\",\n              mapper: {\n                serializedName: \"pageSize\",\n                defaultValue: 20,\n                type: {\n                  name: \"Number\"\n                }\n              }\n            },\n            {\n              parameterPath: \"sort\",\n              mapper: {\n                serializedName: \"sort\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"searchQueryContext\",\n              mapper: {\n                serializedName: \"searchQueryContext\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.ProductSearchPage\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.ProductSearchPage;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get a header with total number of products\n   *\n   * In the response header, the \"x-total-count\" indicates the total number of products satisfying a\n   * query.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2CountSearchProductsOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async countSearchProductsWithHttpOperationResponse(baseSiteId: string, options?: Models.CommerceWebservicesV2CountSearchProductsOptionalParams): Promise<msRest.HttpOperationResponse<void>> {\n    let query = (options && options.query !== undefined) ? options.query : undefined;\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          query,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"HEAD\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/products/search\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"query\",\n              mapper: {\n                serializedName: \"query\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {},\n            204: {},\n            401: {},\n            403: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get a list of available suggestions\n   *\n   * Returns a list of all available suggestions related to a given term and limits the results to a\n   * specific value of the max parameter.\n   *\n   * @param {string} term Specified term\n   *\n   * @param {number} max Specifies the limit of results.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetSuggestionsOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getSuggestionsWithHttpOperationResponse(term: string, max: number, baseSiteId: string, options?: Models.CommerceWebservicesV2GetSuggestionsOptionalParams): Promise<msRest.HttpOperationResponse<Models.SuggestionList>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          term,\n          max,\n          fields,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/products/suggestions\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"term\",\n              mapper: {\n                required: true,\n                serializedName: \"term\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"max\",\n              mapper: {\n                required: true,\n                serializedName: \"max\",\n                defaultValue: 10,\n                type: {\n                  name: \"Number\"\n                }\n              }\n            },\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.SuggestionList\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.SuggestionList;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get product details\n   *\n   * Returns details of a single product according to a product code.\n   *\n   * @param {string} productCode Product identifier\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetProductByCodeOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getProductByCodeWithHttpOperationResponse(productCode: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetProductByCodeOptionalParams): Promise<msRest.HttpOperationResponse<Models.Product>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          productCode,\n          fields,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/products/{productCode}\",\n          urlParameters: [\n            {\n              parameterPath: \"productCode\",\n              mapper: {\n                required: true,\n                serializedName: \"productCode\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.Product\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.Product;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get a product reference\n   *\n   * Returns references for a product with a given product code. Reference type specifies which\n   * references to return.\n   *\n   * @param {string} productCode Product identifier\n   *\n   * @param {string} referenceType Reference type according to enum ProductReferenceTypeEnum\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2ExportProductReferencesOptionalParams} [options] Optional\n   * Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async exportProductReferencesWithHttpOperationResponse(productCode: string, referenceType: string, baseSiteId: string, options?: Models.CommerceWebservicesV2ExportProductReferencesOptionalParams): Promise<msRest.HttpOperationResponse<Models.ProductReferenceList>> {\n    let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : 2147483647;\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          productCode,\n          pageSize,\n          referenceType,\n          fields,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/products/{productCode}/references\",\n          urlParameters: [\n            {\n              parameterPath: \"productCode\",\n              mapper: {\n                required: true,\n                serializedName: \"productCode\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"pageSize\",\n              mapper: {\n                serializedName: \"pageSize\",\n                defaultValue: 2147483647,\n                type: {\n                  name: \"Number\"\n                }\n              }\n            },\n            {\n              parameterPath: \"referenceType\",\n              mapper: {\n                required: true,\n                serializedName: \"referenceType\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.ProductReferenceList\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.ProductReferenceList;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get reviews for a product\n   *\n   * Returns the reviews for a product with a given product code.\n   *\n   * @param {string} productCode Product identifier\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetProductReviewsOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getProductReviewsWithHttpOperationResponse(productCode: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetProductReviewsOptionalParams): Promise<msRest.HttpOperationResponse<Models.ReviewList>> {\n    let maxCount = (options && options.maxCount !== undefined) ? options.maxCount : undefined;\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          productCode,\n          maxCount,\n          fields,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/products/{productCode}/reviews\",\n          urlParameters: [\n            {\n              parameterPath: \"productCode\",\n              mapper: {\n                required: true,\n                serializedName: \"productCode\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"maxCount\",\n              mapper: {\n                serializedName: \"maxCount\",\n                type: {\n                  name: \"Number\"\n                }\n              }\n            },\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.ReviewList\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.ReviewList;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Creates a new customer review as an anonymous user\n   *\n   * Creates a new customer review as an anonymous user.\n   *\n   * @param {string} productCode Product identifier\n   *\n   * @param {Review} review Object contains review details like : rating, alias, headline, comment\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2CreateReviewPrimOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async createReviewPrimWithHttpOperationResponse(productCode: string, review: Models.Review, baseSiteId: string, options?: Models.CommerceWebservicesV2CreateReviewPrimOptionalParams): Promise<msRest.HttpOperationResponse<Models.Review>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          productCode,\n          review,\n          fields,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"POST\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/products/{productCode}/reviews\",\n          urlParameters: [\n            {\n              parameterPath: \"productCode\",\n              mapper: {\n                required: true,\n                serializedName: \"productCode\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          requestBody: {\n            parameterPath: \"review\",\n            mapper: {\n              ...Mappers.Review,\n              required: true\n            }\n          },\n          contentType: \"application/json; charset=utf-8\",\n          responses: {\n            201: {\n              bodyMapper: Mappers.Review\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 201) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.Review;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get a product's stock level\n   *\n   * Returns a product's stock levels sorted by distance from the specified location, which is\n   * provided using the free-text \"location\" parameter, or by using the longitude and latitude\n   * parameters. The following two sets of parameters are available: location (required), currentPage\n   * (optional), pageSize (optional); or longitude (required), latitude (required), currentPage\n   * (optional), pageSize(optional).\n   *\n   * @param {string} productCode Product identifier\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2SearchProductStockByLocationOptionalParams} [options] Optional\n   * Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async searchProductStockByLocationWithHttpOperationResponse(productCode: string, baseSiteId: string, options?: Models.CommerceWebservicesV2SearchProductStockByLocationOptionalParams): Promise<msRest.HttpOperationResponse<Models.StoreFinderStockSearchPage>> {\n    let location = (options && options.location !== undefined) ? options.location : undefined;\n    let latitude = (options && options.latitude !== undefined) ? options.latitude : undefined;\n    let longitude = (options && options.longitude !== undefined) ? options.longitude : undefined;\n    let currentPage = (options && options.currentPage !== undefined) ? options.currentPage : 0;\n    let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : 20;\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          productCode,\n          location,\n          latitude,\n          longitude,\n          currentPage,\n          pageSize,\n          fields,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/products/{productCode}/stock\",\n          urlParameters: [\n            {\n              parameterPath: \"productCode\",\n              mapper: {\n                required: true,\n                serializedName: \"productCode\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"location\",\n              mapper: {\n                serializedName: \"location\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"latitude\",\n              mapper: {\n                serializedName: \"latitude\",\n                type: {\n                  name: \"Number\"\n                }\n              }\n            },\n            {\n              parameterPath: \"longitude\",\n              mapper: {\n                serializedName: \"longitude\",\n                type: {\n                  name: \"Number\"\n                }\n              }\n            },\n            {\n              parameterPath: \"currentPage\",\n              mapper: {\n                serializedName: \"currentPage\",\n                defaultValue: 0,\n                type: {\n                  name: \"Number\"\n                }\n              }\n            },\n            {\n              parameterPath: \"pageSize\",\n              mapper: {\n                serializedName: \"pageSize\",\n                defaultValue: 20,\n                type: {\n                  name: \"Number\"\n                }\n              }\n            },\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.StoreFinderStockSearchPage\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.StoreFinderStockSearchPage;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get header with a total number of product's stock levels\n   *\n   * In the response header, the \"x-total-count\" indicates the total number of a product's stock\n   * levels. The following two sets of parameters are available: location (required); or longitude\n   * (required), and latitude (required).\n   *\n   * @param {string} productCode Product identifier\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2CountSearchProductStockByLocationOptionalParams} [options] Optional\n   * Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async countSearchProductStockByLocationWithHttpOperationResponse(productCode: string, baseSiteId: string, options?: Models.CommerceWebservicesV2CountSearchProductStockByLocationOptionalParams): Promise<msRest.HttpOperationResponse<void>> {\n    let location = (options && options.location !== undefined) ? options.location : undefined;\n    let latitude = (options && options.latitude !== undefined) ? options.latitude : undefined;\n    let longitude = (options && options.longitude !== undefined) ? options.longitude : undefined;\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          productCode,\n          location,\n          latitude,\n          longitude,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"HEAD\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/products/{productCode}/stock\",\n          urlParameters: [\n            {\n              parameterPath: \"productCode\",\n              mapper: {\n                required: true,\n                serializedName: \"productCode\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"location\",\n              mapper: {\n                serializedName: \"location\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"latitude\",\n              mapper: {\n                serializedName: \"latitude\",\n                type: {\n                  name: \"Number\"\n                }\n              }\n            },\n            {\n              parameterPath: \"longitude\",\n              mapper: {\n                serializedName: \"longitude\",\n                type: {\n                  name: \"Number\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {},\n            204: {},\n            401: {},\n            403: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get a product's stock level for a store\n   *\n   * Returns a product's stock level for a particular store (in other words, for a particular point\n   * of sale).\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} productCode Product identifier\n   *\n   * @param {string} storeName Store identifier\n   *\n   * @param {CommerceWebservicesV2GetStockDataOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getStockDataWithHttpOperationResponse(baseSiteId: string, productCode: string, storeName: string, options?: Models.CommerceWebservicesV2GetStockDataOptionalParams): Promise<msRest.HttpOperationResponse<Models.Stock>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          baseSiteId,\n          productCode,\n          storeName,\n          fields\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/products/{productCode}/stock/{storeName}\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"productCode\",\n              mapper: {\n                required: true,\n                serializedName: \"productCode\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"storeName\",\n              mapper: {\n                required: true,\n                serializedName: \"storeName\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.Stock\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.Stock;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get a list of promotions\n   *\n   * Returns promotions defined for a current base site. Requests pertaining to promotions have been\n   * developed for the previous version of promotions and vouchers and therefore some of them are\n   * currently not compatible with the new promotion engine.\n   *\n   * @param {Type} type Defines what type of promotions should be returned. Values supported for that\n   * parameter are: <ul><li>all: All available promotions are returned</li><li>product: Only product\n   * promotions are returned</li><li>order: Only order promotions are returned</li></ul>. Possible\n   * values include: 'all', 'product', 'order'\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetPromotionsPrimOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getPromotionsPrimWithHttpOperationResponse(type: Models.Type, baseSiteId: string, options?: Models.CommerceWebservicesV2GetPromotionsPrimOptionalParams): Promise<msRest.HttpOperationResponse<Models.PromotionList>> {\n    let promotionGroup = (options && options.promotionGroup !== undefined) ? options.promotionGroup : undefined;\n    let fields = (options && options.fields !== undefined) ? options.fields : 'BASIC';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          type,\n          promotionGroup,\n          fields,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/promotions\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"type\",\n              mapper: {\n                required: true,\n                serializedName: \"type\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"promotionGroup\",\n              mapper: {\n                serializedName: \"promotionGroup\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'BASIC',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.PromotionList\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.PromotionList;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get a promotion based on code\n   *\n   * Returns details of a single promotion specified by a promotion code. Requests pertaining to\n   * promotions have been developed for the previous version of promotions and vouchers and therefore\n   * some of them are currently not compatible with the new promotion engine.\n   *\n   * @param {string} code Promotion identifier (code)\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetPromotionByCodeOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getPromotionByCodeWithHttpOperationResponse(code: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetPromotionByCodeOptionalParams): Promise<msRest.HttpOperationResponse<Models.Promotion>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'BASIC';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          code,\n          fields,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/promotions/{code}\",\n          urlParameters: [\n            {\n              parameterPath: \"code\",\n              mapper: {\n                required: true,\n                serializedName: \"code\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'BASIC',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.Promotion\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.Promotion;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get a list of store locations\n   *\n   * Lists all store locations that are near the location specified in a query or based on latitude\n   * and longitude.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2LocationSearchOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async locationSearchWithHttpOperationResponse(baseSiteId: string, options?: Models.CommerceWebservicesV2LocationSearchOptionalParams): Promise<msRest.HttpOperationResponse<Models.StoreFinderSearchPage>> {\n    let query = (options && options.query !== undefined) ? options.query : undefined;\n    let latitude = (options && options.latitude !== undefined) ? options.latitude : undefined;\n    let longitude = (options && options.longitude !== undefined) ? options.longitude : undefined;\n    let currentPage = (options && options.currentPage !== undefined) ? options.currentPage : 0;\n    let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : 20;\n    let sort = (options && options.sort !== undefined) ? options.sort : 'asc';\n    let radius = (options && options.radius !== undefined) ? options.radius : 100000;\n    let accuracy = (options && options.accuracy !== undefined) ? options.accuracy : 0;\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          query,\n          latitude,\n          longitude,\n          currentPage,\n          pageSize,\n          sort,\n          radius,\n          accuracy,\n          fields,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/stores\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"query\",\n              mapper: {\n                serializedName: \"query\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"latitude\",\n              mapper: {\n                serializedName: \"latitude\",\n                type: {\n                  name: \"Number\"\n                }\n              }\n            },\n            {\n              parameterPath: \"longitude\",\n              mapper: {\n                serializedName: \"longitude\",\n                type: {\n                  name: \"Number\"\n                }\n              }\n            },\n            {\n              parameterPath: \"currentPage\",\n              mapper: {\n                serializedName: \"currentPage\",\n                defaultValue: 0,\n                type: {\n                  name: \"Number\"\n                }\n              }\n            },\n            {\n              parameterPath: \"pageSize\",\n              mapper: {\n                serializedName: \"pageSize\",\n                defaultValue: 20,\n                type: {\n                  name: \"Number\"\n                }\n              }\n            },\n            {\n              parameterPath: \"sort\",\n              mapper: {\n                serializedName: \"sort\",\n                defaultValue: 'asc',\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"radius\",\n              mapper: {\n                serializedName: \"radius\",\n                defaultValue: 100000,\n                type: {\n                  name: \"Number\"\n                }\n              }\n            },\n            {\n              parameterPath: \"accuracy\",\n              mapper: {\n                serializedName: \"accuracy\",\n                defaultValue: 0,\n                type: {\n                  name: \"Number\"\n                }\n              }\n            },\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.StoreFinderSearchPage\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.StoreFinderSearchPage;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get a header with the number of store locations\n   *\n   * In the response header, the \"x-total-count\" indicates the number of all store locations that are\n   * near the location specified in a query, or based on latitude and longitude.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2CountLocationSearchOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async countLocationSearchWithHttpOperationResponse(baseSiteId: string, options?: Models.CommerceWebservicesV2CountLocationSearchOptionalParams): Promise<msRest.HttpOperationResponse<void>> {\n    let query = (options && options.query !== undefined) ? options.query : undefined;\n    let latitude = (options && options.latitude !== undefined) ? options.latitude : undefined;\n    let longitude = (options && options.longitude !== undefined) ? options.longitude : undefined;\n    let radius = (options && options.radius !== undefined) ? options.radius : 100000;\n    let accuracy = (options && options.accuracy !== undefined) ? options.accuracy : 0;\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          query,\n          latitude,\n          longitude,\n          radius,\n          accuracy,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"HEAD\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/stores\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"query\",\n              mapper: {\n                serializedName: \"query\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"latitude\",\n              mapper: {\n                serializedName: \"latitude\",\n                type: {\n                  name: \"Number\"\n                }\n              }\n            },\n            {\n              parameterPath: \"longitude\",\n              mapper: {\n                serializedName: \"longitude\",\n                type: {\n                  name: \"Number\"\n                }\n              }\n            },\n            {\n              parameterPath: \"radius\",\n              mapper: {\n                serializedName: \"radius\",\n                defaultValue: 100000,\n                type: {\n                  name: \"Number\"\n                }\n              }\n            },\n            {\n              parameterPath: \"accuracy\",\n              mapper: {\n                serializedName: \"accuracy\",\n                defaultValue: 0,\n                type: {\n                  name: \"Number\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {},\n            204: {},\n            401: {},\n            403: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get a store location\n   *\n   * Returns store location based on its unique name.\n   *\n   * @param {string} storeId Store identifier (currently store name)\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2LocationDetailsOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async locationDetailsWithHttpOperationResponse(storeId: string, baseSiteId: string, options?: Models.CommerceWebservicesV2LocationDetailsOptionalParams): Promise<msRest.HttpOperationResponse<Models.PointOfService>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          storeId,\n          fields,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/stores/{storeId}\",\n          urlParameters: [\n            {\n              parameterPath: \"storeId\",\n              mapper: {\n                required: true,\n                serializedName: \"storeId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.PointOfService\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.PointOfService;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get a list of all localized titles.\n   *\n   * Lists all localized titles.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetTitlesOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getTitlesWithHttpOperationResponse(baseSiteId: string, options?: Models.CommerceWebservicesV2GetTitlesOptionalParams): Promise<msRest.HttpOperationResponse<Models.TitleList>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          fields,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/titles\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.TitleList\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.TitleList;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary  Registers a customer\n   *\n   * Registers a customer. There are two options for registering a customer. The first option\n   * requires the following parameters: login, password, firstName, lastName, titleCode. The second\n   * option converts a guest to a customer. In this case, the required parameters are: guid,\n   * password.\n   *\n   * @param {UserSignUp} user User's object.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2RegisterUserPrimOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async registerUserPrimWithHttpOperationResponse(user: Models.UserSignUp, baseSiteId: string, options?: Models.CommerceWebservicesV2RegisterUserPrimOptionalParams): Promise<msRest.HttpOperationResponse<Models.User>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          user,\n          fields,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"POST\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          requestBody: {\n            parameterPath: \"user\",\n            mapper: {\n              ...Mappers.UserSignUp,\n              required: true\n            }\n          },\n          contentType: \"application/json; charset=utf-8\",\n          responses: {\n            201: {\n              bodyMapper: Mappers.User\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 201) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.User;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get customer profile\n   *\n   * Returns customer profile.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2GetUserOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getUserWithHttpOperationResponse(baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetUserOptionalParams): Promise<msRest.HttpOperationResponse<Models.User>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          fields,\n          baseSiteId,\n          userId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.User\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.User;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Updates customer profile\n   *\n   * Updates customer profile. Attributes not provided in the request body will be defined again (set\n   * to null or default).\n   *\n   * @param {User} user User's object\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async putUserPrimWithHttpOperationResponse(user: Models.User, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          user,\n          baseSiteId,\n          userId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"PUT\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          requestBody: {\n            parameterPath: \"user\",\n            mapper: {\n              ...Mappers.User,\n              required: true\n            }\n          },\n          contentType: \"application/json; charset=utf-8\",\n          responses: {\n            200: {},\n            201: {},\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Delete customer profile\n   *\n   * Removes customer profile.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async deactivateUserWithHttpOperationResponse(baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          baseSiteId,\n          userId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"DELETE\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {},\n            204: {},\n            401: {},\n            403: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Updates customer profile\n   *\n   * Updates customer profile. Only attributes provided in the request body will be changed.\n   *\n   * @param {User} user User's object.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async updateUserPrimWithHttpOperationResponse(user: Models.User, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          user,\n          baseSiteId,\n          userId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"PATCH\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          requestBody: {\n            parameterPath: \"user\",\n            mapper: {\n              ...Mappers.User,\n              required: true\n            }\n          },\n          contentType: \"application/json; charset=utf-8\",\n          responses: {\n            200: {},\n            204: {},\n            401: {},\n            403: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get customer's addresses\n   *\n   * Returns customer's addresses.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2GetAddressesOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getAddressesWithHttpOperationResponse(baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetAddressesOptionalParams): Promise<msRest.HttpOperationResponse<Models.AddressList>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          fields,\n          baseSiteId,\n          userId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/addresses\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.AddressList\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.AddressList;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Creates a new address.\n   *\n   * Creates a new address.\n   *\n   * @param {Address} address Address object.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2CreateAddressPrimOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async createAddressPrimWithHttpOperationResponse(address: Models.Address, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2CreateAddressPrimOptionalParams): Promise<msRest.HttpOperationResponse<Models.Address>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          address,\n          fields,\n          baseSiteId,\n          userId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"POST\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/addresses\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          requestBody: {\n            parameterPath: \"address\",\n            mapper: {\n              ...Mappers.Address,\n              required: true\n            }\n          },\n          contentType: \"application/json; charset=utf-8\",\n          responses: {\n            201: {\n              bodyMapper: Mappers.Address\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 201) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.Address;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Verifies address\n   *\n   * Verifies address.\n   *\n   * @param {Address} address Address object.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2VerifyAddressPrimOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async verifyAddressPrimWithHttpOperationResponse(address: Models.Address, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2VerifyAddressPrimOptionalParams): Promise<msRest.HttpOperationResponse<Models.AddressValidation>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          address,\n          fields,\n          baseSiteId,\n          userId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"POST\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/addresses/verification\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          requestBody: {\n            parameterPath: \"address\",\n            mapper: {\n              ...Mappers.Address,\n              required: true\n            }\n          },\n          contentType: \"application/json; charset=utf-8\",\n          responses: {\n            200: {\n              bodyMapper: Mappers.AddressValidation\n            },\n            201: {},\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.AddressValidation;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get info about address\n   *\n   * Returns detailed information about address with a given id.\n   *\n   * @param {string} addressId Address identifier.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2GetAddressOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getAddressWithHttpOperationResponse(addressId: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetAddressOptionalParams): Promise<msRest.HttpOperationResponse<Models.Address>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          addressId,\n          fields,\n          baseSiteId,\n          userId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/addresses/{addressId}\",\n          urlParameters: [\n            {\n              parameterPath: \"addressId\",\n              mapper: {\n                required: true,\n                serializedName: \"addressId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.Address\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.Address;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Updates the address\n   *\n   * Updates the address. Attributes not provided in the request will be defined again (set to null\n   * or default).\n   *\n   * @param {string} addressId Address identifier.\n   *\n   * @param {Address} address Address object.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async putAddressPrimWithHttpOperationResponse(addressId: string, address: Models.Address, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          addressId,\n          address,\n          baseSiteId,\n          userId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"PUT\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/addresses/{addressId}\",\n          urlParameters: [\n            {\n              parameterPath: \"addressId\",\n              mapper: {\n                required: true,\n                serializedName: \"addressId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          requestBody: {\n            parameterPath: \"address\",\n            mapper: {\n              ...Mappers.Address,\n              required: true\n            }\n          },\n          contentType: \"application/json; charset=utf-8\",\n          responses: {\n            200: {},\n            201: {},\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Delete customer's address\n   *\n   * Removes customer's address.\n   *\n   * @param {string} addressId Address identifier.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async deleteAddressWithHttpOperationResponse(addressId: string, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          addressId,\n          baseSiteId,\n          userId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"DELETE\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/addresses/{addressId}\",\n          urlParameters: [\n            {\n              parameterPath: \"addressId\",\n              mapper: {\n                required: true,\n                serializedName: \"addressId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {},\n            204: {},\n            401: {},\n            403: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Updates the address\n   *\n   * Updates the address. Only attributes provided in the request body will be changed.\n   *\n   * @param {string} addressId Address identifier.\n   *\n   * @param {Address} address Address object\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async patchAddressPrimWithHttpOperationResponse(addressId: string, address: Models.Address, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          addressId,\n          address,\n          baseSiteId,\n          userId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"PATCH\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/addresses/{addressId}\",\n          urlParameters: [\n            {\n              parameterPath: \"addressId\",\n              mapper: {\n                required: true,\n                serializedName: \"addressId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          requestBody: {\n            parameterPath: \"address\",\n            mapper: {\n              ...Mappers.Address,\n              required: true\n            }\n          },\n          contentType: \"application/json; charset=utf-8\",\n          responses: {\n            200: {},\n            204: {},\n            401: {},\n            403: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get all customer carts.\n   *\n   * Lists all customer carts.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2GetCartsOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getCartsWithHttpOperationResponse(baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetCartsOptionalParams): Promise<msRest.HttpOperationResponse<Models.CartList>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n    let savedCartsOnly = (options && options.savedCartsOnly !== undefined) ? options.savedCartsOnly : false;\n    let currentPage = (options && options.currentPage !== undefined) ? options.currentPage : 0;\n    let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : 20;\n    let sort = (options && options.sort !== undefined) ? options.sort : undefined;\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          fields,\n          savedCartsOnly,\n          currentPage,\n          pageSize,\n          sort,\n          baseSiteId,\n          userId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/carts\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"savedCartsOnly\",\n              mapper: {\n                serializedName: \"savedCartsOnly\",\n                defaultValue: false,\n                type: {\n                  name: \"Boolean\"\n                }\n              }\n            },\n            {\n              parameterPath: \"currentPage\",\n              mapper: {\n                serializedName: \"currentPage\",\n                defaultValue: 0,\n                type: {\n                  name: \"Number\"\n                }\n              }\n            },\n            {\n              parameterPath: \"pageSize\",\n              mapper: {\n                serializedName: \"pageSize\",\n                defaultValue: 20,\n                type: {\n                  name: \"Number\"\n                }\n              }\n            },\n            {\n              parameterPath: \"sort\",\n              mapper: {\n                serializedName: \"sort\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.CartList\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.CartList;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Creates or restore a cart for a user.\n   *\n   * Creates a new cart or restores an anonymous cart as a user's cart (if an old Cart Id is given in\n   * the request).\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2CreateCartOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async createCartWithHttpOperationResponse(baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2CreateCartOptionalParams): Promise<msRest.HttpOperationResponse<Models.Cart>> {\n    let oldCartId = (options && options.oldCartId !== undefined) ? options.oldCartId : undefined;\n    let toMergeCartGuid = (options && options.toMergeCartGuid !== undefined) ? options.toMergeCartGuid : undefined;\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          oldCartId,\n          toMergeCartGuid,\n          fields,\n          baseSiteId,\n          userId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"POST\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/carts\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"oldCartId\",\n              mapper: {\n                serializedName: \"oldCartId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"toMergeCartGuid\",\n              mapper: {\n                serializedName: \"toMergeCartGuid\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            201: {\n              bodyMapper: Mappers.Cart\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 201) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.Cart;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get a cart with a given identifier.\n   *\n   * Returns the cart with a given identifier.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {CommerceWebservicesV2GetCartOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getCartWithHttpOperationResponse(baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2GetCartOptionalParams): Promise<msRest.HttpOperationResponse<Models.Cart>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          fields,\n          baseSiteId,\n          userId,\n          cartId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"cartId\",\n              mapper: {\n                required: true,\n                serializedName: \"cartId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.Cart\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.Cart;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Deletes a cart with a given cart id.\n   *\n   * Deletes a cart with a given cart id.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async deleteCartWithHttpOperationResponse(baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          baseSiteId,\n          userId,\n          cartId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"DELETE\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"cartId\",\n              mapper: {\n                required: true,\n                serializedName: \"cartId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {},\n            204: {},\n            401: {},\n            403: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Creates a delivery address for the cart.\n   *\n   * Creates an address and assigns it to the cart as the delivery address.\n   *\n   * @param {Address} address Request body parameter that contains details such as the customer's\n   * first name (firstName), the customer's last name (lastName), the customer's title (titleCode),\n   * the country (country.isocode), the first part of the address (line1), the second part of the\n   * address (line2), the town (town), the postal code (postalCode), and the region (region.isocode).\n   *\n   * The DTO is in XML or .json format.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {CommerceWebservicesV2CreateAndSetAddressPrimOptionalParams} [options] Optional\n   * Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async createAndSetAddressPrimWithHttpOperationResponse(address: Models.Address, baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2CreateAndSetAddressPrimOptionalParams): Promise<msRest.HttpOperationResponse<Models.Address>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          address,\n          fields,\n          baseSiteId,\n          userId,\n          cartId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"POST\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/addresses/delivery\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"cartId\",\n              mapper: {\n                required: true,\n                serializedName: \"cartId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          requestBody: {\n            parameterPath: \"address\",\n            mapper: {\n              ...Mappers.Address,\n              required: true\n            }\n          },\n          contentType: \"application/json; charset=utf-8\",\n          responses: {\n            201: {\n              bodyMapper: Mappers.Address\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 201) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.Address;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Sets a delivery address for the cart.\n   *\n   * Sets a delivery address for the cart. The address country must be placed among the delivery\n   * countries of the current base store.\n   *\n   * @param {string} addressId Address identifier\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async setCartDeliveryAddressWithHttpOperationResponse(addressId: string, baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          addressId,\n          baseSiteId,\n          userId,\n          cartId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"PUT\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/addresses/delivery\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"cartId\",\n              mapper: {\n                required: true,\n                serializedName: \"cartId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"addressId\",\n              mapper: {\n                required: true,\n                serializedName: \"addressId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {},\n            201: {},\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Delete the delivery address from the cart.\n   *\n   * Removes the delivery address from the cart.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async removeCartDeliveryAddressWithHttpOperationResponse(baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          baseSiteId,\n          userId,\n          cartId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"DELETE\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/addresses/delivery\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"cartId\",\n              mapper: {\n                required: true,\n                serializedName: \"cartId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {},\n            204: {},\n            401: {},\n            403: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Explicitly clones a cart.\n   *\n   * Explicitly clones a cart.\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2CloneSaveCartOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async cloneSaveCartWithHttpOperationResponse(cartId: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2CloneSaveCartOptionalParams): Promise<msRest.HttpOperationResponse<Models.SaveCartResult>> {\n    let name = (options && options.name !== undefined) ? options.name : undefined;\n    let description = (options && options.description !== undefined) ? options.description : undefined;\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          cartId,\n          name,\n          description,\n          fields,\n          baseSiteId,\n          userId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"POST\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/clonesavedcart\",\n          urlParameters: [\n            {\n              parameterPath: \"cartId\",\n              mapper: {\n                required: true,\n                serializedName: \"cartId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"name\",\n              mapper: {\n                serializedName: \"name\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"description\",\n              mapper: {\n                serializedName: \"description\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.SaveCartResult\n            },\n            201: {},\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.SaveCartResult;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get the delivery mode selected for the cart.\n   *\n   * Returns the delivery mode selected for the cart.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {CommerceWebservicesV2GetCartDeliveryModeOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getCartDeliveryModeWithHttpOperationResponse(baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2GetCartDeliveryModeOptionalParams): Promise<msRest.HttpOperationResponse<Models.DeliveryMode>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          fields,\n          baseSiteId,\n          userId,\n          cartId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/deliverymode\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"cartId\",\n              mapper: {\n                required: true,\n                serializedName: \"cartId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.DeliveryMode\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.DeliveryMode;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Sets the delivery mode for a cart.\n   *\n   * Sets the delivery mode with a given identifier for the cart.\n   *\n   * @param {string} deliveryModeId Delivery mode identifier (code)\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async setCartDeliveryModeWithHttpOperationResponse(deliveryModeId: string, baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          deliveryModeId,\n          baseSiteId,\n          userId,\n          cartId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"PUT\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/deliverymode\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"cartId\",\n              mapper: {\n                required: true,\n                serializedName: \"cartId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"deliveryModeId\",\n              mapper: {\n                required: true,\n                serializedName: \"deliveryModeId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {},\n            201: {},\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Delete the delivery mode from the cart.\n   *\n   * Removes the delivery mode from the cart.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async removeDeliveryModeWithHttpOperationResponse(baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          baseSiteId,\n          userId,\n          cartId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"DELETE\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/deliverymode\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"cartId\",\n              mapper: {\n                required: true,\n                serializedName: \"cartId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {},\n            204: {},\n            401: {},\n            403: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get all delivery modes for the current store and delivery address.\n   *\n   * Returns all delivery modes supported for the current base store and cart delivery address. A\n   * delivery address must be set for the cart, otherwise an empty list will be returned.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {CommerceWebservicesV2GetSupportedDeliveryModesOptionalParams} [options] Optional\n   * Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getSupportedDeliveryModesWithHttpOperationResponse(baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2GetSupportedDeliveryModesOptionalParams): Promise<msRest.HttpOperationResponse<Models.DeliveryModeList>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          fields,\n          baseSiteId,\n          userId,\n          cartId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/deliverymodes\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"cartId\",\n              mapper: {\n                required: true,\n                serializedName: \"cartId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.DeliveryModeList\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.DeliveryModeList;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Assigns an email to the cart.\n   *\n   * Assigns an email to the cart. This step is required to make a guest checkout.\n   *\n   * @param {string} email Email of the guest user. It will be used during the checkout process.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async guestLoginWithHttpOperationResponse(email: string, baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          email,\n          baseSiteId,\n          userId,\n          cartId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"PUT\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/email\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"cartId\",\n              mapper: {\n                required: true,\n                serializedName: \"cartId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"email\",\n              mapper: {\n                required: true,\n                serializedName: \"email\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {},\n            201: {},\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get cart entries.\n   *\n   * Returns cart entries.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {CommerceWebservicesV2GetCartEntriesOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getCartEntriesWithHttpOperationResponse(baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2GetCartEntriesOptionalParams): Promise<msRest.HttpOperationResponse<Models.OrderEntryList>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          fields,\n          baseSiteId,\n          userId,\n          cartId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/entries\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"cartId\",\n              mapper: {\n                required: true,\n                serializedName: \"cartId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.OrderEntryList\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.OrderEntryList;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Adds a product to the cart.\n   *\n   * Adds a product to the cart.\n   *\n   * @param {OrderEntry} entry Request body parameter that contains details such as the product code\n   * (product.code), the quantity of product (quantity), and the pickup store name\n   * (deliveryPointOfService.name).\n   *\n   * The DTO is in XML or .json format.\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2AddCartEntryPrimOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async addCartEntryPrimWithHttpOperationResponse(entry: Models.OrderEntry, userId: string, cartId: string, baseSiteId: string, options?: Models.CommerceWebservicesV2AddCartEntryPrimOptionalParams): Promise<msRest.HttpOperationResponse<Models.CartModification>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          entry,\n          fields,\n          userId,\n          cartId,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"POST\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/entries\",\n          urlParameters: [\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"cartId\",\n              mapper: {\n                required: true,\n                serializedName: \"cartId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          requestBody: {\n            parameterPath: \"entry\",\n            mapper: {\n              ...Mappers.OrderEntry,\n              required: true\n            }\n          },\n          contentType: \"application/json; charset=utf-8\",\n          responses: {\n            200: {\n              bodyMapper: Mappers.CartModification\n            },\n            201: {},\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.CartModification;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get the details of the cart entries.\n   *\n   * Returns the details of the cart entries.\n   *\n   * @param {number} entryNumber The entry number. Each entry in a cart has an entry number. Cart\n   * entries are numbered in ascending order, starting with zero (0).\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {CommerceWebservicesV2GetCartEntryOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getCartEntryWithHttpOperationResponse(entryNumber: number, baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2GetCartEntryOptionalParams): Promise<msRest.HttpOperationResponse<Models.OrderEntry>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          entryNumber,\n          fields,\n          baseSiteId,\n          userId,\n          cartId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/entries/{entryNumber}\",\n          urlParameters: [\n            {\n              parameterPath: \"entryNumber\",\n              mapper: {\n                required: true,\n                serializedName: \"entryNumber\",\n                type: {\n                  name: \"Number\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"cartId\",\n              mapper: {\n                required: true,\n                serializedName: \"cartId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.OrderEntry\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.OrderEntry;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Set quantity and store details of a cart entry.\n   *\n   * Updates the quantity of a single cart entry and the details of the store where the cart entry\n   * will be picked up. Attributes not provided in request will be defined again (set to null or\n   * default)\n   *\n   * @param {number} entryNumber The entry number. Each entry in a cart has an entry number. Cart\n   * entries are numbered in ascending order, starting with zero (0).\n   *\n   * @param {OrderEntry} entry Request body parameter that contains details such as the quantity of\n   * product (quantity), and the pickup store name (deliveryPointOfService.name)\n   *\n   * The DTO is in XML or .json format.\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2SetCartEntryPrimOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async setCartEntryPrimWithHttpOperationResponse(entryNumber: number, entry: Models.OrderEntry, userId: string, cartId: string, baseSiteId: string, options?: Models.CommerceWebservicesV2SetCartEntryPrimOptionalParams): Promise<msRest.HttpOperationResponse<Models.CartModification>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          entryNumber,\n          entry,\n          fields,\n          userId,\n          cartId,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"PUT\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/entries/{entryNumber}\",\n          urlParameters: [\n            {\n              parameterPath: \"entryNumber\",\n              mapper: {\n                required: true,\n                serializedName: \"entryNumber\",\n                type: {\n                  name: \"Number\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"cartId\",\n              mapper: {\n                required: true,\n                serializedName: \"cartId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          requestBody: {\n            parameterPath: \"entry\",\n            mapper: {\n              ...Mappers.OrderEntry,\n              required: true\n            }\n          },\n          contentType: \"application/json; charset=utf-8\",\n          responses: {\n            200: {\n              bodyMapper: Mappers.CartModification\n            },\n            201: {},\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.CartModification;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Deletes cart entry.\n   *\n   * Deletes cart entry.\n   *\n   * @param {number} entryNumber The entry number. Each entry in a cart has an entry number. Cart\n   * entries are numbered in ascending order, starting with zero (0).\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async removeCartEntryWithHttpOperationResponse(entryNumber: number, baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          entryNumber,\n          baseSiteId,\n          userId,\n          cartId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"DELETE\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/entries/{entryNumber}\",\n          urlParameters: [\n            {\n              parameterPath: \"entryNumber\",\n              mapper: {\n                required: true,\n                serializedName: \"entryNumber\",\n                type: {\n                  name: \"Number\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"cartId\",\n              mapper: {\n                required: true,\n                serializedName: \"cartId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {},\n            204: {},\n            401: {},\n            403: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Update quantity and store details of a cart entry.\n   *\n   * Updates the quantity of a single cart entry and the details of the store where the cart entry\n   * will be picked up.\n   *\n   * @param {number} entryNumber The entry number. Each entry in a cart has an entry number. Cart\n   * entries are numbered in ascending order, starting with zero (0).\n   *\n   * @param {OrderEntry} entry Request body parameter that contains details such as the quantity of\n   * product (quantity), and the pickup store name (deliveryPointOfService.name)\n   *\n   * The DTO is in XML or .json format.\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2UpdateCartEntryPrimOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async updateCartEntryPrimWithHttpOperationResponse(entryNumber: number, entry: Models.OrderEntry, userId: string, cartId: string, baseSiteId: string, options?: Models.CommerceWebservicesV2UpdateCartEntryPrimOptionalParams): Promise<msRest.HttpOperationResponse<Models.CartModification>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          entryNumber,\n          entry,\n          fields,\n          userId,\n          cartId,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"PATCH\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/entries/{entryNumber}\",\n          urlParameters: [\n            {\n              parameterPath: \"entryNumber\",\n              mapper: {\n                required: true,\n                serializedName: \"entryNumber\",\n                type: {\n                  name: \"Number\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"cartId\",\n              mapper: {\n                required: true,\n                serializedName: \"cartId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          requestBody: {\n            parameterPath: \"entry\",\n            mapper: {\n              ...Mappers.OrderEntry,\n              required: true\n            }\n          },\n          contentType: \"application/json; charset=utf-8\",\n          responses: {\n            200: {\n              bodyMapper: Mappers.CartModification\n            },\n            204: {},\n            401: {},\n            403: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.CartModification;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Flag a cart for deletion.\n   *\n   * Flags a cart for deletion (the cart doesn't have corresponding save cart attributes anymore).\n   * The cart is not actually deleted from the database. But with the removal of the saved cart\n   * attributes, this cart will be taken care of by the cart removal job just like any other cart.\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2FlagForDeletionOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async flagForDeletionWithHttpOperationResponse(cartId: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2FlagForDeletionOptionalParams): Promise<msRest.HttpOperationResponse<Models.SaveCartResult>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          cartId,\n          fields,\n          baseSiteId,\n          userId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"PATCH\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/flagForDeletion\",\n          urlParameters: [\n            {\n              parameterPath: \"cartId\",\n              mapper: {\n                required: true,\n                serializedName: \"cartId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.SaveCartResult\n            },\n            204: {},\n            401: {},\n            403: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.SaveCartResult;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Defines and assigns details of a new credit card payment to the cart.\n   *\n   * Defines the details of a new credit card, and assigns this payment option to the cart.\n   *\n   * @param {PaymentDetails} paymentDetails Request body parameter that contains details such as the\n   * name on the card (accountHolderName), the card number (cardNumber), the card type\n   * (cardType.code), the month of the expiry date (expiryMonth), the year of the expiry date\n   * (expiryYear), whether the payment details should be saved (saved), whether the payment details\n   * should be set as default (defaultPaymentInfo), and the billing address\n   * (billingAddress.firstName, billingAddress.lastName, billingAddress.titleCode,\n   * billingAddress.country.isocode, billingAddress.line1, billingAddress.line2, billingAddress.town,\n   * billingAddress.postalCode, billingAddress.region.isocode)\n   *\n   * The DTO is in XML or .json format.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {CommerceWebservicesV2AddPaymentDetailsPrimOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async addPaymentDetailsPrimWithHttpOperationResponse(paymentDetails: Models.PaymentDetails, baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2AddPaymentDetailsPrimOptionalParams): Promise<msRest.HttpOperationResponse<Models.PaymentDetails>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          paymentDetails,\n          fields,\n          baseSiteId,\n          userId,\n          cartId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"POST\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/paymentdetails\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"cartId\",\n              mapper: {\n                required: true,\n                serializedName: \"cartId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          requestBody: {\n            parameterPath: \"paymentDetails\",\n            mapper: {\n              ...Mappers.PaymentDetails,\n              required: true\n            }\n          },\n          contentType: \"application/json; charset=utf-8\",\n          responses: {\n            201: {\n              bodyMapper: Mappers.PaymentDetails\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 201) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.PaymentDetails;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Sets credit card payment details for the cart.\n   *\n   * Sets credit card payment details for the cart.\n   *\n   * @param {string} paymentDetailsId Payment details identifier.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async setPaymentDetailsWithHttpOperationResponse(paymentDetailsId: string, baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          paymentDetailsId,\n          baseSiteId,\n          userId,\n          cartId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"PUT\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/paymentdetails\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"cartId\",\n              mapper: {\n                required: true,\n                serializedName: \"cartId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"paymentDetailsId\",\n              mapper: {\n                required: true,\n                serializedName: \"paymentDetailsId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {},\n            201: {},\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get information about promotions applied on cart.\n   *\n   * Returns information about the promotions applied on the cart. Requests pertaining to promotions\n   * have been developed for the previous version of promotions and vouchers, and as a result, some\n   * of them are currently not compatible with the new promotions engine.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {CommerceWebservicesV2GetPromotionsOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getPromotionsWithHttpOperationResponse(baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2GetPromotionsOptionalParams): Promise<msRest.HttpOperationResponse<Models.PromotionResultList>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          fields,\n          baseSiteId,\n          userId,\n          cartId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/promotions\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"cartId\",\n              mapper: {\n                required: true,\n                serializedName: \"cartId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.PromotionResultList\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.PromotionResultList;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Enables promotions based on the promotionsId of the cart.\n   *\n   * Enables a promotion for the order based on the promotionId defined for the cart. Requests\n   * pertaining to promotions have been developed for the previous version of promotions and\n   * vouchers, and as a result, some of them are currently not compatible with the new promotions\n   * engine.\n   *\n   * @param {string} promotionId Promotion identifier (code)\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async applyPromotionWithHttpOperationResponse(promotionId: string, baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          promotionId,\n          baseSiteId,\n          userId,\n          cartId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"POST\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/promotions\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"cartId\",\n              mapper: {\n                required: true,\n                serializedName: \"cartId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"promotionId\",\n              mapper: {\n                required: true,\n                serializedName: \"promotionId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {},\n            201: {},\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get information about promotions applied on cart.\n   *\n   * Returns information about a promotion (with a specific promotionId), that has been applied on\n   * the cart. Requests pertaining to promotions have been developed for the previous version of\n   * promotions and vouchers, and as a result, some of them are currently not compatible with the new\n   * promotions engine.\n   *\n   * @param {string} promotionId Promotion identifier (code)\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {CommerceWebservicesV2GetPromotionOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getPromotionWithHttpOperationResponse(promotionId: string, baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2GetPromotionOptionalParams): Promise<msRest.HttpOperationResponse<Models.PromotionResultList>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          promotionId,\n          fields,\n          baseSiteId,\n          userId,\n          cartId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/promotions/{promotionId}\",\n          urlParameters: [\n            {\n              parameterPath: \"promotionId\",\n              mapper: {\n                required: true,\n                serializedName: \"promotionId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"cartId\",\n              mapper: {\n                required: true,\n                serializedName: \"cartId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.PromotionResultList\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.PromotionResultList;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Disables the promotion based on the promotionsId of the cart.\n   *\n   * Disables the promotion for the order based on the promotionId defined for the cart. Requests\n   * pertaining to promotions have been developed for the previous version of promotions and\n   * vouchers, and as a result, some of them are currently not compatible with the new promotions\n   * engine.\n   *\n   * @param {string} promotionId Promotion identifier (code)\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async removePromotionWithHttpOperationResponse(promotionId: string, baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          promotionId,\n          baseSiteId,\n          userId,\n          cartId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"DELETE\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/promotions/{promotionId}\",\n          urlParameters: [\n            {\n              parameterPath: \"promotionId\",\n              mapper: {\n                required: true,\n                serializedName: \"promotionId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"cartId\",\n              mapper: {\n                required: true,\n                serializedName: \"cartId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {},\n            204: {},\n            401: {},\n            403: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Restore a saved cart.\n   *\n   * Restore a saved cart.\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2RestoreSavedCartOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async restoreSavedCartWithHttpOperationResponse(cartId: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2RestoreSavedCartOptionalParams): Promise<msRest.HttpOperationResponse<Models.SaveCartResult>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          cartId,\n          fields,\n          baseSiteId,\n          userId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"PATCH\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/restoresavedcart\",\n          urlParameters: [\n            {\n              parameterPath: \"cartId\",\n              mapper: {\n                required: true,\n                serializedName: \"cartId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.SaveCartResult\n            },\n            204: {},\n            401: {},\n            403: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.SaveCartResult;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Explicitly saves a cart.\n   *\n   * Explicitly saves a cart.\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2SaveCartOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async saveCartWithHttpOperationResponse(cartId: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2SaveCartOptionalParams): Promise<msRest.HttpOperationResponse<Models.SaveCartResult>> {\n    let saveCartName = (options && options.saveCartName !== undefined) ? options.saveCartName : undefined;\n    let saveCartDescription = (options && options.saveCartDescription !== undefined) ? options.saveCartDescription : undefined;\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          cartId,\n          saveCartName,\n          saveCartDescription,\n          fields,\n          baseSiteId,\n          userId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"PATCH\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/save\",\n          urlParameters: [\n            {\n              parameterPath: \"cartId\",\n              mapper: {\n                required: true,\n                serializedName: \"cartId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"saveCartName\",\n              mapper: {\n                serializedName: \"saveCartName\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"saveCartDescription\",\n              mapper: {\n                serializedName: \"saveCartDescription\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.SaveCartResult\n            },\n            204: {},\n            401: {},\n            403: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.SaveCartResult;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get a saved cart.\n   *\n   * Returns a saved cart for an authenticated user. The cart is identified using the \"cartId\"\n   * parameter.\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2GetSavedCartOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getSavedCartWithHttpOperationResponse(cartId: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetSavedCartOptionalParams): Promise<msRest.HttpOperationResponse<Models.SaveCartResult>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          cartId,\n          fields,\n          baseSiteId,\n          userId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/savedcart\",\n          urlParameters: [\n            {\n              parameterPath: \"cartId\",\n              mapper: {\n                required: true,\n                serializedName: \"cartId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.SaveCartResult\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.SaveCartResult;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get a list of vouchers applied to the cart.\n   *\n   * Returns a list of vouchers applied to the cart.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {CommerceWebservicesV2GetVouchersOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getVouchersWithHttpOperationResponse(baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2GetVouchersOptionalParams): Promise<msRest.HttpOperationResponse<Models.VoucherList>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          fields,\n          baseSiteId,\n          userId,\n          cartId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/vouchers\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"cartId\",\n              mapper: {\n                required: true,\n                serializedName: \"cartId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.VoucherList\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.VoucherList;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Applies a voucher based on the voucherId defined for the cart.\n   *\n   * Applies a voucher based on the voucherId defined for the cart.\n   *\n   * @param {string} voucherId Voucher identifier (code)\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async applyVoucherForCartWithHttpOperationResponse(voucherId: string, baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          voucherId,\n          baseSiteId,\n          userId,\n          cartId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"POST\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/vouchers\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"cartId\",\n              mapper: {\n                required: true,\n                serializedName: \"cartId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"voucherId\",\n              mapper: {\n                required: true,\n                serializedName: \"voucherId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {},\n            201: {},\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Delete a voucher defined for the current cart.\n   *\n   * Removes a voucher based on the voucherId defined for the current cart.\n   *\n   * @param {string} voucherId Voucher identifier (code)\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async releaseVoucherFromCartWithHttpOperationResponse(voucherId: string, baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          voucherId,\n          baseSiteId,\n          userId,\n          cartId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"DELETE\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/carts/{cartId}/vouchers/{voucherId}\",\n          urlParameters: [\n            {\n              parameterPath: \"voucherId\",\n              mapper: {\n                required: true,\n                serializedName: \"voucherId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"cartId\",\n              mapper: {\n                required: true,\n                serializedName: \"cartId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {},\n            204: {},\n            401: {},\n            403: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get all customer groups of a customer.\n   *\n   * Returns all customer groups of a customer.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2GetAllCustomerGroupsForCustomerOptionalParams} [options] Optional\n   * Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getAllCustomerGroupsForCustomerWithHttpOperationResponse(baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetAllCustomerGroupsForCustomerOptionalParams): Promise<msRest.HttpOperationResponse<Models.UserGroupList>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          fields,\n          baseSiteId,\n          userId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/customergroups\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.UserGroupList\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.UserGroupList;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Changes customer's login name.\n   *\n   * Changes a customer's login name. Requires the customer's current password.\n   *\n   * @param {string} newLogin Customer's new login name. Customer login is case insensitive.\n   *\n   * @param {string} password Customer's current password.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async changeLoginWithHttpOperationResponse(newLogin: string, password: string, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          newLogin,\n          password,\n          baseSiteId,\n          userId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"PUT\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/login\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"newLogin\",\n              mapper: {\n                required: true,\n                serializedName: \"newLogin\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"password\",\n              mapper: {\n                required: true,\n                serializedName: \"password\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {},\n            201: {},\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get order history for user\n   *\n   * Returns order history data for all orders placed by a specified user for a specified base store.\n   * The response can display the results across multiple pages, if required.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2GetOrdersForUserOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getOrdersForUserWithHttpOperationResponse(baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetOrdersForUserOptionalParams): Promise<msRest.HttpOperationResponse<Models.OrderHistoryList>> {\n    let statuses = (options && options.statuses !== undefined) ? options.statuses : undefined;\n    let currentPage = (options && options.currentPage !== undefined) ? options.currentPage : 0;\n    let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : 20;\n    let sort = (options && options.sort !== undefined) ? options.sort : undefined;\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          statuses,\n          currentPage,\n          pageSize,\n          sort,\n          fields,\n          baseSiteId,\n          userId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/orders\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"statuses\",\n              mapper: {\n                serializedName: \"statuses\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"currentPage\",\n              mapper: {\n                serializedName: \"currentPage\",\n                defaultValue: 0,\n                type: {\n                  name: \"Number\"\n                }\n              }\n            },\n            {\n              parameterPath: \"pageSize\",\n              mapper: {\n                serializedName: \"pageSize\",\n                defaultValue: 20,\n                type: {\n                  name: \"Number\"\n                }\n              }\n            },\n            {\n              parameterPath: \"sort\",\n              mapper: {\n                serializedName: \"sort\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.OrderHistoryList\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.OrderHistoryList;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get total number of orders\n   *\n   * In the response header, the \"x-total-count\" indicates the total number of orders placed by a\n   * specified user for a specified base store.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2GetCountOrdersForUserOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getCountOrdersForUserWithHttpOperationResponse(baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetCountOrdersForUserOptionalParams): Promise<msRest.HttpOperationResponse<void>> {\n    let statuses = (options && options.statuses !== undefined) ? options.statuses : undefined;\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          statuses,\n          baseSiteId,\n          userId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"HEAD\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/orders\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"statuses\",\n              mapper: {\n                serializedName: \"statuses\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {},\n            204: {},\n            401: {},\n            403: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Post a order\n   *\n   * Authorizes the cart and places the order. The response contains the new order data.\n   *\n   * @param {string} cartId Cart code for logged in user, cart GUID for guest checkout\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2PlaceOrderOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async placeOrderWithHttpOperationResponse(cartId: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2PlaceOrderOptionalParams): Promise<msRest.HttpOperationResponse<Models.Order>> {\n    let securityCode = (options && options.securityCode !== undefined) ? options.securityCode : undefined;\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          cartId,\n          securityCode,\n          fields,\n          baseSiteId,\n          userId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"POST\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/orders\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"cartId\",\n              mapper: {\n                required: true,\n                serializedName: \"cartId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"securityCode\",\n              mapper: {\n                serializedName: \"securityCode\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            201: {\n              bodyMapper: Mappers.Order\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 201) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.Order;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get a order\n   *\n   * Returns specific order details based on a specific order code. The response contains detailed\n   * order information.\n   *\n   * @param {string} code Order GUID (Globally Unique Identifier) or order CODE\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2GetOrderForUserByCodeOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getOrderForUserByCodeWithHttpOperationResponse(code: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetOrderForUserByCodeOptionalParams): Promise<msRest.HttpOperationResponse<Models.Order>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          code,\n          fields,\n          baseSiteId,\n          userId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/orders/{code}\",\n          urlParameters: [\n            {\n              parameterPath: \"code\",\n              mapper: {\n                required: true,\n                serializedName: \"code\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.Order\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.Order;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Changes customer's password\n   *\n   * Changes customer's password.\n   *\n   * @param {string} newParameter New password.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2ChangePasswordOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async changePasswordWithHttpOperationResponse(newParameter: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2ChangePasswordOptionalParams): Promise<msRest.HttpOperationResponse<void>> {\n    let old = (options && options.old !== undefined) ? options.old : undefined;\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          old,\n          newParameter,\n          baseSiteId,\n          userId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"PUT\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/password\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"old\",\n              mapper: {\n                serializedName: \"old\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"newParameter\",\n              mapper: {\n                required: true,\n                serializedName: \"new\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            201: {},\n            202: {},\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get customer's credit card payment details list.\n   *\n   * Return customer's credit card payment details list.\n   *\n   * @param {boolean} saved Type of payment details.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2GetPaymentInfosOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getPaymentInfosWithHttpOperationResponse(saved: boolean, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetPaymentInfosOptionalParams): Promise<msRest.HttpOperationResponse<Models.PaymentDetailsList>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          saved,\n          fields,\n          baseSiteId,\n          userId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/paymentdetails\",\n          urlParameters: [\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"saved\",\n              mapper: {\n                required: true,\n                serializedName: \"saved\",\n                defaultValue: false,\n                type: {\n                  name: \"Boolean\"\n                }\n              }\n            },\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.PaymentDetailsList\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.PaymentDetailsList;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get customer's credit card payment details.\n   *\n   * Returns a customer's credit card payment details for the specified paymentDetailsId.\n   *\n   * @param {string} paymentDetailsId Payment details identifier.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2GetPaymentDetailsOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getPaymentDetailsWithHttpOperationResponse(paymentDetailsId: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetPaymentDetailsOptionalParams): Promise<msRest.HttpOperationResponse<Models.PaymentDetails>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'DEFAULT';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          paymentDetailsId,\n          fields,\n          baseSiteId,\n          userId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/paymentdetails/{paymentDetailsId}\",\n          urlParameters: [\n            {\n              parameterPath: \"paymentDetailsId\",\n              mapper: {\n                required: true,\n                serializedName: \"paymentDetailsId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'DEFAULT',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.PaymentDetails\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.PaymentDetails;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Updates existing customer's credit card payment info.\n   *\n   * Updates existing customer's credit card payment info based on the payment info ID. Attributes\n   * not given in request will be defined again (set to null or default).\n   *\n   * @param {string} paymentDetailsId Payment details identifier.\n   *\n   * @param {PaymentDetails} paymentDetails Payment details object.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async putPaymentInfoPrimWithHttpOperationResponse(paymentDetailsId: string, paymentDetails: Models.PaymentDetails, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          paymentDetailsId,\n          paymentDetails,\n          baseSiteId,\n          userId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"PUT\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/paymentdetails/{paymentDetailsId}\",\n          urlParameters: [\n            {\n              parameterPath: \"paymentDetailsId\",\n              mapper: {\n                required: true,\n                serializedName: \"paymentDetailsId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          requestBody: {\n            parameterPath: \"paymentDetails\",\n            mapper: {\n              ...Mappers.PaymentDetails,\n              required: true\n            }\n          },\n          contentType: \"application/json; charset=utf-8\",\n          responses: {\n            200: {},\n            201: {},\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Delete customer's credit card payment details.\n   *\n   * Removes a customer's credit card payment details based on a specified paymentDetailsId.\n   *\n   * @param {string} paymentDetailsId Payment details identifier.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async deletePaymentInfoWithHttpOperationResponse(paymentDetailsId: string, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          paymentDetailsId,\n          baseSiteId,\n          userId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"DELETE\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/paymentdetails/{paymentDetailsId}\",\n          urlParameters: [\n            {\n              parameterPath: \"paymentDetailsId\",\n              mapper: {\n                required: true,\n                serializedName: \"paymentDetailsId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {},\n            204: {},\n            401: {},\n            403: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Updates existing customer's credit card payment details.\n   *\n   * Updates an existing customer's credit card payment details based on the specified\n   * paymentDetailsId. Only those attributes provided in the request will be updated.\n   *\n   * @param {string} paymentDetailsId Payment details identifier.\n   *\n   * @param {PaymentDetails} paymentDetails Payment details object\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async updatePaymentInfoPrimWithHttpOperationResponse(paymentDetailsId: string, paymentDetails: Models.PaymentDetails, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          paymentDetailsId,\n          paymentDetails,\n          baseSiteId,\n          userId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"PATCH\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/users/{userId}/paymentdetails/{paymentDetailsId}\",\n          urlParameters: [\n            {\n              parameterPath: \"paymentDetailsId\",\n              mapper: {\n                required: true,\n                serializedName: \"paymentDetailsId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"userId\",\n              mapper: {\n                required: true,\n                serializedName: \"userId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          requestBody: {\n            parameterPath: \"paymentDetails\",\n            mapper: {\n              ...Mappers.PaymentDetails,\n              required: true\n            }\n          },\n          contentType: \"application/json; charset=utf-8\",\n          responses: {\n            200: {},\n            204: {},\n            401: {},\n            403: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n  // methods on the client.\n\n  /**\n   * @summary Get a voucher based on code\n   *\n   * Returns details of a single voucher that is specified by its voucher identification code.\n   *\n   * @param {string} code Voucher identifier (code)\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetVoucherByCodeOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} The deserialized result object.\n   *\n   * @reject {Error|ServiceError} The error object.\n   */\n  async getVoucherByCodeWithHttpOperationResponse(code: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetVoucherByCodeOptionalParams): Promise<msRest.HttpOperationResponse<Models.Voucher>> {\n    let fields = (options && options.fields !== undefined) ? options.fields : 'BASIC';\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          code,\n          fields,\n          baseSiteId\n        },\n        options);\n      operationRes = await this.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.baseUri,\n          path: \"rest/v2/{baseSiteId}/vouchers/{code}\",\n          urlParameters: [\n            {\n              parameterPath: \"code\",\n              mapper: {\n                required: true,\n                serializedName: \"code\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterPath: \"baseSiteId\",\n              mapper: {\n                required: true,\n                serializedName: \"baseSiteId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterPath: \"fields\",\n              mapper: {\n                serializedName: \"fields\",\n                defaultValue: 'BASIC',\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          responses: {\n            200: {\n              bodyMapper: Mappers.Voucher\n            },\n            401: {},\n            403: {},\n            404: {},\n            default: {}\n          },\n          serializer: this.serializer\n        });\n      // Deserialize Response\n      let statusCode = operationRes.status;\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse != undefined) {\n            const resultMapper = Mappers.Voucher;\n            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * @summary Get a list of supported payment card types.\n   *\n   * Lists supported payment card types.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetCardTypesOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.CardTypeList} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.CardTypeList} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getCardTypes(baseSiteId: string): Promise<Models.CardTypeList>;\n  getCardTypes(baseSiteId: string, options: Models.CommerceWebservicesV2GetCardTypesOptionalParams): Promise<Models.CardTypeList>;\n  getCardTypes(baseSiteId: string, callback: msRest.ServiceCallback<Models.CardTypeList>): void;\n  getCardTypes(baseSiteId: string, options: Models.CommerceWebservicesV2GetCardTypesOptionalParams, callback: msRest.ServiceCallback<Models.CardTypeList>): void;\n  getCardTypes(baseSiteId: string, options?: Models.CommerceWebservicesV2GetCardTypesOptionalParams, callback?: msRest.ServiceCallback<Models.CardTypeList>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.CardTypeList>;\n    if (!callback) {\n      return this.getCardTypesWithHttpOperationResponse(baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.CardTypeList);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getCardTypesWithHttpOperationResponse(baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.CardTypeList;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get a list of catalogs\n   *\n   * Returns all catalogs with versions defined for the base store.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetCatalogsOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.CatalogList} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.CatalogList} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getCatalogs(baseSiteId: string): Promise<Models.CatalogList>;\n  getCatalogs(baseSiteId: string, options: Models.CommerceWebservicesV2GetCatalogsOptionalParams): Promise<Models.CatalogList>;\n  getCatalogs(baseSiteId: string, callback: msRest.ServiceCallback<Models.CatalogList>): void;\n  getCatalogs(baseSiteId: string, options: Models.CommerceWebservicesV2GetCatalogsOptionalParams, callback: msRest.ServiceCallback<Models.CatalogList>): void;\n  getCatalogs(baseSiteId: string, options?: Models.CommerceWebservicesV2GetCatalogsOptionalParams, callback?: msRest.ServiceCallback<Models.CatalogList>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.CatalogList>;\n    if (!callback) {\n      return this.getCatalogsWithHttpOperationResponse(baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.CatalogList);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getCatalogsWithHttpOperationResponse(baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.CatalogList;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get a catalog\n   *\n   * Returns information about a catalog based on its ID, along with the versions defined for the\n   * current base store.\n   *\n   * @param {string} catalogId Catalog identifier\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetCatalogOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.Catalog} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.Catalog} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getCatalog(catalogId: string, baseSiteId: string): Promise<Models.Catalog>;\n  getCatalog(catalogId: string, baseSiteId: string, options: Models.CommerceWebservicesV2GetCatalogOptionalParams): Promise<Models.Catalog>;\n  getCatalog(catalogId: string, baseSiteId: string, callback: msRest.ServiceCallback<Models.Catalog>): void;\n  getCatalog(catalogId: string, baseSiteId: string, options: Models.CommerceWebservicesV2GetCatalogOptionalParams, callback: msRest.ServiceCallback<Models.Catalog>): void;\n  getCatalog(catalogId: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetCatalogOptionalParams, callback?: msRest.ServiceCallback<Models.Catalog>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.Catalog>;\n    if (!callback) {\n      return this.getCatalogWithHttpOperationResponse(catalogId, baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.Catalog);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getCatalogWithHttpOperationResponse(catalogId, baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.Catalog;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get information about catalog version\n   *\n   * Returns information about the catalog version that exists for the current base store.\n   *\n   * @param {string} catalogId Catalog identifier\n   *\n   * @param {string} catalogVersionId Catalog version identifier\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetCatalogVersionOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.CatalogVersion} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.CatalogVersion} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getCatalogVersion(catalogId: string, catalogVersionId: string, baseSiteId: string): Promise<Models.CatalogVersion>;\n  getCatalogVersion(catalogId: string, catalogVersionId: string, baseSiteId: string, options: Models.CommerceWebservicesV2GetCatalogVersionOptionalParams): Promise<Models.CatalogVersion>;\n  getCatalogVersion(catalogId: string, catalogVersionId: string, baseSiteId: string, callback: msRest.ServiceCallback<Models.CatalogVersion>): void;\n  getCatalogVersion(catalogId: string, catalogVersionId: string, baseSiteId: string, options: Models.CommerceWebservicesV2GetCatalogVersionOptionalParams, callback: msRest.ServiceCallback<Models.CatalogVersion>): void;\n  getCatalogVersion(catalogId: string, catalogVersionId: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetCatalogVersionOptionalParams, callback?: msRest.ServiceCallback<Models.CatalogVersion>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.CatalogVersion>;\n    if (!callback) {\n      return this.getCatalogVersionWithHttpOperationResponse(catalogId, catalogVersionId, baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.CatalogVersion);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getCatalogVersionWithHttpOperationResponse(catalogId, catalogVersionId, baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.CatalogVersion;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get information about catagory in a catalog version\n   *\n   * Returns information about a specified category that exists in a catalog version available for\n   * the current base store.\n   *\n   * @param {string} catalogId Catalog identifier\n   *\n   * @param {string} catalogVersionId Catalog version identifier\n   *\n   * @param {string} categoryId Category identifier\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetCategoriesOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.CategoryHierarchy} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.CategoryHierarchy} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getCategories(catalogId: string, catalogVersionId: string, categoryId: string, baseSiteId: string): Promise<Models.CategoryHierarchy>;\n  getCategories(catalogId: string, catalogVersionId: string, categoryId: string, baseSiteId: string, options: Models.CommerceWebservicesV2GetCategoriesOptionalParams): Promise<Models.CategoryHierarchy>;\n  getCategories(catalogId: string, catalogVersionId: string, categoryId: string, baseSiteId: string, callback: msRest.ServiceCallback<Models.CategoryHierarchy>): void;\n  getCategories(catalogId: string, catalogVersionId: string, categoryId: string, baseSiteId: string, options: Models.CommerceWebservicesV2GetCategoriesOptionalParams, callback: msRest.ServiceCallback<Models.CategoryHierarchy>): void;\n  getCategories(catalogId: string, catalogVersionId: string, categoryId: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetCategoriesOptionalParams, callback?: msRest.ServiceCallback<Models.CategoryHierarchy>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.CategoryHierarchy>;\n    if (!callback) {\n      return this.getCategoriesWithHttpOperationResponse(catalogId, catalogVersionId, categoryId, baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.CategoryHierarchy);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getCategoriesWithHttpOperationResponse(catalogId, catalogVersionId, categoryId, baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.CategoryHierarchy;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get components' data by id given in body\n   *\n   * Given a list of component identifiers in body, return cms component data.\n   *\n   * @param {ComponentIDList} componentIdList List of Component identifiers\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetComponentByIdListOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.ListAdaptedComponents} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.ListAdaptedComponents} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getComponentByIdList(componentIdList: Models.ComponentIDList, baseSiteId: string): Promise<Models.ListAdaptedComponents>;\n  getComponentByIdList(componentIdList: Models.ComponentIDList, baseSiteId: string, options: Models.CommerceWebservicesV2GetComponentByIdListOptionalParams): Promise<Models.ListAdaptedComponents>;\n  getComponentByIdList(componentIdList: Models.ComponentIDList, baseSiteId: string, callback: msRest.ServiceCallback<Models.ListAdaptedComponents>): void;\n  getComponentByIdList(componentIdList: Models.ComponentIDList, baseSiteId: string, options: Models.CommerceWebservicesV2GetComponentByIdListOptionalParams, callback: msRest.ServiceCallback<Models.ListAdaptedComponents>): void;\n  getComponentByIdList(componentIdList: Models.ComponentIDList, baseSiteId: string, options?: Models.CommerceWebservicesV2GetComponentByIdListOptionalParams, callback?: msRest.ServiceCallback<Models.ListAdaptedComponents>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.ListAdaptedComponents>;\n    if (!callback) {\n      return this.getComponentByIdListWithHttpOperationResponse(componentIdList, baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.ListAdaptedComponents);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getComponentByIdListWithHttpOperationResponse(componentIdList, baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.ListAdaptedComponents;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get component data\n   *\n   * Given a component identifier, return cms component data.\n   *\n   * @param {string} componentId Component identifier\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetComponentByIdOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {any} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getComponentById(componentId: string, baseSiteId: string): Promise<any>;\n  getComponentById(componentId: string, baseSiteId: string, options: Models.CommerceWebservicesV2GetComponentByIdOptionalParams): Promise<any>;\n  getComponentById(componentId: string, baseSiteId: string, callback: msRest.ServiceCallback<any>): void;\n  getComponentById(componentId: string, baseSiteId: string, options: Models.CommerceWebservicesV2GetComponentByIdOptionalParams, callback: msRest.ServiceCallback<any>): void;\n  getComponentById(componentId: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetComponentByIdOptionalParams, callback?: msRest.ServiceCallback<any>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<any>;\n    if (!callback) {\n      return this.getComponentByIdWithHttpOperationResponse(componentId, baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as any);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getComponentByIdWithHttpOperationResponse(componentId, baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as any;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get page data with list of cms content slots\n   *\n   * Given a page identifier, return the page data with a list of cms content slots, each of which\n   * contains a list of cms component data.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetPageDataOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.CMSPage} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.CMSPage} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getPageData(baseSiteId: string): Promise<Models.CMSPage>;\n  getPageData(baseSiteId: string, options: Models.CommerceWebservicesV2GetPageDataOptionalParams): Promise<Models.CMSPage>;\n  getPageData(baseSiteId: string, callback: msRest.ServiceCallback<Models.CMSPage>): void;\n  getPageData(baseSiteId: string, options: Models.CommerceWebservicesV2GetPageDataOptionalParams, callback: msRest.ServiceCallback<Models.CMSPage>): void;\n  getPageData(baseSiteId: string, options?: Models.CommerceWebservicesV2GetPageDataOptionalParams, callback?: msRest.ServiceCallback<Models.CMSPage>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.CMSPage>;\n    if (!callback) {\n      return this.getPageDataWithHttpOperationResponse(baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.CMSPage);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getPageDataWithHttpOperationResponse(baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.CMSPage;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get a list of available currencies.\n   *\n   * Lists all available currencies (all usable currencies for the current store). If the list of\n   * currencies for a base store is empty, a list of all currencies available in the system is\n   * returned.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetCurrenciesOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.CurrencyList} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.CurrencyList} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getCurrencies(baseSiteId: string): Promise<Models.CurrencyList>;\n  getCurrencies(baseSiteId: string, options: Models.CommerceWebservicesV2GetCurrenciesOptionalParams): Promise<Models.CurrencyList>;\n  getCurrencies(baseSiteId: string, callback: msRest.ServiceCallback<Models.CurrencyList>): void;\n  getCurrencies(baseSiteId: string, options: Models.CommerceWebservicesV2GetCurrenciesOptionalParams, callback: msRest.ServiceCallback<Models.CurrencyList>): void;\n  getCurrencies(baseSiteId: string, options?: Models.CommerceWebservicesV2GetCurrenciesOptionalParams, callback?: msRest.ServiceCallback<Models.CurrencyList>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.CurrencyList>;\n    if (!callback) {\n      return this.getCurrenciesWithHttpOperationResponse(baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.CurrencyList);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getCurrenciesWithHttpOperationResponse(baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.CurrencyList;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get all subgroups of a customergroup.\n   *\n   * Returns all customer groups that are direct subgroups of a customergroup.\n   *\n   * To try out the methods of the Customer Groups controller, you must authorize a user who belongs\n   * to the “customermanagergroup”.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetAllCustomerGroupsOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.UserGroupList} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.UserGroupList} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getAllCustomerGroups(baseSiteId: string): Promise<Models.UserGroupList>;\n  getAllCustomerGroups(baseSiteId: string, options: Models.CommerceWebservicesV2GetAllCustomerGroupsOptionalParams): Promise<Models.UserGroupList>;\n  getAllCustomerGroups(baseSiteId: string, callback: msRest.ServiceCallback<Models.UserGroupList>): void;\n  getAllCustomerGroups(baseSiteId: string, options: Models.CommerceWebservicesV2GetAllCustomerGroupsOptionalParams, callback: msRest.ServiceCallback<Models.UserGroupList>): void;\n  getAllCustomerGroups(baseSiteId: string, options?: Models.CommerceWebservicesV2GetAllCustomerGroupsOptionalParams, callback?: msRest.ServiceCallback<Models.UserGroupList>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.UserGroupList>;\n    if (!callback) {\n      return this.getAllCustomerGroupsWithHttpOperationResponse(baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.UserGroupList);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getAllCustomerGroupsWithHttpOperationResponse(baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.UserGroupList;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Creates a new customer group.\n   *\n   * Creates a new customer group that is a direct subgroup of a customergroup.\n   *\n   * To try out the methods of the Customer Groups controller, you must authorize a user who belongs\n   * to the “customermanagergroup”.\n   *\n   * @param {UserGroup} userGroup User group object with id and name.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  createNewCustomerGroupPrim(userGroup: Models.UserGroup, baseSiteId: string): Promise<void>;\n  createNewCustomerGroupPrim(userGroup: Models.UserGroup, baseSiteId: string, options: msRest.RequestOptionsBase): Promise<void>;\n  createNewCustomerGroupPrim(userGroup: Models.UserGroup, baseSiteId: string, callback: msRest.ServiceCallback<void>): void;\n  createNewCustomerGroupPrim(userGroup: Models.UserGroup, baseSiteId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  createNewCustomerGroupPrim(userGroup: Models.UserGroup, baseSiteId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.createNewCustomerGroupPrimWithHttpOperationResponse(userGroup, baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.createNewCustomerGroupPrimWithHttpOperationResponse(userGroup, baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as void;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get a specific customer group.\n   *\n   * Returns a customer group with a specific groupId.\n   *\n   * To try out the methods of the Customer Groups controller, you must authorize a user who belongs\n   * to the “customermanagergroup”.\n   *\n   * @param {string} groupId Group identifier.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetCustomerGroupOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.UserGroup} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.UserGroup} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getCustomerGroup(groupId: string, baseSiteId: string): Promise<Models.UserGroup>;\n  getCustomerGroup(groupId: string, baseSiteId: string, options: Models.CommerceWebservicesV2GetCustomerGroupOptionalParams): Promise<Models.UserGroup>;\n  getCustomerGroup(groupId: string, baseSiteId: string, callback: msRest.ServiceCallback<Models.UserGroup>): void;\n  getCustomerGroup(groupId: string, baseSiteId: string, options: Models.CommerceWebservicesV2GetCustomerGroupOptionalParams, callback: msRest.ServiceCallback<Models.UserGroup>): void;\n  getCustomerGroup(groupId: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetCustomerGroupOptionalParams, callback?: msRest.ServiceCallback<Models.UserGroup>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.UserGroup>;\n    if (!callback) {\n      return this.getCustomerGroupWithHttpOperationResponse(groupId, baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.UserGroup);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getCustomerGroupWithHttpOperationResponse(groupId, baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.UserGroup;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Sets members for a user group.\n   *\n   * Sets members for a user group. The list of existing members is overwritten with a new one.\n   *\n   * To try out the methods of the Customer Groups controller, you must authorize a user who belongs\n   * to the “customermanagergroup”.\n   *\n   * @param {string} groupId Group identifier.\n   *\n   * @param {MemberList} members List of users to set for customer group.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  setUserListForCustomerGroupPrim(groupId: string, members: Models.MemberList, baseSiteId: string): Promise<void>;\n  setUserListForCustomerGroupPrim(groupId: string, members: Models.MemberList, baseSiteId: string, options: msRest.RequestOptionsBase): Promise<void>;\n  setUserListForCustomerGroupPrim(groupId: string, members: Models.MemberList, baseSiteId: string, callback: msRest.ServiceCallback<void>): void;\n  setUserListForCustomerGroupPrim(groupId: string, members: Models.MemberList, baseSiteId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  setUserListForCustomerGroupPrim(groupId: string, members: Models.MemberList, baseSiteId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.setUserListForCustomerGroupPrimWithHttpOperationResponse(groupId, members, baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.setUserListForCustomerGroupPrimWithHttpOperationResponse(groupId, members, baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as void;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Assigns user(s) to a customer group.\n   *\n   * Assigns user(s) to a customer group.\n   *\n   * To try out the methods of the Customer Groups controller, you must authorize a user who belongs\n   * to the “customermanagergroup”.\n   *\n   * @param {string} groupId Group identifier.\n   *\n   * @param {MemberList} members List of users to assign to customer group.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  assignUserToCustomerGroupPrim(groupId: string, members: Models.MemberList, baseSiteId: string): Promise<void>;\n  assignUserToCustomerGroupPrim(groupId: string, members: Models.MemberList, baseSiteId: string, options: msRest.RequestOptionsBase): Promise<void>;\n  assignUserToCustomerGroupPrim(groupId: string, members: Models.MemberList, baseSiteId: string, callback: msRest.ServiceCallback<void>): void;\n  assignUserToCustomerGroupPrim(groupId: string, members: Models.MemberList, baseSiteId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  assignUserToCustomerGroupPrim(groupId: string, members: Models.MemberList, baseSiteId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.assignUserToCustomerGroupPrimWithHttpOperationResponse(groupId, members, baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.assignUserToCustomerGroupPrimWithHttpOperationResponse(groupId, members, baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as void;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Delete a user from a customer group.\n   *\n   * Removes user from a customer group.\n   *\n   * To try out the methods of the Customer Groups controller, you must authorize a user who belongs\n   * to the “customermanagergroup”.\n   *\n   * @param {string} groupId Group identifier.\n   *\n   * @param {string} userId User identifier.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  removeUsersFromCustomerGroup(groupId: string, userId: string, baseSiteId: string): Promise<void>;\n  removeUsersFromCustomerGroup(groupId: string, userId: string, baseSiteId: string, options: msRest.RequestOptionsBase): Promise<void>;\n  removeUsersFromCustomerGroup(groupId: string, userId: string, baseSiteId: string, callback: msRest.ServiceCallback<void>): void;\n  removeUsersFromCustomerGroup(groupId: string, userId: string, baseSiteId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  removeUsersFromCustomerGroup(groupId: string, userId: string, baseSiteId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.removeUsersFromCustomerGroupWithHttpOperationResponse(groupId, userId, baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.removeUsersFromCustomerGroupWithHttpOperationResponse(groupId, userId, baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as void;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get a list of supported countries.\n   *\n   * Lists all supported delivery countries for the current store. The list is sorted alphabetically.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetDeliveryCountriesOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.CountryList} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.CountryList} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getDeliveryCountries(baseSiteId: string): Promise<Models.CountryList>;\n  getDeliveryCountries(baseSiteId: string, options: Models.CommerceWebservicesV2GetDeliveryCountriesOptionalParams): Promise<Models.CountryList>;\n  getDeliveryCountries(baseSiteId: string, callback: msRest.ServiceCallback<Models.CountryList>): void;\n  getDeliveryCountries(baseSiteId: string, options: Models.CommerceWebservicesV2GetDeliveryCountriesOptionalParams, callback: msRest.ServiceCallback<Models.CountryList>): void;\n  getDeliveryCountries(baseSiteId: string, options?: Models.CommerceWebservicesV2GetDeliveryCountriesOptionalParams, callback?: msRest.ServiceCallback<Models.CountryList>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.CountryList>;\n    if (!callback) {\n      return this.getDeliveryCountriesWithHttpOperationResponse(baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.CountryList);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getDeliveryCountriesWithHttpOperationResponse(baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.CountryList;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get a list of product exports.\n   *\n   * Used for product export. Depending on the timestamp parameter, it can return all products or\n   * only products modified after the given time.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2ExportProductsOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.ProductList} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.ProductList} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  exportProducts(baseSiteId: string): Promise<Models.ProductList>;\n  exportProducts(baseSiteId: string, options: Models.CommerceWebservicesV2ExportProductsOptionalParams): Promise<Models.ProductList>;\n  exportProducts(baseSiteId: string, callback: msRest.ServiceCallback<Models.ProductList>): void;\n  exportProducts(baseSiteId: string, options: Models.CommerceWebservicesV2ExportProductsOptionalParams, callback: msRest.ServiceCallback<Models.ProductList>): void;\n  exportProducts(baseSiteId: string, options?: Models.CommerceWebservicesV2ExportProductsOptionalParams, callback?: msRest.ServiceCallback<Models.ProductList>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.ProductList>;\n    if (!callback) {\n      return this.exportProductsWithHttpOperationResponse(baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.ProductList);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.exportProductsWithHttpOperationResponse(baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.ProductList;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get a list of orders with status updates\n   *\n   * Returns the orders that have changed status. Returns only the elements from the current baseSite\n   * that have been updated after the provided timestamp.\n   *\n   * @param {string} timestamp Only items newer than the given parameter are retrieved. This\n   * parameter should be in ISO-8601 format (for example, 2018-01-09T16:28:45+0000).\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2OrderStatusFeedOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.OrderStatusUpdateElementList} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.OrderStatusUpdateElementList} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  orderStatusFeed(timestamp: string, baseSiteId: string): Promise<Models.OrderStatusUpdateElementList>;\n  orderStatusFeed(timestamp: string, baseSiteId: string, options: Models.CommerceWebservicesV2OrderStatusFeedOptionalParams): Promise<Models.OrderStatusUpdateElementList>;\n  orderStatusFeed(timestamp: string, baseSiteId: string, callback: msRest.ServiceCallback<Models.OrderStatusUpdateElementList>): void;\n  orderStatusFeed(timestamp: string, baseSiteId: string, options: Models.CommerceWebservicesV2OrderStatusFeedOptionalParams, callback: msRest.ServiceCallback<Models.OrderStatusUpdateElementList>): void;\n  orderStatusFeed(timestamp: string, baseSiteId: string, options?: Models.CommerceWebservicesV2OrderStatusFeedOptionalParams, callback?: msRest.ServiceCallback<Models.OrderStatusUpdateElementList>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.OrderStatusUpdateElementList>;\n    if (!callback) {\n      return this.orderStatusFeedWithHttpOperationResponse(timestamp, baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.OrderStatusUpdateElementList);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.orderStatusFeedWithHttpOperationResponse(timestamp, baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.OrderStatusUpdateElementList;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Generates a token to restore a customer's forgotten password.\n   *\n   * Generates a token to restore a customer's forgotten password.\n   *\n   * @param {string} userId Customer's user id. Customer user id is case insensitive.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  restorePassword(userId: string, baseSiteId: string): Promise<void>;\n  restorePassword(userId: string, baseSiteId: string, options: msRest.RequestOptionsBase): Promise<void>;\n  restorePassword(userId: string, baseSiteId: string, callback: msRest.ServiceCallback<void>): void;\n  restorePassword(userId: string, baseSiteId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  restorePassword(userId: string, baseSiteId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.restorePasswordWithHttpOperationResponse(userId, baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.restorePasswordWithHttpOperationResponse(userId, baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as void;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get a list of available languages.\n   *\n   * Lists all available languages (all languages used for a particular store). If the list of\n   * languages for a base store is empty, a list of all languages available in the system will be\n   * returned.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetLanguagesOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.LanguageList} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.LanguageList} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getLanguages(baseSiteId: string): Promise<Models.LanguageList>;\n  getLanguages(baseSiteId: string, options: Models.CommerceWebservicesV2GetLanguagesOptionalParams): Promise<Models.LanguageList>;\n  getLanguages(baseSiteId: string, callback: msRest.ServiceCallback<Models.LanguageList>): void;\n  getLanguages(baseSiteId: string, options: Models.CommerceWebservicesV2GetLanguagesOptionalParams, callback: msRest.ServiceCallback<Models.LanguageList>): void;\n  getLanguages(baseSiteId: string, options?: Models.CommerceWebservicesV2GetLanguagesOptionalParams, callback?: msRest.ServiceCallback<Models.LanguageList>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.LanguageList>;\n    if (!callback) {\n      return this.getLanguagesWithHttpOperationResponse(baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.LanguageList);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getLanguagesWithHttpOperationResponse(baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.LanguageList;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get a order\n   *\n   * Returns details of a specific order based on the order GUID (Globally Unique Identifier) or the\n   * order CODE. The response contains detailed order information.\n   *\n   * @param {string} code Order GUID (Globally Unique Identifier) or order CODE\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetOrderOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.Order} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.Order} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getOrder(code: string, baseSiteId: string): Promise<Models.Order>;\n  getOrder(code: string, baseSiteId: string, options: Models.CommerceWebservicesV2GetOrderOptionalParams): Promise<Models.Order>;\n  getOrder(code: string, baseSiteId: string, callback: msRest.ServiceCallback<Models.Order>): void;\n  getOrder(code: string, baseSiteId: string, options: Models.CommerceWebservicesV2GetOrderOptionalParams, callback: msRest.ServiceCallback<Models.Order>): void;\n  getOrder(code: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetOrderOptionalParams, callback?: msRest.ServiceCallback<Models.Order>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.Order>;\n    if (!callback) {\n      return this.getOrderWithHttpOperationResponse(code, baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.Order);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getOrderWithHttpOperationResponse(code, baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.Order;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get products added to the express update feed\n   *\n   * Returns products added to the express update feed. Returns only elements updated after the\n   * provided timestamp. The queue is cleared using a defined cronjob.\n   *\n   * @param {string} timestamp Only items newer than the given parameter are retrieved from the\n   * queue. This parameter should be in ISO-8601 format.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2ExpressUpdateOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.ProductExpressUpdateElementList} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.ProductExpressUpdateElementList} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  expressUpdate(timestamp: string, baseSiteId: string): Promise<Models.ProductExpressUpdateElementList>;\n  expressUpdate(timestamp: string, baseSiteId: string, options: Models.CommerceWebservicesV2ExpressUpdateOptionalParams): Promise<Models.ProductExpressUpdateElementList>;\n  expressUpdate(timestamp: string, baseSiteId: string, callback: msRest.ServiceCallback<Models.ProductExpressUpdateElementList>): void;\n  expressUpdate(timestamp: string, baseSiteId: string, options: Models.CommerceWebservicesV2ExpressUpdateOptionalParams, callback: msRest.ServiceCallback<Models.ProductExpressUpdateElementList>): void;\n  expressUpdate(timestamp: string, baseSiteId: string, options?: Models.CommerceWebservicesV2ExpressUpdateOptionalParams, callback?: msRest.ServiceCallback<Models.ProductExpressUpdateElementList>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.ProductExpressUpdateElementList>;\n    if (!callback) {\n      return this.expressUpdateWithHttpOperationResponse(timestamp, baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.ProductExpressUpdateElementList);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.expressUpdateWithHttpOperationResponse(timestamp, baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.ProductExpressUpdateElementList;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get a list of products and additional data\n   *\n   * Returns a list of products and additional data, such as available facets, available sorting, and\n   * pagination options. It can also include spelling suggestions. To make spelling suggestions work,\n   * you need to make sure that \"enableSpellCheck\" on the SearchQuery is set to \"true\" (by default,\n   * it should already be set to \"true\"). You also need to have indexed properties configured to be\n   * used for spellchecking.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2SearchProductsOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.ProductSearchPage} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.ProductSearchPage} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  searchProducts(baseSiteId: string): Promise<Models.ProductSearchPage>;\n  searchProducts(baseSiteId: string, options: Models.CommerceWebservicesV2SearchProductsOptionalParams): Promise<Models.ProductSearchPage>;\n  searchProducts(baseSiteId: string, callback: msRest.ServiceCallback<Models.ProductSearchPage>): void;\n  searchProducts(baseSiteId: string, options: Models.CommerceWebservicesV2SearchProductsOptionalParams, callback: msRest.ServiceCallback<Models.ProductSearchPage>): void;\n  searchProducts(baseSiteId: string, options?: Models.CommerceWebservicesV2SearchProductsOptionalParams, callback?: msRest.ServiceCallback<Models.ProductSearchPage>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.ProductSearchPage>;\n    if (!callback) {\n      return this.searchProductsWithHttpOperationResponse(baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.ProductSearchPage);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.searchProductsWithHttpOperationResponse(baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.ProductSearchPage;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get a header with total number of products\n   *\n   * In the response header, the \"x-total-count\" indicates the total number of products satisfying a\n   * query.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2CountSearchProductsOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  countSearchProducts(baseSiteId: string): Promise<void>;\n  countSearchProducts(baseSiteId: string, options: Models.CommerceWebservicesV2CountSearchProductsOptionalParams): Promise<void>;\n  countSearchProducts(baseSiteId: string, callback: msRest.ServiceCallback<void>): void;\n  countSearchProducts(baseSiteId: string, options: Models.CommerceWebservicesV2CountSearchProductsOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  countSearchProducts(baseSiteId: string, options?: Models.CommerceWebservicesV2CountSearchProductsOptionalParams, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.countSearchProductsWithHttpOperationResponse(baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.countSearchProductsWithHttpOperationResponse(baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as void;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get a list of available suggestions\n   *\n   * Returns a list of all available suggestions related to a given term and limits the results to a\n   * specific value of the max parameter.\n   *\n   * @param {string} term Specified term\n   *\n   * @param {number} max Specifies the limit of results.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetSuggestionsOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.SuggestionList} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.SuggestionList} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getSuggestions(term: string, max: number, baseSiteId: string): Promise<Models.SuggestionList>;\n  getSuggestions(term: string, max: number, baseSiteId: string, options: Models.CommerceWebservicesV2GetSuggestionsOptionalParams): Promise<Models.SuggestionList>;\n  getSuggestions(term: string, max: number, baseSiteId: string, callback: msRest.ServiceCallback<Models.SuggestionList>): void;\n  getSuggestions(term: string, max: number, baseSiteId: string, options: Models.CommerceWebservicesV2GetSuggestionsOptionalParams, callback: msRest.ServiceCallback<Models.SuggestionList>): void;\n  getSuggestions(term: string, max: number, baseSiteId: string, options?: Models.CommerceWebservicesV2GetSuggestionsOptionalParams, callback?: msRest.ServiceCallback<Models.SuggestionList>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.SuggestionList>;\n    if (!callback) {\n      return this.getSuggestionsWithHttpOperationResponse(term, max, baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.SuggestionList);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getSuggestionsWithHttpOperationResponse(term, max, baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.SuggestionList;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get product details\n   *\n   * Returns details of a single product according to a product code.\n   *\n   * @param {string} productCode Product identifier\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetProductByCodeOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.Product} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.Product} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getProductByCode(productCode: string, baseSiteId: string): Promise<Models.Product>;\n  getProductByCode(productCode: string, baseSiteId: string, options: Models.CommerceWebservicesV2GetProductByCodeOptionalParams): Promise<Models.Product>;\n  getProductByCode(productCode: string, baseSiteId: string, callback: msRest.ServiceCallback<Models.Product>): void;\n  getProductByCode(productCode: string, baseSiteId: string, options: Models.CommerceWebservicesV2GetProductByCodeOptionalParams, callback: msRest.ServiceCallback<Models.Product>): void;\n  getProductByCode(productCode: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetProductByCodeOptionalParams, callback?: msRest.ServiceCallback<Models.Product>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.Product>;\n    if (!callback) {\n      return this.getProductByCodeWithHttpOperationResponse(productCode, baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.Product);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getProductByCodeWithHttpOperationResponse(productCode, baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.Product;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get a product reference\n   *\n   * Returns references for a product with a given product code. Reference type specifies which\n   * references to return.\n   *\n   * @param {string} productCode Product identifier\n   *\n   * @param {string} referenceType Reference type according to enum ProductReferenceTypeEnum\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2ExportProductReferencesOptionalParams} [options] Optional\n   * Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.ProductReferenceList} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.ProductReferenceList} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  exportProductReferences(productCode: string, referenceType: string, baseSiteId: string): Promise<Models.ProductReferenceList>;\n  exportProductReferences(productCode: string, referenceType: string, baseSiteId: string, options: Models.CommerceWebservicesV2ExportProductReferencesOptionalParams): Promise<Models.ProductReferenceList>;\n  exportProductReferences(productCode: string, referenceType: string, baseSiteId: string, callback: msRest.ServiceCallback<Models.ProductReferenceList>): void;\n  exportProductReferences(productCode: string, referenceType: string, baseSiteId: string, options: Models.CommerceWebservicesV2ExportProductReferencesOptionalParams, callback: msRest.ServiceCallback<Models.ProductReferenceList>): void;\n  exportProductReferences(productCode: string, referenceType: string, baseSiteId: string, options?: Models.CommerceWebservicesV2ExportProductReferencesOptionalParams, callback?: msRest.ServiceCallback<Models.ProductReferenceList>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.ProductReferenceList>;\n    if (!callback) {\n      return this.exportProductReferencesWithHttpOperationResponse(productCode, referenceType, baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.ProductReferenceList);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.exportProductReferencesWithHttpOperationResponse(productCode, referenceType, baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.ProductReferenceList;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get reviews for a product\n   *\n   * Returns the reviews for a product with a given product code.\n   *\n   * @param {string} productCode Product identifier\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetProductReviewsOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.ReviewList} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.ReviewList} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getProductReviews(productCode: string, baseSiteId: string): Promise<Models.ReviewList>;\n  getProductReviews(productCode: string, baseSiteId: string, options: Models.CommerceWebservicesV2GetProductReviewsOptionalParams): Promise<Models.ReviewList>;\n  getProductReviews(productCode: string, baseSiteId: string, callback: msRest.ServiceCallback<Models.ReviewList>): void;\n  getProductReviews(productCode: string, baseSiteId: string, options: Models.CommerceWebservicesV2GetProductReviewsOptionalParams, callback: msRest.ServiceCallback<Models.ReviewList>): void;\n  getProductReviews(productCode: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetProductReviewsOptionalParams, callback?: msRest.ServiceCallback<Models.ReviewList>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.ReviewList>;\n    if (!callback) {\n      return this.getProductReviewsWithHttpOperationResponse(productCode, baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.ReviewList);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getProductReviewsWithHttpOperationResponse(productCode, baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.ReviewList;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Creates a new customer review as an anonymous user\n   *\n   * Creates a new customer review as an anonymous user.\n   *\n   * @param {string} productCode Product identifier\n   *\n   * @param {Review} review Object contains review details like : rating, alias, headline, comment\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2CreateReviewPrimOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.Review} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.Review} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  createReviewPrim(productCode: string, review: Models.Review, baseSiteId: string): Promise<Models.Review>;\n  createReviewPrim(productCode: string, review: Models.Review, baseSiteId: string, options: Models.CommerceWebservicesV2CreateReviewPrimOptionalParams): Promise<Models.Review>;\n  createReviewPrim(productCode: string, review: Models.Review, baseSiteId: string, callback: msRest.ServiceCallback<Models.Review>): void;\n  createReviewPrim(productCode: string, review: Models.Review, baseSiteId: string, options: Models.CommerceWebservicesV2CreateReviewPrimOptionalParams, callback: msRest.ServiceCallback<Models.Review>): void;\n  createReviewPrim(productCode: string, review: Models.Review, baseSiteId: string, options?: Models.CommerceWebservicesV2CreateReviewPrimOptionalParams, callback?: msRest.ServiceCallback<Models.Review>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.Review>;\n    if (!callback) {\n      return this.createReviewPrimWithHttpOperationResponse(productCode, review, baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.Review);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.createReviewPrimWithHttpOperationResponse(productCode, review, baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.Review;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get a product's stock level\n   *\n   * Returns a product's stock levels sorted by distance from the specified location, which is\n   * provided using the free-text \"location\" parameter, or by using the longitude and latitude\n   * parameters. The following two sets of parameters are available: location (required), currentPage\n   * (optional), pageSize (optional); or longitude (required), latitude (required), currentPage\n   * (optional), pageSize(optional).\n   *\n   * @param {string} productCode Product identifier\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2SearchProductStockByLocationOptionalParams} [options] Optional\n   * Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.StoreFinderStockSearchPage} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.StoreFinderStockSearchPage} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  searchProductStockByLocation(productCode: string, baseSiteId: string): Promise<Models.StoreFinderStockSearchPage>;\n  searchProductStockByLocation(productCode: string, baseSiteId: string, options: Models.CommerceWebservicesV2SearchProductStockByLocationOptionalParams): Promise<Models.StoreFinderStockSearchPage>;\n  searchProductStockByLocation(productCode: string, baseSiteId: string, callback: msRest.ServiceCallback<Models.StoreFinderStockSearchPage>): void;\n  searchProductStockByLocation(productCode: string, baseSiteId: string, options: Models.CommerceWebservicesV2SearchProductStockByLocationOptionalParams, callback: msRest.ServiceCallback<Models.StoreFinderStockSearchPage>): void;\n  searchProductStockByLocation(productCode: string, baseSiteId: string, options?: Models.CommerceWebservicesV2SearchProductStockByLocationOptionalParams, callback?: msRest.ServiceCallback<Models.StoreFinderStockSearchPage>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.StoreFinderStockSearchPage>;\n    if (!callback) {\n      return this.searchProductStockByLocationWithHttpOperationResponse(productCode, baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.StoreFinderStockSearchPage);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.searchProductStockByLocationWithHttpOperationResponse(productCode, baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.StoreFinderStockSearchPage;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get header with a total number of product's stock levels\n   *\n   * In the response header, the \"x-total-count\" indicates the total number of a product's stock\n   * levels. The following two sets of parameters are available: location (required); or longitude\n   * (required), and latitude (required).\n   *\n   * @param {string} productCode Product identifier\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2CountSearchProductStockByLocationOptionalParams} [options] Optional\n   * Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  countSearchProductStockByLocation(productCode: string, baseSiteId: string): Promise<void>;\n  countSearchProductStockByLocation(productCode: string, baseSiteId: string, options: Models.CommerceWebservicesV2CountSearchProductStockByLocationOptionalParams): Promise<void>;\n  countSearchProductStockByLocation(productCode: string, baseSiteId: string, callback: msRest.ServiceCallback<void>): void;\n  countSearchProductStockByLocation(productCode: string, baseSiteId: string, options: Models.CommerceWebservicesV2CountSearchProductStockByLocationOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  countSearchProductStockByLocation(productCode: string, baseSiteId: string, options?: Models.CommerceWebservicesV2CountSearchProductStockByLocationOptionalParams, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.countSearchProductStockByLocationWithHttpOperationResponse(productCode, baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.countSearchProductStockByLocationWithHttpOperationResponse(productCode, baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as void;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get a product's stock level for a store\n   *\n   * Returns a product's stock level for a particular store (in other words, for a particular point\n   * of sale).\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} productCode Product identifier\n   *\n   * @param {string} storeName Store identifier\n   *\n   * @param {CommerceWebservicesV2GetStockDataOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.Stock} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.Stock} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getStockData(baseSiteId: string, productCode: string, storeName: string): Promise<Models.Stock>;\n  getStockData(baseSiteId: string, productCode: string, storeName: string, options: Models.CommerceWebservicesV2GetStockDataOptionalParams): Promise<Models.Stock>;\n  getStockData(baseSiteId: string, productCode: string, storeName: string, callback: msRest.ServiceCallback<Models.Stock>): void;\n  getStockData(baseSiteId: string, productCode: string, storeName: string, options: Models.CommerceWebservicesV2GetStockDataOptionalParams, callback: msRest.ServiceCallback<Models.Stock>): void;\n  getStockData(baseSiteId: string, productCode: string, storeName: string, options?: Models.CommerceWebservicesV2GetStockDataOptionalParams, callback?: msRest.ServiceCallback<Models.Stock>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.Stock>;\n    if (!callback) {\n      return this.getStockDataWithHttpOperationResponse(baseSiteId, productCode, storeName, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.Stock);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getStockDataWithHttpOperationResponse(baseSiteId, productCode, storeName, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.Stock;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get a list of promotions\n   *\n   * Returns promotions defined for a current base site. Requests pertaining to promotions have been\n   * developed for the previous version of promotions and vouchers and therefore some of them are\n   * currently not compatible with the new promotion engine.\n   *\n   * @param {Type} type Defines what type of promotions should be returned. Values supported for that\n   * parameter are: <ul><li>all: All available promotions are returned</li><li>product: Only product\n   * promotions are returned</li><li>order: Only order promotions are returned</li></ul>. Possible\n   * values include: 'all', 'product', 'order'\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetPromotionsPrimOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.PromotionList} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.PromotionList} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getPromotionsPrim(type: Models.Type, baseSiteId: string): Promise<Models.PromotionList>;\n  getPromotionsPrim(type: Models.Type, baseSiteId: string, options: Models.CommerceWebservicesV2GetPromotionsPrimOptionalParams): Promise<Models.PromotionList>;\n  getPromotionsPrim(type: Models.Type, baseSiteId: string, callback: msRest.ServiceCallback<Models.PromotionList>): void;\n  getPromotionsPrim(type: Models.Type, baseSiteId: string, options: Models.CommerceWebservicesV2GetPromotionsPrimOptionalParams, callback: msRest.ServiceCallback<Models.PromotionList>): void;\n  getPromotionsPrim(type: Models.Type, baseSiteId: string, options?: Models.CommerceWebservicesV2GetPromotionsPrimOptionalParams, callback?: msRest.ServiceCallback<Models.PromotionList>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.PromotionList>;\n    if (!callback) {\n      return this.getPromotionsPrimWithHttpOperationResponse(type, baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.PromotionList);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getPromotionsPrimWithHttpOperationResponse(type, baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.PromotionList;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get a promotion based on code\n   *\n   * Returns details of a single promotion specified by a promotion code. Requests pertaining to\n   * promotions have been developed for the previous version of promotions and vouchers and therefore\n   * some of them are currently not compatible with the new promotion engine.\n   *\n   * @param {string} code Promotion identifier (code)\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetPromotionByCodeOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.Promotion} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.Promotion} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getPromotionByCode(code: string, baseSiteId: string): Promise<Models.Promotion>;\n  getPromotionByCode(code: string, baseSiteId: string, options: Models.CommerceWebservicesV2GetPromotionByCodeOptionalParams): Promise<Models.Promotion>;\n  getPromotionByCode(code: string, baseSiteId: string, callback: msRest.ServiceCallback<Models.Promotion>): void;\n  getPromotionByCode(code: string, baseSiteId: string, options: Models.CommerceWebservicesV2GetPromotionByCodeOptionalParams, callback: msRest.ServiceCallback<Models.Promotion>): void;\n  getPromotionByCode(code: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetPromotionByCodeOptionalParams, callback?: msRest.ServiceCallback<Models.Promotion>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.Promotion>;\n    if (!callback) {\n      return this.getPromotionByCodeWithHttpOperationResponse(code, baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.Promotion);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getPromotionByCodeWithHttpOperationResponse(code, baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.Promotion;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get a list of store locations\n   *\n   * Lists all store locations that are near the location specified in a query or based on latitude\n   * and longitude.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2LocationSearchOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.StoreFinderSearchPage} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.StoreFinderSearchPage} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  locationSearch(baseSiteId: string): Promise<Models.StoreFinderSearchPage>;\n  locationSearch(baseSiteId: string, options: Models.CommerceWebservicesV2LocationSearchOptionalParams): Promise<Models.StoreFinderSearchPage>;\n  locationSearch(baseSiteId: string, callback: msRest.ServiceCallback<Models.StoreFinderSearchPage>): void;\n  locationSearch(baseSiteId: string, options: Models.CommerceWebservicesV2LocationSearchOptionalParams, callback: msRest.ServiceCallback<Models.StoreFinderSearchPage>): void;\n  locationSearch(baseSiteId: string, options?: Models.CommerceWebservicesV2LocationSearchOptionalParams, callback?: msRest.ServiceCallback<Models.StoreFinderSearchPage>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.StoreFinderSearchPage>;\n    if (!callback) {\n      return this.locationSearchWithHttpOperationResponse(baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.StoreFinderSearchPage);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.locationSearchWithHttpOperationResponse(baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.StoreFinderSearchPage;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get a header with the number of store locations\n   *\n   * In the response header, the \"x-total-count\" indicates the number of all store locations that are\n   * near the location specified in a query, or based on latitude and longitude.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2CountLocationSearchOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  countLocationSearch(baseSiteId: string): Promise<void>;\n  countLocationSearch(baseSiteId: string, options: Models.CommerceWebservicesV2CountLocationSearchOptionalParams): Promise<void>;\n  countLocationSearch(baseSiteId: string, callback: msRest.ServiceCallback<void>): void;\n  countLocationSearch(baseSiteId: string, options: Models.CommerceWebservicesV2CountLocationSearchOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  countLocationSearch(baseSiteId: string, options?: Models.CommerceWebservicesV2CountLocationSearchOptionalParams, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.countLocationSearchWithHttpOperationResponse(baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.countLocationSearchWithHttpOperationResponse(baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as void;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get a store location\n   *\n   * Returns store location based on its unique name.\n   *\n   * @param {string} storeId Store identifier (currently store name)\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2LocationDetailsOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.PointOfService} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.PointOfService} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  locationDetails(storeId: string, baseSiteId: string): Promise<Models.PointOfService>;\n  locationDetails(storeId: string, baseSiteId: string, options: Models.CommerceWebservicesV2LocationDetailsOptionalParams): Promise<Models.PointOfService>;\n  locationDetails(storeId: string, baseSiteId: string, callback: msRest.ServiceCallback<Models.PointOfService>): void;\n  locationDetails(storeId: string, baseSiteId: string, options: Models.CommerceWebservicesV2LocationDetailsOptionalParams, callback: msRest.ServiceCallback<Models.PointOfService>): void;\n  locationDetails(storeId: string, baseSiteId: string, options?: Models.CommerceWebservicesV2LocationDetailsOptionalParams, callback?: msRest.ServiceCallback<Models.PointOfService>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.PointOfService>;\n    if (!callback) {\n      return this.locationDetailsWithHttpOperationResponse(storeId, baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.PointOfService);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.locationDetailsWithHttpOperationResponse(storeId, baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.PointOfService;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get a list of all localized titles.\n   *\n   * Lists all localized titles.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetTitlesOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.TitleList} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.TitleList} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getTitles(baseSiteId: string): Promise<Models.TitleList>;\n  getTitles(baseSiteId: string, options: Models.CommerceWebservicesV2GetTitlesOptionalParams): Promise<Models.TitleList>;\n  getTitles(baseSiteId: string, callback: msRest.ServiceCallback<Models.TitleList>): void;\n  getTitles(baseSiteId: string, options: Models.CommerceWebservicesV2GetTitlesOptionalParams, callback: msRest.ServiceCallback<Models.TitleList>): void;\n  getTitles(baseSiteId: string, options?: Models.CommerceWebservicesV2GetTitlesOptionalParams, callback?: msRest.ServiceCallback<Models.TitleList>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.TitleList>;\n    if (!callback) {\n      return this.getTitlesWithHttpOperationResponse(baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.TitleList);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getTitlesWithHttpOperationResponse(baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.TitleList;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary  Registers a customer\n   *\n   * Registers a customer. There are two options for registering a customer. The first option\n   * requires the following parameters: login, password, firstName, lastName, titleCode. The second\n   * option converts a guest to a customer. In this case, the required parameters are: guid,\n   * password.\n   *\n   * @param {UserSignUp} user User's object.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2RegisterUserPrimOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.User} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.User} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  registerUserPrim(user: Models.UserSignUp, baseSiteId: string): Promise<Models.User>;\n  registerUserPrim(user: Models.UserSignUp, baseSiteId: string, options: Models.CommerceWebservicesV2RegisterUserPrimOptionalParams): Promise<Models.User>;\n  registerUserPrim(user: Models.UserSignUp, baseSiteId: string, callback: msRest.ServiceCallback<Models.User>): void;\n  registerUserPrim(user: Models.UserSignUp, baseSiteId: string, options: Models.CommerceWebservicesV2RegisterUserPrimOptionalParams, callback: msRest.ServiceCallback<Models.User>): void;\n  registerUserPrim(user: Models.UserSignUp, baseSiteId: string, options?: Models.CommerceWebservicesV2RegisterUserPrimOptionalParams, callback?: msRest.ServiceCallback<Models.User>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.User>;\n    if (!callback) {\n      return this.registerUserPrimWithHttpOperationResponse(user, baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.User);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.registerUserPrimWithHttpOperationResponse(user, baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.User;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get customer profile\n   *\n   * Returns customer profile.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2GetUserOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.User} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.User} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getUser(baseSiteId: string, userId: string): Promise<Models.User>;\n  getUser(baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2GetUserOptionalParams): Promise<Models.User>;\n  getUser(baseSiteId: string, userId: string, callback: msRest.ServiceCallback<Models.User>): void;\n  getUser(baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2GetUserOptionalParams, callback: msRest.ServiceCallback<Models.User>): void;\n  getUser(baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetUserOptionalParams, callback?: msRest.ServiceCallback<Models.User>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.User>;\n    if (!callback) {\n      return this.getUserWithHttpOperationResponse(baseSiteId, userId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.User);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getUserWithHttpOperationResponse(baseSiteId, userId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.User;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Updates customer profile\n   *\n   * Updates customer profile. Attributes not provided in the request body will be defined again (set\n   * to null or default).\n   *\n   * @param {User} user User's object\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  putUserPrim(user: Models.User, baseSiteId: string, userId: string): Promise<void>;\n  putUserPrim(user: Models.User, baseSiteId: string, userId: string, options: msRest.RequestOptionsBase): Promise<void>;\n  putUserPrim(user: Models.User, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<void>): void;\n  putUserPrim(user: Models.User, baseSiteId: string, userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  putUserPrim(user: Models.User, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.putUserPrimWithHttpOperationResponse(user, baseSiteId, userId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.putUserPrimWithHttpOperationResponse(user, baseSiteId, userId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as void;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Delete customer profile\n   *\n   * Removes customer profile.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  deactivateUser(baseSiteId: string, userId: string): Promise<void>;\n  deactivateUser(baseSiteId: string, userId: string, options: msRest.RequestOptionsBase): Promise<void>;\n  deactivateUser(baseSiteId: string, userId: string, callback: msRest.ServiceCallback<void>): void;\n  deactivateUser(baseSiteId: string, userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  deactivateUser(baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.deactivateUserWithHttpOperationResponse(baseSiteId, userId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.deactivateUserWithHttpOperationResponse(baseSiteId, userId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as void;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Updates customer profile\n   *\n   * Updates customer profile. Only attributes provided in the request body will be changed.\n   *\n   * @param {User} user User's object.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  updateUserPrim(user: Models.User, baseSiteId: string, userId: string): Promise<void>;\n  updateUserPrim(user: Models.User, baseSiteId: string, userId: string, options: msRest.RequestOptionsBase): Promise<void>;\n  updateUserPrim(user: Models.User, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<void>): void;\n  updateUserPrim(user: Models.User, baseSiteId: string, userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  updateUserPrim(user: Models.User, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.updateUserPrimWithHttpOperationResponse(user, baseSiteId, userId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.updateUserPrimWithHttpOperationResponse(user, baseSiteId, userId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as void;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get customer's addresses\n   *\n   * Returns customer's addresses.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2GetAddressesOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.AddressList} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.AddressList} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getAddresses(baseSiteId: string, userId: string): Promise<Models.AddressList>;\n  getAddresses(baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2GetAddressesOptionalParams): Promise<Models.AddressList>;\n  getAddresses(baseSiteId: string, userId: string, callback: msRest.ServiceCallback<Models.AddressList>): void;\n  getAddresses(baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2GetAddressesOptionalParams, callback: msRest.ServiceCallback<Models.AddressList>): void;\n  getAddresses(baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetAddressesOptionalParams, callback?: msRest.ServiceCallback<Models.AddressList>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.AddressList>;\n    if (!callback) {\n      return this.getAddressesWithHttpOperationResponse(baseSiteId, userId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.AddressList);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getAddressesWithHttpOperationResponse(baseSiteId, userId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.AddressList;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Creates a new address.\n   *\n   * Creates a new address.\n   *\n   * @param {Address} address Address object.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2CreateAddressPrimOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.Address} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.Address} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  createAddressPrim(address: Models.Address, baseSiteId: string, userId: string): Promise<Models.Address>;\n  createAddressPrim(address: Models.Address, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2CreateAddressPrimOptionalParams): Promise<Models.Address>;\n  createAddressPrim(address: Models.Address, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<Models.Address>): void;\n  createAddressPrim(address: Models.Address, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2CreateAddressPrimOptionalParams, callback: msRest.ServiceCallback<Models.Address>): void;\n  createAddressPrim(address: Models.Address, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2CreateAddressPrimOptionalParams, callback?: msRest.ServiceCallback<Models.Address>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.Address>;\n    if (!callback) {\n      return this.createAddressPrimWithHttpOperationResponse(address, baseSiteId, userId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.Address);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.createAddressPrimWithHttpOperationResponse(address, baseSiteId, userId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.Address;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Verifies address\n   *\n   * Verifies address.\n   *\n   * @param {Address} address Address object.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2VerifyAddressPrimOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.AddressValidation} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.AddressValidation} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  verifyAddressPrim(address: Models.Address, baseSiteId: string, userId: string): Promise<Models.AddressValidation>;\n  verifyAddressPrim(address: Models.Address, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2VerifyAddressPrimOptionalParams): Promise<Models.AddressValidation>;\n  verifyAddressPrim(address: Models.Address, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<Models.AddressValidation>): void;\n  verifyAddressPrim(address: Models.Address, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2VerifyAddressPrimOptionalParams, callback: msRest.ServiceCallback<Models.AddressValidation>): void;\n  verifyAddressPrim(address: Models.Address, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2VerifyAddressPrimOptionalParams, callback?: msRest.ServiceCallback<Models.AddressValidation>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.AddressValidation>;\n    if (!callback) {\n      return this.verifyAddressPrimWithHttpOperationResponse(address, baseSiteId, userId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.AddressValidation);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.verifyAddressPrimWithHttpOperationResponse(address, baseSiteId, userId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.AddressValidation;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get info about address\n   *\n   * Returns detailed information about address with a given id.\n   *\n   * @param {string} addressId Address identifier.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2GetAddressOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.Address} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.Address} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getAddress(addressId: string, baseSiteId: string, userId: string): Promise<Models.Address>;\n  getAddress(addressId: string, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2GetAddressOptionalParams): Promise<Models.Address>;\n  getAddress(addressId: string, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<Models.Address>): void;\n  getAddress(addressId: string, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2GetAddressOptionalParams, callback: msRest.ServiceCallback<Models.Address>): void;\n  getAddress(addressId: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetAddressOptionalParams, callback?: msRest.ServiceCallback<Models.Address>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.Address>;\n    if (!callback) {\n      return this.getAddressWithHttpOperationResponse(addressId, baseSiteId, userId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.Address);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getAddressWithHttpOperationResponse(addressId, baseSiteId, userId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.Address;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Updates the address\n   *\n   * Updates the address. Attributes not provided in the request will be defined again (set to null\n   * or default).\n   *\n   * @param {string} addressId Address identifier.\n   *\n   * @param {Address} address Address object.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  putAddressPrim(addressId: string, address: Models.Address, baseSiteId: string, userId: string): Promise<void>;\n  putAddressPrim(addressId: string, address: Models.Address, baseSiteId: string, userId: string, options: msRest.RequestOptionsBase): Promise<void>;\n  putAddressPrim(addressId: string, address: Models.Address, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<void>): void;\n  putAddressPrim(addressId: string, address: Models.Address, baseSiteId: string, userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  putAddressPrim(addressId: string, address: Models.Address, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.putAddressPrimWithHttpOperationResponse(addressId, address, baseSiteId, userId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.putAddressPrimWithHttpOperationResponse(addressId, address, baseSiteId, userId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as void;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Delete customer's address\n   *\n   * Removes customer's address.\n   *\n   * @param {string} addressId Address identifier.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  deleteAddress(addressId: string, baseSiteId: string, userId: string): Promise<void>;\n  deleteAddress(addressId: string, baseSiteId: string, userId: string, options: msRest.RequestOptionsBase): Promise<void>;\n  deleteAddress(addressId: string, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<void>): void;\n  deleteAddress(addressId: string, baseSiteId: string, userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  deleteAddress(addressId: string, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.deleteAddressWithHttpOperationResponse(addressId, baseSiteId, userId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.deleteAddressWithHttpOperationResponse(addressId, baseSiteId, userId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as void;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Updates the address\n   *\n   * Updates the address. Only attributes provided in the request body will be changed.\n   *\n   * @param {string} addressId Address identifier.\n   *\n   * @param {Address} address Address object\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  patchAddressPrim(addressId: string, address: Models.Address, baseSiteId: string, userId: string): Promise<void>;\n  patchAddressPrim(addressId: string, address: Models.Address, baseSiteId: string, userId: string, options: msRest.RequestOptionsBase): Promise<void>;\n  patchAddressPrim(addressId: string, address: Models.Address, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<void>): void;\n  patchAddressPrim(addressId: string, address: Models.Address, baseSiteId: string, userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  patchAddressPrim(addressId: string, address: Models.Address, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.patchAddressPrimWithHttpOperationResponse(addressId, address, baseSiteId, userId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.patchAddressPrimWithHttpOperationResponse(addressId, address, baseSiteId, userId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as void;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get all customer carts.\n   *\n   * Lists all customer carts.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2GetCartsOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.CartList} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.CartList} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getCarts(baseSiteId: string, userId: string): Promise<Models.CartList>;\n  getCarts(baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2GetCartsOptionalParams): Promise<Models.CartList>;\n  getCarts(baseSiteId: string, userId: string, callback: msRest.ServiceCallback<Models.CartList>): void;\n  getCarts(baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2GetCartsOptionalParams, callback: msRest.ServiceCallback<Models.CartList>): void;\n  getCarts(baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetCartsOptionalParams, callback?: msRest.ServiceCallback<Models.CartList>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.CartList>;\n    if (!callback) {\n      return this.getCartsWithHttpOperationResponse(baseSiteId, userId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.CartList);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getCartsWithHttpOperationResponse(baseSiteId, userId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.CartList;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Creates or restore a cart for a user.\n   *\n   * Creates a new cart or restores an anonymous cart as a user's cart (if an old Cart Id is given in\n   * the request).\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2CreateCartOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.Cart} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.Cart} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  createCart(baseSiteId: string, userId: string): Promise<Models.Cart>;\n  createCart(baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2CreateCartOptionalParams): Promise<Models.Cart>;\n  createCart(baseSiteId: string, userId: string, callback: msRest.ServiceCallback<Models.Cart>): void;\n  createCart(baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2CreateCartOptionalParams, callback: msRest.ServiceCallback<Models.Cart>): void;\n  createCart(baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2CreateCartOptionalParams, callback?: msRest.ServiceCallback<Models.Cart>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.Cart>;\n    if (!callback) {\n      return this.createCartWithHttpOperationResponse(baseSiteId, userId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.Cart);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.createCartWithHttpOperationResponse(baseSiteId, userId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.Cart;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get a cart with a given identifier.\n   *\n   * Returns the cart with a given identifier.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {CommerceWebservicesV2GetCartOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.Cart} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.Cart} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getCart(baseSiteId: string, userId: string, cartId: string): Promise<Models.Cart>;\n  getCart(baseSiteId: string, userId: string, cartId: string, options: Models.CommerceWebservicesV2GetCartOptionalParams): Promise<Models.Cart>;\n  getCart(baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<Models.Cart>): void;\n  getCart(baseSiteId: string, userId: string, cartId: string, options: Models.CommerceWebservicesV2GetCartOptionalParams, callback: msRest.ServiceCallback<Models.Cart>): void;\n  getCart(baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2GetCartOptionalParams, callback?: msRest.ServiceCallback<Models.Cart>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.Cart>;\n    if (!callback) {\n      return this.getCartWithHttpOperationResponse(baseSiteId, userId, cartId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.Cart);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getCartWithHttpOperationResponse(baseSiteId, userId, cartId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.Cart;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Deletes a cart with a given cart id.\n   *\n   * Deletes a cart with a given cart id.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  deleteCart(baseSiteId: string, userId: string, cartId: string): Promise<void>;\n  deleteCart(baseSiteId: string, userId: string, cartId: string, options: msRest.RequestOptionsBase): Promise<void>;\n  deleteCart(baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<void>): void;\n  deleteCart(baseSiteId: string, userId: string, cartId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  deleteCart(baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.deleteCartWithHttpOperationResponse(baseSiteId, userId, cartId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.deleteCartWithHttpOperationResponse(baseSiteId, userId, cartId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as void;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Creates a delivery address for the cart.\n   *\n   * Creates an address and assigns it to the cart as the delivery address.\n   *\n   * @param {Address} address Request body parameter that contains details such as the customer's\n   * first name (firstName), the customer's last name (lastName), the customer's title (titleCode),\n   * the country (country.isocode), the first part of the address (line1), the second part of the\n   * address (line2), the town (town), the postal code (postalCode), and the region (region.isocode).\n   *\n   * The DTO is in XML or .json format.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {CommerceWebservicesV2CreateAndSetAddressPrimOptionalParams} [options] Optional\n   * Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.Address} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.Address} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  createAndSetAddressPrim(address: Models.Address, baseSiteId: string, userId: string, cartId: string): Promise<Models.Address>;\n  createAndSetAddressPrim(address: Models.Address, baseSiteId: string, userId: string, cartId: string, options: Models.CommerceWebservicesV2CreateAndSetAddressPrimOptionalParams): Promise<Models.Address>;\n  createAndSetAddressPrim(address: Models.Address, baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<Models.Address>): void;\n  createAndSetAddressPrim(address: Models.Address, baseSiteId: string, userId: string, cartId: string, options: Models.CommerceWebservicesV2CreateAndSetAddressPrimOptionalParams, callback: msRest.ServiceCallback<Models.Address>): void;\n  createAndSetAddressPrim(address: Models.Address, baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2CreateAndSetAddressPrimOptionalParams, callback?: msRest.ServiceCallback<Models.Address>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.Address>;\n    if (!callback) {\n      return this.createAndSetAddressPrimWithHttpOperationResponse(address, baseSiteId, userId, cartId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.Address);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.createAndSetAddressPrimWithHttpOperationResponse(address, baseSiteId, userId, cartId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.Address;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Sets a delivery address for the cart.\n   *\n   * Sets a delivery address for the cart. The address country must be placed among the delivery\n   * countries of the current base store.\n   *\n   * @param {string} addressId Address identifier\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  setCartDeliveryAddress(addressId: string, baseSiteId: string, userId: string, cartId: string): Promise<void>;\n  setCartDeliveryAddress(addressId: string, baseSiteId: string, userId: string, cartId: string, options: msRest.RequestOptionsBase): Promise<void>;\n  setCartDeliveryAddress(addressId: string, baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<void>): void;\n  setCartDeliveryAddress(addressId: string, baseSiteId: string, userId: string, cartId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  setCartDeliveryAddress(addressId: string, baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.setCartDeliveryAddressWithHttpOperationResponse(addressId, baseSiteId, userId, cartId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.setCartDeliveryAddressWithHttpOperationResponse(addressId, baseSiteId, userId, cartId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as void;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Delete the delivery address from the cart.\n   *\n   * Removes the delivery address from the cart.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  removeCartDeliveryAddress(baseSiteId: string, userId: string, cartId: string): Promise<void>;\n  removeCartDeliveryAddress(baseSiteId: string, userId: string, cartId: string, options: msRest.RequestOptionsBase): Promise<void>;\n  removeCartDeliveryAddress(baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<void>): void;\n  removeCartDeliveryAddress(baseSiteId: string, userId: string, cartId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  removeCartDeliveryAddress(baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.removeCartDeliveryAddressWithHttpOperationResponse(baseSiteId, userId, cartId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.removeCartDeliveryAddressWithHttpOperationResponse(baseSiteId, userId, cartId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as void;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Explicitly clones a cart.\n   *\n   * Explicitly clones a cart.\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2CloneSaveCartOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.SaveCartResult} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.SaveCartResult} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  cloneSaveCart(cartId: string, baseSiteId: string, userId: string): Promise<Models.SaveCartResult>;\n  cloneSaveCart(cartId: string, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2CloneSaveCartOptionalParams): Promise<Models.SaveCartResult>;\n  cloneSaveCart(cartId: string, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<Models.SaveCartResult>): void;\n  cloneSaveCart(cartId: string, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2CloneSaveCartOptionalParams, callback: msRest.ServiceCallback<Models.SaveCartResult>): void;\n  cloneSaveCart(cartId: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2CloneSaveCartOptionalParams, callback?: msRest.ServiceCallback<Models.SaveCartResult>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.SaveCartResult>;\n    if (!callback) {\n      return this.cloneSaveCartWithHttpOperationResponse(cartId, baseSiteId, userId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.SaveCartResult);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.cloneSaveCartWithHttpOperationResponse(cartId, baseSiteId, userId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.SaveCartResult;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get the delivery mode selected for the cart.\n   *\n   * Returns the delivery mode selected for the cart.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {CommerceWebservicesV2GetCartDeliveryModeOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.DeliveryMode} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.DeliveryMode} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getCartDeliveryMode(baseSiteId: string, userId: string, cartId: string): Promise<Models.DeliveryMode>;\n  getCartDeliveryMode(baseSiteId: string, userId: string, cartId: string, options: Models.CommerceWebservicesV2GetCartDeliveryModeOptionalParams): Promise<Models.DeliveryMode>;\n  getCartDeliveryMode(baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<Models.DeliveryMode>): void;\n  getCartDeliveryMode(baseSiteId: string, userId: string, cartId: string, options: Models.CommerceWebservicesV2GetCartDeliveryModeOptionalParams, callback: msRest.ServiceCallback<Models.DeliveryMode>): void;\n  getCartDeliveryMode(baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2GetCartDeliveryModeOptionalParams, callback?: msRest.ServiceCallback<Models.DeliveryMode>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.DeliveryMode>;\n    if (!callback) {\n      return this.getCartDeliveryModeWithHttpOperationResponse(baseSiteId, userId, cartId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.DeliveryMode);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getCartDeliveryModeWithHttpOperationResponse(baseSiteId, userId, cartId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.DeliveryMode;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Sets the delivery mode for a cart.\n   *\n   * Sets the delivery mode with a given identifier for the cart.\n   *\n   * @param {string} deliveryModeId Delivery mode identifier (code)\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  setCartDeliveryMode(deliveryModeId: string, baseSiteId: string, userId: string, cartId: string): Promise<void>;\n  setCartDeliveryMode(deliveryModeId: string, baseSiteId: string, userId: string, cartId: string, options: msRest.RequestOptionsBase): Promise<void>;\n  setCartDeliveryMode(deliveryModeId: string, baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<void>): void;\n  setCartDeliveryMode(deliveryModeId: string, baseSiteId: string, userId: string, cartId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  setCartDeliveryMode(deliveryModeId: string, baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.setCartDeliveryModeWithHttpOperationResponse(deliveryModeId, baseSiteId, userId, cartId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.setCartDeliveryModeWithHttpOperationResponse(deliveryModeId, baseSiteId, userId, cartId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as void;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Delete the delivery mode from the cart.\n   *\n   * Removes the delivery mode from the cart.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  removeDeliveryMode(baseSiteId: string, userId: string, cartId: string): Promise<void>;\n  removeDeliveryMode(baseSiteId: string, userId: string, cartId: string, options: msRest.RequestOptionsBase): Promise<void>;\n  removeDeliveryMode(baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<void>): void;\n  removeDeliveryMode(baseSiteId: string, userId: string, cartId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  removeDeliveryMode(baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.removeDeliveryModeWithHttpOperationResponse(baseSiteId, userId, cartId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.removeDeliveryModeWithHttpOperationResponse(baseSiteId, userId, cartId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as void;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get all delivery modes for the current store and delivery address.\n   *\n   * Returns all delivery modes supported for the current base store and cart delivery address. A\n   * delivery address must be set for the cart, otherwise an empty list will be returned.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {CommerceWebservicesV2GetSupportedDeliveryModesOptionalParams} [options] Optional\n   * Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.DeliveryModeList} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.DeliveryModeList} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getSupportedDeliveryModes(baseSiteId: string, userId: string, cartId: string): Promise<Models.DeliveryModeList>;\n  getSupportedDeliveryModes(baseSiteId: string, userId: string, cartId: string, options: Models.CommerceWebservicesV2GetSupportedDeliveryModesOptionalParams): Promise<Models.DeliveryModeList>;\n  getSupportedDeliveryModes(baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<Models.DeliveryModeList>): void;\n  getSupportedDeliveryModes(baseSiteId: string, userId: string, cartId: string, options: Models.CommerceWebservicesV2GetSupportedDeliveryModesOptionalParams, callback: msRest.ServiceCallback<Models.DeliveryModeList>): void;\n  getSupportedDeliveryModes(baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2GetSupportedDeliveryModesOptionalParams, callback?: msRest.ServiceCallback<Models.DeliveryModeList>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.DeliveryModeList>;\n    if (!callback) {\n      return this.getSupportedDeliveryModesWithHttpOperationResponse(baseSiteId, userId, cartId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.DeliveryModeList);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getSupportedDeliveryModesWithHttpOperationResponse(baseSiteId, userId, cartId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.DeliveryModeList;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Assigns an email to the cart.\n   *\n   * Assigns an email to the cart. This step is required to make a guest checkout.\n   *\n   * @param {string} email Email of the guest user. It will be used during the checkout process.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  guestLogin(email: string, baseSiteId: string, userId: string, cartId: string): Promise<void>;\n  guestLogin(email: string, baseSiteId: string, userId: string, cartId: string, options: msRest.RequestOptionsBase): Promise<void>;\n  guestLogin(email: string, baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<void>): void;\n  guestLogin(email: string, baseSiteId: string, userId: string, cartId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  guestLogin(email: string, baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.guestLoginWithHttpOperationResponse(email, baseSiteId, userId, cartId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.guestLoginWithHttpOperationResponse(email, baseSiteId, userId, cartId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as void;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get cart entries.\n   *\n   * Returns cart entries.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {CommerceWebservicesV2GetCartEntriesOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.OrderEntryList} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.OrderEntryList} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getCartEntries(baseSiteId: string, userId: string, cartId: string): Promise<Models.OrderEntryList>;\n  getCartEntries(baseSiteId: string, userId: string, cartId: string, options: Models.CommerceWebservicesV2GetCartEntriesOptionalParams): Promise<Models.OrderEntryList>;\n  getCartEntries(baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<Models.OrderEntryList>): void;\n  getCartEntries(baseSiteId: string, userId: string, cartId: string, options: Models.CommerceWebservicesV2GetCartEntriesOptionalParams, callback: msRest.ServiceCallback<Models.OrderEntryList>): void;\n  getCartEntries(baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2GetCartEntriesOptionalParams, callback?: msRest.ServiceCallback<Models.OrderEntryList>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.OrderEntryList>;\n    if (!callback) {\n      return this.getCartEntriesWithHttpOperationResponse(baseSiteId, userId, cartId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.OrderEntryList);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getCartEntriesWithHttpOperationResponse(baseSiteId, userId, cartId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.OrderEntryList;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Adds a product to the cart.\n   *\n   * Adds a product to the cart.\n   *\n   * @param {OrderEntry} entry Request body parameter that contains details such as the product code\n   * (product.code), the quantity of product (quantity), and the pickup store name\n   * (deliveryPointOfService.name).\n   *\n   * The DTO is in XML or .json format.\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2AddCartEntryPrimOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.CartModification} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.CartModification} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  addCartEntryPrim(entry: Models.OrderEntry, userId: string, cartId: string, baseSiteId: string): Promise<Models.CartModification>;\n  addCartEntryPrim(entry: Models.OrderEntry, userId: string, cartId: string, baseSiteId: string, options: Models.CommerceWebservicesV2AddCartEntryPrimOptionalParams): Promise<Models.CartModification>;\n  addCartEntryPrim(entry: Models.OrderEntry, userId: string, cartId: string, baseSiteId: string, callback: msRest.ServiceCallback<Models.CartModification>): void;\n  addCartEntryPrim(entry: Models.OrderEntry, userId: string, cartId: string, baseSiteId: string, options: Models.CommerceWebservicesV2AddCartEntryPrimOptionalParams, callback: msRest.ServiceCallback<Models.CartModification>): void;\n  addCartEntryPrim(entry: Models.OrderEntry, userId: string, cartId: string, baseSiteId: string, options?: Models.CommerceWebservicesV2AddCartEntryPrimOptionalParams, callback?: msRest.ServiceCallback<Models.CartModification>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.CartModification>;\n    if (!callback) {\n      return this.addCartEntryPrimWithHttpOperationResponse(entry, userId, cartId, baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.CartModification);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.addCartEntryPrimWithHttpOperationResponse(entry, userId, cartId, baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.CartModification;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get the details of the cart entries.\n   *\n   * Returns the details of the cart entries.\n   *\n   * @param {number} entryNumber The entry number. Each entry in a cart has an entry number. Cart\n   * entries are numbered in ascending order, starting with zero (0).\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {CommerceWebservicesV2GetCartEntryOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.OrderEntry} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.OrderEntry} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getCartEntry(entryNumber: number, baseSiteId: string, userId: string, cartId: string): Promise<Models.OrderEntry>;\n  getCartEntry(entryNumber: number, baseSiteId: string, userId: string, cartId: string, options: Models.CommerceWebservicesV2GetCartEntryOptionalParams): Promise<Models.OrderEntry>;\n  getCartEntry(entryNumber: number, baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<Models.OrderEntry>): void;\n  getCartEntry(entryNumber: number, baseSiteId: string, userId: string, cartId: string, options: Models.CommerceWebservicesV2GetCartEntryOptionalParams, callback: msRest.ServiceCallback<Models.OrderEntry>): void;\n  getCartEntry(entryNumber: number, baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2GetCartEntryOptionalParams, callback?: msRest.ServiceCallback<Models.OrderEntry>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.OrderEntry>;\n    if (!callback) {\n      return this.getCartEntryWithHttpOperationResponse(entryNumber, baseSiteId, userId, cartId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.OrderEntry);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getCartEntryWithHttpOperationResponse(entryNumber, baseSiteId, userId, cartId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.OrderEntry;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Set quantity and store details of a cart entry.\n   *\n   * Updates the quantity of a single cart entry and the details of the store where the cart entry\n   * will be picked up. Attributes not provided in request will be defined again (set to null or\n   * default)\n   *\n   * @param {number} entryNumber The entry number. Each entry in a cart has an entry number. Cart\n   * entries are numbered in ascending order, starting with zero (0).\n   *\n   * @param {OrderEntry} entry Request body parameter that contains details such as the quantity of\n   * product (quantity), and the pickup store name (deliveryPointOfService.name)\n   *\n   * The DTO is in XML or .json format.\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2SetCartEntryPrimOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.CartModification} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.CartModification} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  setCartEntryPrim(entryNumber: number, entry: Models.OrderEntry, userId: string, cartId: string, baseSiteId: string): Promise<Models.CartModification>;\n  setCartEntryPrim(entryNumber: number, entry: Models.OrderEntry, userId: string, cartId: string, baseSiteId: string, options: Models.CommerceWebservicesV2SetCartEntryPrimOptionalParams): Promise<Models.CartModification>;\n  setCartEntryPrim(entryNumber: number, entry: Models.OrderEntry, userId: string, cartId: string, baseSiteId: string, callback: msRest.ServiceCallback<Models.CartModification>): void;\n  setCartEntryPrim(entryNumber: number, entry: Models.OrderEntry, userId: string, cartId: string, baseSiteId: string, options: Models.CommerceWebservicesV2SetCartEntryPrimOptionalParams, callback: msRest.ServiceCallback<Models.CartModification>): void;\n  setCartEntryPrim(entryNumber: number, entry: Models.OrderEntry, userId: string, cartId: string, baseSiteId: string, options?: Models.CommerceWebservicesV2SetCartEntryPrimOptionalParams, callback?: msRest.ServiceCallback<Models.CartModification>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.CartModification>;\n    if (!callback) {\n      return this.setCartEntryPrimWithHttpOperationResponse(entryNumber, entry, userId, cartId, baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.CartModification);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.setCartEntryPrimWithHttpOperationResponse(entryNumber, entry, userId, cartId, baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.CartModification;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Deletes cart entry.\n   *\n   * Deletes cart entry.\n   *\n   * @param {number} entryNumber The entry number. Each entry in a cart has an entry number. Cart\n   * entries are numbered in ascending order, starting with zero (0).\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  removeCartEntry(entryNumber: number, baseSiteId: string, userId: string, cartId: string): Promise<void>;\n  removeCartEntry(entryNumber: number, baseSiteId: string, userId: string, cartId: string, options: msRest.RequestOptionsBase): Promise<void>;\n  removeCartEntry(entryNumber: number, baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<void>): void;\n  removeCartEntry(entryNumber: number, baseSiteId: string, userId: string, cartId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  removeCartEntry(entryNumber: number, baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.removeCartEntryWithHttpOperationResponse(entryNumber, baseSiteId, userId, cartId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.removeCartEntryWithHttpOperationResponse(entryNumber, baseSiteId, userId, cartId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as void;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Update quantity and store details of a cart entry.\n   *\n   * Updates the quantity of a single cart entry and the details of the store where the cart entry\n   * will be picked up.\n   *\n   * @param {number} entryNumber The entry number. Each entry in a cart has an entry number. Cart\n   * entries are numbered in ascending order, starting with zero (0).\n   *\n   * @param {OrderEntry} entry Request body parameter that contains details such as the quantity of\n   * product (quantity), and the pickup store name (deliveryPointOfService.name)\n   *\n   * The DTO is in XML or .json format.\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2UpdateCartEntryPrimOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.CartModification} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.CartModification} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  updateCartEntryPrim(entryNumber: number, entry: Models.OrderEntry, userId: string, cartId: string, baseSiteId: string): Promise<Models.CartModification>;\n  updateCartEntryPrim(entryNumber: number, entry: Models.OrderEntry, userId: string, cartId: string, baseSiteId: string, options: Models.CommerceWebservicesV2UpdateCartEntryPrimOptionalParams): Promise<Models.CartModification>;\n  updateCartEntryPrim(entryNumber: number, entry: Models.OrderEntry, userId: string, cartId: string, baseSiteId: string, callback: msRest.ServiceCallback<Models.CartModification>): void;\n  updateCartEntryPrim(entryNumber: number, entry: Models.OrderEntry, userId: string, cartId: string, baseSiteId: string, options: Models.CommerceWebservicesV2UpdateCartEntryPrimOptionalParams, callback: msRest.ServiceCallback<Models.CartModification>): void;\n  updateCartEntryPrim(entryNumber: number, entry: Models.OrderEntry, userId: string, cartId: string, baseSiteId: string, options?: Models.CommerceWebservicesV2UpdateCartEntryPrimOptionalParams, callback?: msRest.ServiceCallback<Models.CartModification>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.CartModification>;\n    if (!callback) {\n      return this.updateCartEntryPrimWithHttpOperationResponse(entryNumber, entry, userId, cartId, baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.CartModification);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.updateCartEntryPrimWithHttpOperationResponse(entryNumber, entry, userId, cartId, baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.CartModification;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Flag a cart for deletion.\n   *\n   * Flags a cart for deletion (the cart doesn't have corresponding save cart attributes anymore).\n   * The cart is not actually deleted from the database. But with the removal of the saved cart\n   * attributes, this cart will be taken care of by the cart removal job just like any other cart.\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2FlagForDeletionOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.SaveCartResult} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.SaveCartResult} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  flagForDeletion(cartId: string, baseSiteId: string, userId: string): Promise<Models.SaveCartResult>;\n  flagForDeletion(cartId: string, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2FlagForDeletionOptionalParams): Promise<Models.SaveCartResult>;\n  flagForDeletion(cartId: string, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<Models.SaveCartResult>): void;\n  flagForDeletion(cartId: string, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2FlagForDeletionOptionalParams, callback: msRest.ServiceCallback<Models.SaveCartResult>): void;\n  flagForDeletion(cartId: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2FlagForDeletionOptionalParams, callback?: msRest.ServiceCallback<Models.SaveCartResult>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.SaveCartResult>;\n    if (!callback) {\n      return this.flagForDeletionWithHttpOperationResponse(cartId, baseSiteId, userId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.SaveCartResult);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.flagForDeletionWithHttpOperationResponse(cartId, baseSiteId, userId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.SaveCartResult;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Defines and assigns details of a new credit card payment to the cart.\n   *\n   * Defines the details of a new credit card, and assigns this payment option to the cart.\n   *\n   * @param {PaymentDetails} paymentDetails Request body parameter that contains details such as the\n   * name on the card (accountHolderName), the card number (cardNumber), the card type\n   * (cardType.code), the month of the expiry date (expiryMonth), the year of the expiry date\n   * (expiryYear), whether the payment details should be saved (saved), whether the payment details\n   * should be set as default (defaultPaymentInfo), and the billing address\n   * (billingAddress.firstName, billingAddress.lastName, billingAddress.titleCode,\n   * billingAddress.country.isocode, billingAddress.line1, billingAddress.line2, billingAddress.town,\n   * billingAddress.postalCode, billingAddress.region.isocode)\n   *\n   * The DTO is in XML or .json format.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {CommerceWebservicesV2AddPaymentDetailsPrimOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.PaymentDetails} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.PaymentDetails} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  addPaymentDetailsPrim(paymentDetails: Models.PaymentDetails, baseSiteId: string, userId: string, cartId: string): Promise<Models.PaymentDetails>;\n  addPaymentDetailsPrim(paymentDetails: Models.PaymentDetails, baseSiteId: string, userId: string, cartId: string, options: Models.CommerceWebservicesV2AddPaymentDetailsPrimOptionalParams): Promise<Models.PaymentDetails>;\n  addPaymentDetailsPrim(paymentDetails: Models.PaymentDetails, baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<Models.PaymentDetails>): void;\n  addPaymentDetailsPrim(paymentDetails: Models.PaymentDetails, baseSiteId: string, userId: string, cartId: string, options: Models.CommerceWebservicesV2AddPaymentDetailsPrimOptionalParams, callback: msRest.ServiceCallback<Models.PaymentDetails>): void;\n  addPaymentDetailsPrim(paymentDetails: Models.PaymentDetails, baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2AddPaymentDetailsPrimOptionalParams, callback?: msRest.ServiceCallback<Models.PaymentDetails>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.PaymentDetails>;\n    if (!callback) {\n      return this.addPaymentDetailsPrimWithHttpOperationResponse(paymentDetails, baseSiteId, userId, cartId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.PaymentDetails);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.addPaymentDetailsPrimWithHttpOperationResponse(paymentDetails, baseSiteId, userId, cartId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.PaymentDetails;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Sets credit card payment details for the cart.\n   *\n   * Sets credit card payment details for the cart.\n   *\n   * @param {string} paymentDetailsId Payment details identifier.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  setPaymentDetails(paymentDetailsId: string, baseSiteId: string, userId: string, cartId: string): Promise<void>;\n  setPaymentDetails(paymentDetailsId: string, baseSiteId: string, userId: string, cartId: string, options: msRest.RequestOptionsBase): Promise<void>;\n  setPaymentDetails(paymentDetailsId: string, baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<void>): void;\n  setPaymentDetails(paymentDetailsId: string, baseSiteId: string, userId: string, cartId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  setPaymentDetails(paymentDetailsId: string, baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.setPaymentDetailsWithHttpOperationResponse(paymentDetailsId, baseSiteId, userId, cartId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.setPaymentDetailsWithHttpOperationResponse(paymentDetailsId, baseSiteId, userId, cartId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as void;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get information about promotions applied on cart.\n   *\n   * Returns information about the promotions applied on the cart. Requests pertaining to promotions\n   * have been developed for the previous version of promotions and vouchers, and as a result, some\n   * of them are currently not compatible with the new promotions engine.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {CommerceWebservicesV2GetPromotionsOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.PromotionResultList} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.PromotionResultList} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getPromotions(baseSiteId: string, userId: string, cartId: string): Promise<Models.PromotionResultList>;\n  getPromotions(baseSiteId: string, userId: string, cartId: string, options: Models.CommerceWebservicesV2GetPromotionsOptionalParams): Promise<Models.PromotionResultList>;\n  getPromotions(baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<Models.PromotionResultList>): void;\n  getPromotions(baseSiteId: string, userId: string, cartId: string, options: Models.CommerceWebservicesV2GetPromotionsOptionalParams, callback: msRest.ServiceCallback<Models.PromotionResultList>): void;\n  getPromotions(baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2GetPromotionsOptionalParams, callback?: msRest.ServiceCallback<Models.PromotionResultList>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.PromotionResultList>;\n    if (!callback) {\n      return this.getPromotionsWithHttpOperationResponse(baseSiteId, userId, cartId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.PromotionResultList);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getPromotionsWithHttpOperationResponse(baseSiteId, userId, cartId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.PromotionResultList;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Enables promotions based on the promotionsId of the cart.\n   *\n   * Enables a promotion for the order based on the promotionId defined for the cart. Requests\n   * pertaining to promotions have been developed for the previous version of promotions and\n   * vouchers, and as a result, some of them are currently not compatible with the new promotions\n   * engine.\n   *\n   * @param {string} promotionId Promotion identifier (code)\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  applyPromotion(promotionId: string, baseSiteId: string, userId: string, cartId: string): Promise<void>;\n  applyPromotion(promotionId: string, baseSiteId: string, userId: string, cartId: string, options: msRest.RequestOptionsBase): Promise<void>;\n  applyPromotion(promotionId: string, baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<void>): void;\n  applyPromotion(promotionId: string, baseSiteId: string, userId: string, cartId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  applyPromotion(promotionId: string, baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.applyPromotionWithHttpOperationResponse(promotionId, baseSiteId, userId, cartId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.applyPromotionWithHttpOperationResponse(promotionId, baseSiteId, userId, cartId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as void;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get information about promotions applied on cart.\n   *\n   * Returns information about a promotion (with a specific promotionId), that has been applied on\n   * the cart. Requests pertaining to promotions have been developed for the previous version of\n   * promotions and vouchers, and as a result, some of them are currently not compatible with the new\n   * promotions engine.\n   *\n   * @param {string} promotionId Promotion identifier (code)\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {CommerceWebservicesV2GetPromotionOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.PromotionResultList} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.PromotionResultList} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getPromotion(promotionId: string, baseSiteId: string, userId: string, cartId: string): Promise<Models.PromotionResultList>;\n  getPromotion(promotionId: string, baseSiteId: string, userId: string, cartId: string, options: Models.CommerceWebservicesV2GetPromotionOptionalParams): Promise<Models.PromotionResultList>;\n  getPromotion(promotionId: string, baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<Models.PromotionResultList>): void;\n  getPromotion(promotionId: string, baseSiteId: string, userId: string, cartId: string, options: Models.CommerceWebservicesV2GetPromotionOptionalParams, callback: msRest.ServiceCallback<Models.PromotionResultList>): void;\n  getPromotion(promotionId: string, baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2GetPromotionOptionalParams, callback?: msRest.ServiceCallback<Models.PromotionResultList>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.PromotionResultList>;\n    if (!callback) {\n      return this.getPromotionWithHttpOperationResponse(promotionId, baseSiteId, userId, cartId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.PromotionResultList);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getPromotionWithHttpOperationResponse(promotionId, baseSiteId, userId, cartId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.PromotionResultList;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Disables the promotion based on the promotionsId of the cart.\n   *\n   * Disables the promotion for the order based on the promotionId defined for the cart. Requests\n   * pertaining to promotions have been developed for the previous version of promotions and\n   * vouchers, and as a result, some of them are currently not compatible with the new promotions\n   * engine.\n   *\n   * @param {string} promotionId Promotion identifier (code)\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  removePromotion(promotionId: string, baseSiteId: string, userId: string, cartId: string): Promise<void>;\n  removePromotion(promotionId: string, baseSiteId: string, userId: string, cartId: string, options: msRest.RequestOptionsBase): Promise<void>;\n  removePromotion(promotionId: string, baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<void>): void;\n  removePromotion(promotionId: string, baseSiteId: string, userId: string, cartId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  removePromotion(promotionId: string, baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.removePromotionWithHttpOperationResponse(promotionId, baseSiteId, userId, cartId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.removePromotionWithHttpOperationResponse(promotionId, baseSiteId, userId, cartId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as void;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Restore a saved cart.\n   *\n   * Restore a saved cart.\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2RestoreSavedCartOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.SaveCartResult} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.SaveCartResult} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  restoreSavedCart(cartId: string, baseSiteId: string, userId: string): Promise<Models.SaveCartResult>;\n  restoreSavedCart(cartId: string, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2RestoreSavedCartOptionalParams): Promise<Models.SaveCartResult>;\n  restoreSavedCart(cartId: string, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<Models.SaveCartResult>): void;\n  restoreSavedCart(cartId: string, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2RestoreSavedCartOptionalParams, callback: msRest.ServiceCallback<Models.SaveCartResult>): void;\n  restoreSavedCart(cartId: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2RestoreSavedCartOptionalParams, callback?: msRest.ServiceCallback<Models.SaveCartResult>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.SaveCartResult>;\n    if (!callback) {\n      return this.restoreSavedCartWithHttpOperationResponse(cartId, baseSiteId, userId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.SaveCartResult);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.restoreSavedCartWithHttpOperationResponse(cartId, baseSiteId, userId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.SaveCartResult;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Explicitly saves a cart.\n   *\n   * Explicitly saves a cart.\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2SaveCartOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.SaveCartResult} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.SaveCartResult} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  saveCart(cartId: string, baseSiteId: string, userId: string): Promise<Models.SaveCartResult>;\n  saveCart(cartId: string, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2SaveCartOptionalParams): Promise<Models.SaveCartResult>;\n  saveCart(cartId: string, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<Models.SaveCartResult>): void;\n  saveCart(cartId: string, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2SaveCartOptionalParams, callback: msRest.ServiceCallback<Models.SaveCartResult>): void;\n  saveCart(cartId: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2SaveCartOptionalParams, callback?: msRest.ServiceCallback<Models.SaveCartResult>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.SaveCartResult>;\n    if (!callback) {\n      return this.saveCartWithHttpOperationResponse(cartId, baseSiteId, userId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.SaveCartResult);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.saveCartWithHttpOperationResponse(cartId, baseSiteId, userId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.SaveCartResult;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get a saved cart.\n   *\n   * Returns a saved cart for an authenticated user. The cart is identified using the \"cartId\"\n   * parameter.\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2GetSavedCartOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.SaveCartResult} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.SaveCartResult} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getSavedCart(cartId: string, baseSiteId: string, userId: string): Promise<Models.SaveCartResult>;\n  getSavedCart(cartId: string, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2GetSavedCartOptionalParams): Promise<Models.SaveCartResult>;\n  getSavedCart(cartId: string, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<Models.SaveCartResult>): void;\n  getSavedCart(cartId: string, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2GetSavedCartOptionalParams, callback: msRest.ServiceCallback<Models.SaveCartResult>): void;\n  getSavedCart(cartId: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetSavedCartOptionalParams, callback?: msRest.ServiceCallback<Models.SaveCartResult>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.SaveCartResult>;\n    if (!callback) {\n      return this.getSavedCartWithHttpOperationResponse(cartId, baseSiteId, userId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.SaveCartResult);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getSavedCartWithHttpOperationResponse(cartId, baseSiteId, userId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.SaveCartResult;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get a list of vouchers applied to the cart.\n   *\n   * Returns a list of vouchers applied to the cart.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {CommerceWebservicesV2GetVouchersOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.VoucherList} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.VoucherList} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getVouchers(baseSiteId: string, userId: string, cartId: string): Promise<Models.VoucherList>;\n  getVouchers(baseSiteId: string, userId: string, cartId: string, options: Models.CommerceWebservicesV2GetVouchersOptionalParams): Promise<Models.VoucherList>;\n  getVouchers(baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<Models.VoucherList>): void;\n  getVouchers(baseSiteId: string, userId: string, cartId: string, options: Models.CommerceWebservicesV2GetVouchersOptionalParams, callback: msRest.ServiceCallback<Models.VoucherList>): void;\n  getVouchers(baseSiteId: string, userId: string, cartId: string, options?: Models.CommerceWebservicesV2GetVouchersOptionalParams, callback?: msRest.ServiceCallback<Models.VoucherList>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.VoucherList>;\n    if (!callback) {\n      return this.getVouchersWithHttpOperationResponse(baseSiteId, userId, cartId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.VoucherList);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getVouchersWithHttpOperationResponse(baseSiteId, userId, cartId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.VoucherList;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Applies a voucher based on the voucherId defined for the cart.\n   *\n   * Applies a voucher based on the voucherId defined for the cart.\n   *\n   * @param {string} voucherId Voucher identifier (code)\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  applyVoucherForCart(voucherId: string, baseSiteId: string, userId: string, cartId: string): Promise<void>;\n  applyVoucherForCart(voucherId: string, baseSiteId: string, userId: string, cartId: string, options: msRest.RequestOptionsBase): Promise<void>;\n  applyVoucherForCart(voucherId: string, baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<void>): void;\n  applyVoucherForCart(voucherId: string, baseSiteId: string, userId: string, cartId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  applyVoucherForCart(voucherId: string, baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.applyVoucherForCartWithHttpOperationResponse(voucherId, baseSiteId, userId, cartId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.applyVoucherForCartWithHttpOperationResponse(voucherId, baseSiteId, userId, cartId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as void;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Delete a voucher defined for the current cart.\n   *\n   * Removes a voucher based on the voucherId defined for the current cart.\n   *\n   * @param {string} voucherId Voucher identifier (code)\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {string} cartId Cart identifier: cart code for logged in user, cart guid for anonymous\n   * user, 'current' for the last modified cart\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  releaseVoucherFromCart(voucherId: string, baseSiteId: string, userId: string, cartId: string): Promise<void>;\n  releaseVoucherFromCart(voucherId: string, baseSiteId: string, userId: string, cartId: string, options: msRest.RequestOptionsBase): Promise<void>;\n  releaseVoucherFromCart(voucherId: string, baseSiteId: string, userId: string, cartId: string, callback: msRest.ServiceCallback<void>): void;\n  releaseVoucherFromCart(voucherId: string, baseSiteId: string, userId: string, cartId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  releaseVoucherFromCart(voucherId: string, baseSiteId: string, userId: string, cartId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.releaseVoucherFromCartWithHttpOperationResponse(voucherId, baseSiteId, userId, cartId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.releaseVoucherFromCartWithHttpOperationResponse(voucherId, baseSiteId, userId, cartId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as void;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get all customer groups of a customer.\n   *\n   * Returns all customer groups of a customer.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2GetAllCustomerGroupsForCustomerOptionalParams} [options] Optional\n   * Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.UserGroupList} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.UserGroupList} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getAllCustomerGroupsForCustomer(baseSiteId: string, userId: string): Promise<Models.UserGroupList>;\n  getAllCustomerGroupsForCustomer(baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2GetAllCustomerGroupsForCustomerOptionalParams): Promise<Models.UserGroupList>;\n  getAllCustomerGroupsForCustomer(baseSiteId: string, userId: string, callback: msRest.ServiceCallback<Models.UserGroupList>): void;\n  getAllCustomerGroupsForCustomer(baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2GetAllCustomerGroupsForCustomerOptionalParams, callback: msRest.ServiceCallback<Models.UserGroupList>): void;\n  getAllCustomerGroupsForCustomer(baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetAllCustomerGroupsForCustomerOptionalParams, callback?: msRest.ServiceCallback<Models.UserGroupList>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.UserGroupList>;\n    if (!callback) {\n      return this.getAllCustomerGroupsForCustomerWithHttpOperationResponse(baseSiteId, userId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.UserGroupList);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getAllCustomerGroupsForCustomerWithHttpOperationResponse(baseSiteId, userId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.UserGroupList;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Changes customer's login name.\n   *\n   * Changes a customer's login name. Requires the customer's current password.\n   *\n   * @param {string} newLogin Customer's new login name. Customer login is case insensitive.\n   *\n   * @param {string} password Customer's current password.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  changeLogin(newLogin: string, password: string, baseSiteId: string, userId: string): Promise<void>;\n  changeLogin(newLogin: string, password: string, baseSiteId: string, userId: string, options: msRest.RequestOptionsBase): Promise<void>;\n  changeLogin(newLogin: string, password: string, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<void>): void;\n  changeLogin(newLogin: string, password: string, baseSiteId: string, userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  changeLogin(newLogin: string, password: string, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.changeLoginWithHttpOperationResponse(newLogin, password, baseSiteId, userId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.changeLoginWithHttpOperationResponse(newLogin, password, baseSiteId, userId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as void;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get order history for user\n   *\n   * Returns order history data for all orders placed by a specified user for a specified base store.\n   * The response can display the results across multiple pages, if required.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2GetOrdersForUserOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.OrderHistoryList} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.OrderHistoryList} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getOrdersForUser(baseSiteId: string, userId: string): Promise<Models.OrderHistoryList>;\n  getOrdersForUser(baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2GetOrdersForUserOptionalParams): Promise<Models.OrderHistoryList>;\n  getOrdersForUser(baseSiteId: string, userId: string, callback: msRest.ServiceCallback<Models.OrderHistoryList>): void;\n  getOrdersForUser(baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2GetOrdersForUserOptionalParams, callback: msRest.ServiceCallback<Models.OrderHistoryList>): void;\n  getOrdersForUser(baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetOrdersForUserOptionalParams, callback?: msRest.ServiceCallback<Models.OrderHistoryList>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.OrderHistoryList>;\n    if (!callback) {\n      return this.getOrdersForUserWithHttpOperationResponse(baseSiteId, userId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.OrderHistoryList);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getOrdersForUserWithHttpOperationResponse(baseSiteId, userId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.OrderHistoryList;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get total number of orders\n   *\n   * In the response header, the \"x-total-count\" indicates the total number of orders placed by a\n   * specified user for a specified base store.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2GetCountOrdersForUserOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getCountOrdersForUser(baseSiteId: string, userId: string): Promise<void>;\n  getCountOrdersForUser(baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2GetCountOrdersForUserOptionalParams): Promise<void>;\n  getCountOrdersForUser(baseSiteId: string, userId: string, callback: msRest.ServiceCallback<void>): void;\n  getCountOrdersForUser(baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2GetCountOrdersForUserOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  getCountOrdersForUser(baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetCountOrdersForUserOptionalParams, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.getCountOrdersForUserWithHttpOperationResponse(baseSiteId, userId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getCountOrdersForUserWithHttpOperationResponse(baseSiteId, userId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as void;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Post a order\n   *\n   * Authorizes the cart and places the order. The response contains the new order data.\n   *\n   * @param {string} cartId Cart code for logged in user, cart GUID for guest checkout\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2PlaceOrderOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.Order} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.Order} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  placeOrder(cartId: string, baseSiteId: string, userId: string): Promise<Models.Order>;\n  placeOrder(cartId: string, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2PlaceOrderOptionalParams): Promise<Models.Order>;\n  placeOrder(cartId: string, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<Models.Order>): void;\n  placeOrder(cartId: string, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2PlaceOrderOptionalParams, callback: msRest.ServiceCallback<Models.Order>): void;\n  placeOrder(cartId: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2PlaceOrderOptionalParams, callback?: msRest.ServiceCallback<Models.Order>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.Order>;\n    if (!callback) {\n      return this.placeOrderWithHttpOperationResponse(cartId, baseSiteId, userId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.Order);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.placeOrderWithHttpOperationResponse(cartId, baseSiteId, userId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.Order;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get a order\n   *\n   * Returns specific order details based on a specific order code. The response contains detailed\n   * order information.\n   *\n   * @param {string} code Order GUID (Globally Unique Identifier) or order CODE\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2GetOrderForUserByCodeOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.Order} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.Order} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getOrderForUserByCode(code: string, baseSiteId: string, userId: string): Promise<Models.Order>;\n  getOrderForUserByCode(code: string, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2GetOrderForUserByCodeOptionalParams): Promise<Models.Order>;\n  getOrderForUserByCode(code: string, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<Models.Order>): void;\n  getOrderForUserByCode(code: string, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2GetOrderForUserByCodeOptionalParams, callback: msRest.ServiceCallback<Models.Order>): void;\n  getOrderForUserByCode(code: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetOrderForUserByCodeOptionalParams, callback?: msRest.ServiceCallback<Models.Order>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.Order>;\n    if (!callback) {\n      return this.getOrderForUserByCodeWithHttpOperationResponse(code, baseSiteId, userId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.Order);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getOrderForUserByCodeWithHttpOperationResponse(code, baseSiteId, userId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.Order;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Changes customer's password\n   *\n   * Changes customer's password.\n   *\n   * @param {string} newParameter New password.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2ChangePasswordOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  changePassword(newParameter: string, baseSiteId: string, userId: string): Promise<void>;\n  changePassword(newParameter: string, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2ChangePasswordOptionalParams): Promise<void>;\n  changePassword(newParameter: string, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<void>): void;\n  changePassword(newParameter: string, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2ChangePasswordOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  changePassword(newParameter: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2ChangePasswordOptionalParams, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.changePasswordWithHttpOperationResponse(newParameter, baseSiteId, userId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.changePasswordWithHttpOperationResponse(newParameter, baseSiteId, userId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as void;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get customer's credit card payment details list.\n   *\n   * Return customer's credit card payment details list.\n   *\n   * @param {boolean} saved Type of payment details.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2GetPaymentInfosOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.PaymentDetailsList} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.PaymentDetailsList} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getPaymentInfos(saved: boolean, baseSiteId: string, userId: string): Promise<Models.PaymentDetailsList>;\n  getPaymentInfos(saved: boolean, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2GetPaymentInfosOptionalParams): Promise<Models.PaymentDetailsList>;\n  getPaymentInfos(saved: boolean, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<Models.PaymentDetailsList>): void;\n  getPaymentInfos(saved: boolean, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2GetPaymentInfosOptionalParams, callback: msRest.ServiceCallback<Models.PaymentDetailsList>): void;\n  getPaymentInfos(saved: boolean, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetPaymentInfosOptionalParams, callback?: msRest.ServiceCallback<Models.PaymentDetailsList>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.PaymentDetailsList>;\n    if (!callback) {\n      return this.getPaymentInfosWithHttpOperationResponse(saved, baseSiteId, userId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.PaymentDetailsList);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getPaymentInfosWithHttpOperationResponse(saved, baseSiteId, userId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.PaymentDetailsList;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get customer's credit card payment details.\n   *\n   * Returns a customer's credit card payment details for the specified paymentDetailsId.\n   *\n   * @param {string} paymentDetailsId Payment details identifier.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {CommerceWebservicesV2GetPaymentDetailsOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.PaymentDetails} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.PaymentDetails} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getPaymentDetails(paymentDetailsId: string, baseSiteId: string, userId: string): Promise<Models.PaymentDetails>;\n  getPaymentDetails(paymentDetailsId: string, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2GetPaymentDetailsOptionalParams): Promise<Models.PaymentDetails>;\n  getPaymentDetails(paymentDetailsId: string, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<Models.PaymentDetails>): void;\n  getPaymentDetails(paymentDetailsId: string, baseSiteId: string, userId: string, options: Models.CommerceWebservicesV2GetPaymentDetailsOptionalParams, callback: msRest.ServiceCallback<Models.PaymentDetails>): void;\n  getPaymentDetails(paymentDetailsId: string, baseSiteId: string, userId: string, options?: Models.CommerceWebservicesV2GetPaymentDetailsOptionalParams, callback?: msRest.ServiceCallback<Models.PaymentDetails>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.PaymentDetails>;\n    if (!callback) {\n      return this.getPaymentDetailsWithHttpOperationResponse(paymentDetailsId, baseSiteId, userId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.PaymentDetails);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getPaymentDetailsWithHttpOperationResponse(paymentDetailsId, baseSiteId, userId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.PaymentDetails;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Updates existing customer's credit card payment info.\n   *\n   * Updates existing customer's credit card payment info based on the payment info ID. Attributes\n   * not given in request will be defined again (set to null or default).\n   *\n   * @param {string} paymentDetailsId Payment details identifier.\n   *\n   * @param {PaymentDetails} paymentDetails Payment details object.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  putPaymentInfoPrim(paymentDetailsId: string, paymentDetails: Models.PaymentDetails, baseSiteId: string, userId: string): Promise<void>;\n  putPaymentInfoPrim(paymentDetailsId: string, paymentDetails: Models.PaymentDetails, baseSiteId: string, userId: string, options: msRest.RequestOptionsBase): Promise<void>;\n  putPaymentInfoPrim(paymentDetailsId: string, paymentDetails: Models.PaymentDetails, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<void>): void;\n  putPaymentInfoPrim(paymentDetailsId: string, paymentDetails: Models.PaymentDetails, baseSiteId: string, userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  putPaymentInfoPrim(paymentDetailsId: string, paymentDetails: Models.PaymentDetails, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.putPaymentInfoPrimWithHttpOperationResponse(paymentDetailsId, paymentDetails, baseSiteId, userId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.putPaymentInfoPrimWithHttpOperationResponse(paymentDetailsId, paymentDetails, baseSiteId, userId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as void;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Delete customer's credit card payment details.\n   *\n   * Removes a customer's credit card payment details based on a specified paymentDetailsId.\n   *\n   * @param {string} paymentDetailsId Payment details identifier.\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  deletePaymentInfo(paymentDetailsId: string, baseSiteId: string, userId: string): Promise<void>;\n  deletePaymentInfo(paymentDetailsId: string, baseSiteId: string, userId: string, options: msRest.RequestOptionsBase): Promise<void>;\n  deletePaymentInfo(paymentDetailsId: string, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<void>): void;\n  deletePaymentInfo(paymentDetailsId: string, baseSiteId: string, userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  deletePaymentInfo(paymentDetailsId: string, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.deletePaymentInfoWithHttpOperationResponse(paymentDetailsId, baseSiteId, userId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.deletePaymentInfoWithHttpOperationResponse(paymentDetailsId, baseSiteId, userId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as void;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Updates existing customer's credit card payment details.\n   *\n   * Updates an existing customer's credit card payment details based on the specified\n   * paymentDetailsId. Only those attributes provided in the request will be updated.\n   *\n   * @param {string} paymentDetailsId Payment details identifier.\n   *\n   * @param {PaymentDetails} paymentDetails Payment details object\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {string} userId User identifier or one of the literals : 'current' for currently\n   * authenticated user, 'anonymous' for anonymous user\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  updatePaymentInfoPrim(paymentDetailsId: string, paymentDetails: Models.PaymentDetails, baseSiteId: string, userId: string): Promise<void>;\n  updatePaymentInfoPrim(paymentDetailsId: string, paymentDetails: Models.PaymentDetails, baseSiteId: string, userId: string, options: msRest.RequestOptionsBase): Promise<void>;\n  updatePaymentInfoPrim(paymentDetailsId: string, paymentDetails: Models.PaymentDetails, baseSiteId: string, userId: string, callback: msRest.ServiceCallback<void>): void;\n  updatePaymentInfoPrim(paymentDetailsId: string, paymentDetails: Models.PaymentDetails, baseSiteId: string, userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  updatePaymentInfoPrim(paymentDetailsId: string, paymentDetails: Models.PaymentDetails, baseSiteId: string, userId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.updatePaymentInfoPrimWithHttpOperationResponse(paymentDetailsId, paymentDetails, baseSiteId, userId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.updatePaymentInfoPrimWithHttpOperationResponse(paymentDetailsId, paymentDetails, baseSiteId, userId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as void;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Get a voucher based on code\n   *\n   * Returns details of a single voucher that is specified by its voucher identification code.\n   *\n   * @param {string} code Voucher identifier (code)\n   *\n   * @param {string} baseSiteId Base site identifier\n   *\n   * @param {CommerceWebservicesV2GetVoucherByCodeOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *                      {Models.Voucher} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.Voucher} for more information.\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getVoucherByCode(code: string, baseSiteId: string): Promise<Models.Voucher>;\n  getVoucherByCode(code: string, baseSiteId: string, options: Models.CommerceWebservicesV2GetVoucherByCodeOptionalParams): Promise<Models.Voucher>;\n  getVoucherByCode(code: string, baseSiteId: string, callback: msRest.ServiceCallback<Models.Voucher>): void;\n  getVoucherByCode(code: string, baseSiteId: string, options: Models.CommerceWebservicesV2GetVoucherByCodeOptionalParams, callback: msRest.ServiceCallback<Models.Voucher>): void;\n  getVoucherByCode(code: string, baseSiteId: string, options?: Models.CommerceWebservicesV2GetVoucherByCodeOptionalParams, callback?: msRest.ServiceCallback<Models.Voucher>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.Voucher>;\n    if (!callback) {\n      return this.getVoucherByCodeWithHttpOperationResponse(code, baseSiteId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.Voucher);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getVoucherByCodeWithHttpOperationResponse(code, baseSiteId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.Voucher;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n}\n\nexport { CommerceWebservicesV2, Models as CommerceWebservicesV2Models, Mappers as CommerceWebservicesV2Mappers };\n\n\n\n// WEBPACK FOOTER //\n// ./lib/commerceWebservicesV2.ts","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslib/tslib.es6.js\n// module id = 2\n// module chunks = 0","/*\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"ms-rest-js\";\n\n\n/**\n * @interface\n * An interface representing Country.\n */\nexport interface Country {\n  /**\n   * @member {string} [isocode]\n   */\n  isocode?: string;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n}\n\n/**\n * @interface\n * An interface representing Region.\n */\nexport interface Region {\n  /**\n   * @member {string} [countryIso]\n   */\n  countryIso?: string;\n  /**\n   * @member {string} [isocode]\n   */\n  isocode?: string;\n  /**\n   * @member {string} [isocodeShort]\n   */\n  isocodeShort?: string;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n}\n\n/**\n * @interface\n * An interface representing Address.\n */\nexport interface Address {\n  /**\n   * @member {string} [companyName]\n   */\n  companyName?: string;\n  /**\n   * @member {Country} [country]\n   */\n  country?: Country;\n  /**\n   * @member {boolean} [defaultAddress]\n   */\n  defaultAddress?: boolean;\n  /**\n   * @member {string} [email]\n   */\n  email?: string;\n  /**\n   * @member {string} [firstName]\n   */\n  firstName?: string;\n  /**\n   * @member {string} [formattedAddress]\n   */\n  formattedAddress?: string;\n  /**\n   * @member {string} [id]\n   */\n  id?: string;\n  /**\n   * @member {string} [lastName]\n   */\n  lastName?: string;\n  /**\n   * @member {string} [line1]\n   */\n  line1?: string;\n  /**\n   * @member {string} [line2]\n   */\n  line2?: string;\n  /**\n   * @member {string} [phone]\n   */\n  phone?: string;\n  /**\n   * @member {string} [postalCode]\n   */\n  postalCode?: string;\n  /**\n   * @member {Region} [region]\n   */\n  region?: Region;\n  /**\n   * @member {boolean} [shippingAddress]\n   */\n  shippingAddress?: boolean;\n  /**\n   * @member {string} [title]\n   */\n  title?: string;\n  /**\n   * @member {string} [titleCode]\n   */\n  titleCode?: string;\n  /**\n   * @member {string} [town]\n   */\n  town?: string;\n  /**\n   * @member {boolean} [visibleInAddressBook]\n   */\n  visibleInAddressBook?: boolean;\n}\n\n/**\n * @interface\n * An interface representing AddressList.\n */\nexport interface AddressList {\n  /**\n   * @member {Address[]} [addresses]\n   */\n  addresses?: Address[];\n}\n\n/**\n * @interface\n * An interface representing ErrorModel.\n * Error message\n *\n */\nexport interface ErrorModel {\n  /**\n   * @member {string} [message] Descriptive, human readable error message.\n   */\n  message?: string;\n  /**\n   * @member {string} [reason] Additional classification specific for each\n   * error type e.g. 'noStock'.\n   */\n  reason?: string;\n  /**\n   * @member {string} [subject] Identifier of the related object e.g. '1'.\n   */\n  subject?: string;\n  /**\n   * @member {string} [subjectType] Type of the object related to the error\n   * e.g. 'entry'.\n   */\n  subjectType?: string;\n  /**\n   * @member {string} [type] Type of the error e.g. 'LowStockError'.\n   */\n  type?: string;\n}\n\n/**\n * @interface\n * An interface representing ErrorList.\n * List of errors\n *\n */\nexport interface ErrorList {\n  /**\n   * @member {ErrorModel[]} [errors]\n   */\n  errors?: ErrorModel[];\n}\n\n/**\n * @interface\n * An interface representing AddressValidation.\n */\nexport interface AddressValidation {\n  /**\n   * @member {string} [decision]\n   */\n  decision?: string;\n  /**\n   * @member {ErrorList} [errors]\n   */\n  errors?: ErrorList;\n  /**\n   * @member {Address[]} [suggestedAddresses]\n   */\n  suggestedAddresses?: Address[];\n}\n\n/**\n * @interface\n * An interface representing Price.\n */\nexport interface Price {\n  /**\n   * @member {string} [currencyIso]\n   */\n  currencyIso?: string;\n  /**\n   * @member {string} [formattedValue]\n   */\n  formattedValue?: string;\n  /**\n   * @member {number} [maxQuantity]\n   */\n  maxQuantity?: number;\n  /**\n   * @member {number} [minQuantity]\n   */\n  minQuantity?: number;\n  /**\n   * @member {PriceType} [priceType] Possible values include: 'BUY', 'FROM'\n   */\n  priceType?: PriceType;\n  /**\n   * @member {number} [value]\n   */\n  value?: number;\n}\n\n/**\n * @interface\n * An interface representing Stock.\n */\nexport interface Stock {\n  /**\n   * @member {number} [stockLevel]\n   */\n  stockLevel?: number;\n  /**\n   * @member {string} [stockLevelStatus]\n   */\n  stockLevelStatus?: string;\n}\n\n/**\n * @interface\n * An interface representing Image.\n */\nexport interface Image {\n  /**\n   * @member {string} [altText]\n   */\n  altText?: string;\n  /**\n   * @member {string} [format]\n   */\n  format?: string;\n  /**\n   * @member {number} [galleryIndex]\n   */\n  galleryIndex?: number;\n  /**\n   * @member {ImageType} [imageType] Possible values include: 'PRIMARY',\n   * 'GALLERY'\n   */\n  imageType?: ImageType;\n  /**\n   * @member {string} [url]\n   */\n  url?: string;\n}\n\n/**\n * @interface\n * An interface representing VariantOptionQualifier.\n */\nexport interface VariantOptionQualifier {\n  /**\n   * @member {Image} [image]\n   */\n  image?: Image;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {string} [qualifier]\n   */\n  qualifier?: string;\n  /**\n   * @member {string} [value]\n   */\n  value?: string;\n}\n\n/**\n * @interface\n * An interface representing VariantOption.\n */\nexport interface VariantOption {\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n  /**\n   * @member {Price} [priceData]\n   */\n  priceData?: Price;\n  /**\n   * @member {Stock} [stock]\n   */\n  stock?: Stock;\n  /**\n   * @member {string} [url]\n   */\n  url?: string;\n  /**\n   * @member {VariantOptionQualifier[]} [variantOptionQualifiers]\n   */\n  variantOptionQualifiers?: VariantOptionQualifier[];\n}\n\n/**\n * @interface\n * An interface representing BaseOption.\n */\nexport interface BaseOption {\n  /**\n   * @member {VariantOption[]} [options]\n   */\n  options?: VariantOption[];\n  /**\n   * @member {VariantOption} [selected]\n   */\n  selected?: VariantOption;\n  /**\n   * @member {string} [variantType]\n   */\n  variantType?: string;\n}\n\n/**\n * @interface\n * An interface representing SearchQuery.\n */\nexport interface SearchQuery {\n  /**\n   * @member {string} [value]\n   */\n  value?: string;\n}\n\n/**\n * @interface\n * An interface representing SearchState.\n */\nexport interface SearchState {\n  /**\n   * @member {SearchQuery} [query]\n   */\n  query?: SearchQuery;\n  /**\n   * @member {string} [url]\n   */\n  url?: string;\n}\n\n/**\n * @interface\n * An interface representing Breadcrumb.\n */\nexport interface Breadcrumb {\n  /**\n   * @member {string} [facetCode]\n   */\n  facetCode?: string;\n  /**\n   * @member {string} [facetName]\n   */\n  facetName?: string;\n  /**\n   * @member {string} [facetValueCode]\n   */\n  facetValueCode?: string;\n  /**\n   * @member {string} [facetValueName]\n   */\n  facetValueName?: string;\n  /**\n   * @member {SearchState} [removeQuery]\n   */\n  removeQuery?: SearchState;\n  /**\n   * @member {SearchState} [truncateQuery]\n   */\n  truncateQuery?: SearchState;\n}\n\n/**\n * @interface\n * An interface representing Component.\n */\nexport interface Component {\n  /**\n   * @member {Date} [modifiedtime]\n   */\n  modifiedtime?: Date;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {any} [otherProperties]\n   */\n  otherProperties?: any;\n  /**\n   * @member {string} [typeCode]\n   */\n  typeCode?: string;\n  /**\n   * @member {string} [uid]\n   */\n  uid?: string;\n}\n\n/**\n * @interface\n * An interface representing ComponentList.\n */\nexport interface ComponentList {\n  /**\n   * @member {Component[]} [component]\n   */\n  component?: Component[];\n}\n\n/**\n * @interface\n * An interface representing ContentSlot.\n */\nexport interface ContentSlot {\n  /**\n   * @member {ComponentList} [components]\n   */\n  components?: ComponentList;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {string} [position]\n   */\n  position?: string;\n  /**\n   * @member {string} [slotId]\n   */\n  slotId?: string;\n  /**\n   * @member {boolean} [slotShared]\n   */\n  slotShared?: boolean;\n  /**\n   * @member {string} [slotStatus]\n   */\n  slotStatus?: string;\n}\n\n/**\n * @interface\n * An interface representing ContentSlotList.\n */\nexport interface ContentSlotList {\n  /**\n   * @member {ContentSlot[]} [contentSlot]\n   */\n  contentSlot?: ContentSlot[];\n}\n\n/**\n * @interface\n * An interface representing CMSPage.\n */\nexport interface CMSPage {\n  /**\n   * @member {ContentSlotList} [contentSlots]\n   */\n  contentSlots?: ContentSlotList;\n  /**\n   * @member {boolean} [defaultPage]\n   */\n  defaultPage?: boolean;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {string} [template]\n   */\n  template?: string;\n  /**\n   * @member {string} [title]\n   */\n  title?: string;\n  /**\n   * @member {string} [typeCode]\n   */\n  typeCode?: string;\n  /**\n   * @member {string} [uid]\n   */\n  uid?: string;\n}\n\n/**\n * @interface\n * An interface representing CardType.\n */\nexport interface CardType {\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n}\n\n/**\n * @interface\n * An interface representing CardTypeList.\n */\nexport interface CardTypeList {\n  /**\n   * @member {CardType[]} [cardTypes]\n   */\n  cardTypes?: CardType[];\n}\n\n/**\n * @interface\n * An interface representing PromotionOrderEntryConsumed.\n */\nexport interface PromotionOrderEntryConsumed {\n  /**\n   * @member {number} [adjustedUnitPrice]\n   */\n  adjustedUnitPrice?: number;\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n  /**\n   * @member {number} [orderEntryNumber]\n   */\n  orderEntryNumber?: number;\n  /**\n   * @member {number} [quantity]\n   */\n  quantity?: number;\n}\n\n/**\n * @interface\n * An interface representing PromotionRestriction.\n */\nexport interface PromotionRestriction {\n  /**\n   * @member {string} [description]\n   */\n  description?: string;\n  /**\n   * @member {string} [restrictionType]\n   */\n  restrictionType?: string;\n}\n\n/**\n * @interface\n * An interface representing Promotion.\n */\nexport interface Promotion {\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n  /**\n   * @member {string[]} [couldFireMessages]\n   */\n  couldFireMessages?: string[];\n  /**\n   * @member {string} [description]\n   */\n  description?: string;\n  /**\n   * @member {boolean} [enabled]\n   */\n  enabled?: boolean;\n  /**\n   * @member {Date} [endDate]\n   */\n  endDate?: Date;\n  /**\n   * @member {string[]} [firedMessages]\n   */\n  firedMessages?: string[];\n  /**\n   * @member {number} [priority]\n   */\n  priority?: number;\n  /**\n   * @member {Image} [productBanner]\n   */\n  productBanner?: Image;\n  /**\n   * @member {string} [promotionGroup]\n   */\n  promotionGroup?: string;\n  /**\n   * @member {string} [promotionType]\n   */\n  promotionType?: string;\n  /**\n   * @member {PromotionRestriction[]} [restrictions]\n   */\n  restrictions?: PromotionRestriction[];\n  /**\n   * @member {Date} [startDate]\n   */\n  startDate?: Date;\n  /**\n   * @member {string} [title]\n   */\n  title?: string;\n}\n\n/**\n * @interface\n * An interface representing PromotionResult.\n */\nexport interface PromotionResult {\n  /**\n   * @member {PromotionOrderEntryConsumed[]} [consumedEntries]\n   */\n  consumedEntries?: PromotionOrderEntryConsumed[];\n  /**\n   * @member {string} [description]\n   */\n  description?: string;\n  /**\n   * @member {Promotion} [promotion]\n   */\n  promotion?: Promotion;\n}\n\n/**\n * @interface\n * An interface representing Currency.\n */\nexport interface Currency {\n  /**\n   * @member {boolean} [active]\n   */\n  active?: boolean;\n  /**\n   * @member {string} [isocode]\n   */\n  isocode?: string;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {string} [symbol]\n   */\n  symbol?: string;\n}\n\n/**\n * @interface\n * An interface representing Voucher.\n */\nexport interface Voucher {\n  /**\n   * @member {Price} [appliedValue]\n   */\n  appliedValue?: Price;\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n  /**\n   * @member {Currency} [currency]\n   */\n  currency?: Currency;\n  /**\n   * @member {string} [description]\n   */\n  description?: string;\n  /**\n   * @member {boolean} [freeShipping]\n   */\n  freeShipping?: boolean;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {number} [value]\n   */\n  value?: number;\n  /**\n   * @member {string} [valueFormatted]\n   */\n  valueFormatted?: string;\n  /**\n   * @member {string} [valueString]\n   */\n  valueString?: string;\n  /**\n   * @member {string} [voucherCode]\n   */\n  voucherCode?: string;\n}\n\n/**\n * @interface\n * An interface representing DeliveryMode.\n */\nexport interface DeliveryMode {\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n  /**\n   * @member {Price} [deliveryCost]\n   */\n  deliveryCost?: Price;\n  /**\n   * @member {string} [description]\n   */\n  description?: string;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n}\n\n/**\n * @interface\n * An interface representing GeoPoint.\n */\nexport interface GeoPoint {\n  /**\n   * @member {number} [latitude]\n   */\n  latitude?: number;\n  /**\n   * @member {number} [longitude]\n   */\n  longitude?: number;\n}\n\n/**\n * @interface\n * An interface representing Time.\n */\nexport interface Time {\n  /**\n   * @member {string} [formattedHour]\n   */\n  formattedHour?: string;\n  /**\n   * @member {Uint8Array} [hour]\n   */\n  hour?: Uint8Array;\n  /**\n   * @member {Uint8Array} [minute]\n   */\n  minute?: Uint8Array;\n}\n\n/**\n * @interface\n * An interface representing SpecialOpeningDay.\n */\nexport interface SpecialOpeningDay {\n  /**\n   * @member {boolean} [closed]\n   */\n  closed?: boolean;\n  /**\n   * @member {Time} [closingTime]\n   */\n  closingTime?: Time;\n  /**\n   * @member {string} [comment]\n   */\n  comment?: string;\n  /**\n   * @member {Date} [date]\n   */\n  date?: Date;\n  /**\n   * @member {string} [formattedDate]\n   */\n  formattedDate?: string;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {Time} [openingTime]\n   */\n  openingTime?: Time;\n}\n\n/**\n * @interface\n * An interface representing WeekdayOpeningDay.\n */\nexport interface WeekdayOpeningDay {\n  /**\n   * @member {boolean} [closed]\n   */\n  closed?: boolean;\n  /**\n   * @member {Time} [closingTime]\n   */\n  closingTime?: Time;\n  /**\n   * @member {Time} [openingTime]\n   */\n  openingTime?: Time;\n  /**\n   * @member {string} [weekDay]\n   */\n  weekDay?: string;\n}\n\n/**\n * @interface\n * An interface representing OpeningSchedule.\n */\nexport interface OpeningSchedule {\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {SpecialOpeningDay[]} [specialDayOpeningList]\n   */\n  specialDayOpeningList?: SpecialOpeningDay[];\n  /**\n   * @member {WeekdayOpeningDay[]} [weekDayOpeningList]\n   */\n  weekDayOpeningList?: WeekdayOpeningDay[];\n}\n\n/**\n * @interface\n * An interface representing PointOfService.\n */\nexport interface PointOfService {\n  /**\n   * @member {Address} [address]\n   */\n  address?: Address;\n  /**\n   * @member {string} [description]\n   */\n  description?: string;\n  /**\n   * @member {string} [displayName]\n   */\n  displayName?: string;\n  /**\n   * @member {number} [distanceKm]\n   */\n  distanceKm?: number;\n  /**\n   * @member {{ [propertyName: string]: string }} [features]\n   */\n  features?: { [propertyName: string]: string };\n  /**\n   * @member {string} [formattedDistance]\n   */\n  formattedDistance?: string;\n  /**\n   * @member {GeoPoint} [geoPoint]\n   */\n  geoPoint?: GeoPoint;\n  /**\n   * @member {Image} [mapIcon]\n   */\n  mapIcon?: Image;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {OpeningSchedule} [openingHours]\n   */\n  openingHours?: OpeningSchedule;\n  /**\n   * @member {string} [storeContent]\n   */\n  storeContent?: string;\n  /**\n   * @member {Image[]} [storeImages]\n   */\n  storeImages?: Image[];\n  /**\n   * @member {string} [url]\n   */\n  url?: string;\n}\n\n/**\n * @interface\n * An interface representing Category.\n */\nexport interface Category {\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n  /**\n   * @member {Image} [image]\n   */\n  image?: Image;\n  /**\n   * @member {string} [url]\n   */\n  url?: string;\n}\n\n/**\n * @interface\n * An interface representing FeatureUnit.\n */\nexport interface FeatureUnit {\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {string} [symbol]\n   */\n  symbol?: string;\n  /**\n   * @member {string} [unitType]\n   */\n  unitType?: string;\n}\n\n/**\n * @interface\n * An interface representing FeatureValue.\n */\nexport interface FeatureValue {\n  /**\n   * @member {string} [value]\n   */\n  value?: string;\n}\n\n/**\n * @interface\n * An interface representing Feature.\n */\nexport interface Feature {\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n  /**\n   * @member {boolean} [comparable]\n   */\n  comparable?: boolean;\n  /**\n   * @member {string} [description]\n   */\n  description?: string;\n  /**\n   * @member {FeatureUnit} [featureUnit]\n   */\n  featureUnit?: FeatureUnit;\n  /**\n   * @member {FeatureValue[]} [featureValues]\n   */\n  featureValues?: FeatureValue[];\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {boolean} [range]\n   */\n  range?: boolean;\n  /**\n   * @member {string} [type]\n   */\n  type?: string;\n}\n\n/**\n * @interface\n * An interface representing Classification.\n */\nexport interface Classification {\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n  /**\n   * @member {Feature[]} [features]\n   */\n  features?: Feature[];\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n}\n\n/**\n * @interface\n * An interface representing FutureStock.\n */\nexport interface FutureStock {\n  /**\n   * @member {Date} [date]\n   */\n  date?: Date;\n  /**\n   * @member {string} [formattedDate]\n   */\n  formattedDate?: string;\n  /**\n   * @member {Stock} [stock]\n   */\n  stock?: Stock;\n}\n\n/**\n * @interface\n * An interface representing PriceRange.\n */\nexport interface PriceRange {\n  /**\n   * @member {Price} [maxPrice]\n   */\n  maxPrice?: Price;\n  /**\n   * @member {Price} [minPrice]\n   */\n  minPrice?: Price;\n}\n\n/**\n * @interface\n * An interface representing ProductReference.\n */\nexport interface ProductReference {\n  /**\n   * @member {string} [description]\n   */\n  description?: string;\n  /**\n   * @member {boolean} [preselected]\n   */\n  preselected?: boolean;\n  /**\n   * @member {number} [quantity]\n   */\n  quantity?: number;\n  /**\n   * @member {string} [referenceType]\n   */\n  referenceType?: string;\n  /**\n   * @member {Product} [target]\n   */\n  target?: Product;\n}\n\n/**\n * @interface\n * An interface representing Language.\n */\nexport interface Language {\n  /**\n   * @member {boolean} [active]\n   */\n  active?: boolean;\n  /**\n   * @member {string} [isocode]\n   */\n  isocode?: string;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {string} [nativeName]\n   */\n  nativeName?: string;\n}\n\n/**\n * @interface\n * An interface representing User.\n */\nexport interface User {\n  /**\n   * @member {Currency} [currency]\n   */\n  currency?: Currency;\n  /**\n   * @member {string} [customerId]\n   */\n  customerId?: string;\n  /**\n   * @member {Date} [deactivationDate]\n   */\n  deactivationDate?: Date;\n  /**\n   * @member {Address} [defaultAddress]\n   */\n  defaultAddress?: Address;\n  /**\n   * @member {string} [displayUid]\n   */\n  displayUid?: string;\n  /**\n   * @member {string} [firstName]\n   */\n  firstName?: string;\n  /**\n   * @member {Language} [language]\n   */\n  language?: Language;\n  /**\n   * @member {string} [lastName]\n   */\n  lastName?: string;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {string} [title]\n   */\n  title?: string;\n  /**\n   * @member {string} [titleCode]\n   */\n  titleCode?: string;\n  /**\n   * @member {string} [uid]\n   */\n  uid?: string;\n}\n\n/**\n * @interface\n * An interface representing Review.\n */\nexport interface Review {\n  /**\n   * @member {string} [alias]\n   */\n  alias?: string;\n  /**\n   * @member {string} [comment]\n   */\n  comment?: string;\n  /**\n   * @member {Date} [date]\n   */\n  date?: Date;\n  /**\n   * @member {string} [headline]\n   */\n  headline?: string;\n  /**\n   * @member {string} [id]\n   */\n  id?: string;\n  /**\n   * @member {User} [principal]\n   */\n  principal?: User;\n  /**\n   * @member {number} [rating]\n   */\n  rating?: number;\n}\n\n/**\n * @interface\n * An interface representing VariantCategory.\n */\nexport interface VariantCategory {\n  /**\n   * @member {boolean} [hasImage]\n   */\n  hasImage?: boolean;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {number} [priority]\n   */\n  priority?: number;\n}\n\n/**\n * @interface\n * An interface representing VariantValueCategory.\n */\nexport interface VariantValueCategory {\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {number} [sequence]\n   */\n  sequence?: number;\n  /**\n   * @member {VariantCategory[]} [superCategories]\n   */\n  superCategories?: VariantCategory[];\n}\n\n/**\n * @interface\n * An interface representing VariantMatrixElement.\n */\nexport interface VariantMatrixElement {\n  /**\n   * @member {VariantMatrixElement[]} [elements]\n   */\n  elements?: VariantMatrixElement[];\n  /**\n   * @member {boolean} [isLeaf]\n   */\n  isLeaf?: boolean;\n  /**\n   * @member {VariantCategory} [parentVariantCategory]\n   */\n  parentVariantCategory?: VariantCategory;\n  /**\n   * @member {VariantOption} [variantOption]\n   */\n  variantOption?: VariantOption;\n  /**\n   * @member {VariantValueCategory} [variantValueCategory]\n   */\n  variantValueCategory?: VariantValueCategory;\n}\n\n/**\n * @interface\n * An interface representing Product.\n */\nexport interface Product {\n  /**\n   * @member {boolean} [availableForPickup]\n   */\n  availableForPickup?: boolean;\n  /**\n   * @member {number} [averageRating]\n   */\n  averageRating?: number;\n  /**\n   * @member {BaseOption[]} [baseOptions]\n   */\n  baseOptions?: BaseOption[];\n  /**\n   * @member {string} [baseProduct]\n   */\n  baseProduct?: string;\n  /**\n   * @member {Category[]} [categories]\n   */\n  categories?: Category[];\n  /**\n   * @member {Classification[]} [classifications]\n   */\n  classifications?: Classification[];\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n  /**\n   * @member {string} [description]\n   */\n  description?: string;\n  /**\n   * @member {FutureStock[]} [futureStocks]\n   */\n  futureStocks?: FutureStock[];\n  /**\n   * @member {Image[]} [images]\n   */\n  images?: Image[];\n  /**\n   * @member {string} [manufacturer]\n   */\n  manufacturer?: string;\n  /**\n   * @member {boolean} [multidimensional]\n   */\n  multidimensional?: boolean;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {number} [numberOfReviews]\n   */\n  numberOfReviews?: number;\n  /**\n   * @member {Promotion[]} [potentialPromotions]\n   */\n  potentialPromotions?: Promotion[];\n  /**\n   * @member {Price} [price]\n   */\n  price?: Price;\n  /**\n   * @member {PriceRange} [priceRange]\n   */\n  priceRange?: PriceRange;\n  /**\n   * @member {ProductReference[]} [productReferences]\n   */\n  productReferences?: ProductReference[];\n  /**\n   * @member {boolean} [purchasable]\n   */\n  purchasable?: boolean;\n  /**\n   * @member {Review[]} [reviews]\n   */\n  reviews?: Review[];\n  /**\n   * @member {Stock} [stock]\n   */\n  stock?: Stock;\n  /**\n   * @member {string} [summary]\n   */\n  summary?: string;\n  /**\n   * @member {string} [url]\n   */\n  url?: string;\n  /**\n   * @member {VariantMatrixElement[]} [variantMatrix]\n   */\n  variantMatrix?: VariantMatrixElement[];\n  /**\n   * @member {VariantOption[]} [variantOptions]\n   */\n  variantOptions?: VariantOption[];\n  /**\n   * @member {string} [variantType]\n   */\n  variantType?: string;\n  /**\n   * @member {Price[]} [volumePrices]\n   */\n  volumePrices?: Price[];\n  /**\n   * @member {boolean} [volumePricesFlag]\n   */\n  volumePricesFlag?: boolean;\n}\n\n/**\n * @interface\n * An interface representing OrderEntry.\n */\nexport interface OrderEntry {\n  /**\n   * @member {Price} [basePrice]\n   */\n  basePrice?: Price;\n  /**\n   * @member {DeliveryMode} [deliveryMode]\n   */\n  deliveryMode?: DeliveryMode;\n  /**\n   * @member {PointOfService} [deliveryPointOfService]\n   */\n  deliveryPointOfService?: PointOfService;\n  /**\n   * @member {number} [entryNumber]\n   */\n  entryNumber?: number;\n  /**\n   * @member {Product} [product]\n   */\n  product?: Product;\n  /**\n   * @member {number} [quantity]\n   */\n  quantity?: number;\n  /**\n   * @member {Price} [totalPrice]\n   */\n  totalPrice?: Price;\n  /**\n   * @member {boolean} [updateable]\n   */\n  updateable?: boolean;\n}\n\n/**\n * @interface\n * An interface representing DeliveryOrderEntryGroup.\n */\nexport interface DeliveryOrderEntryGroup {\n  /**\n   * @member {Address} [deliveryAddress]\n   */\n  deliveryAddress?: Address;\n  /**\n   * @member {OrderEntry[]} [entries]\n   */\n  entries?: OrderEntry[];\n  /**\n   * @member {number} [quantity]\n   */\n  quantity?: number;\n  /**\n   * @member {Price} [totalPriceWithTax]\n   */\n  totalPriceWithTax?: Price;\n}\n\n/**\n * @interface\n * An interface representing PaymentDetails.\n */\nexport interface PaymentDetails {\n  /**\n   * @member {string} [accountHolderName]\n   */\n  accountHolderName?: string;\n  /**\n   * @member {Address} [billingAddress]\n   */\n  billingAddress?: Address;\n  /**\n   * @member {string} [cardNumber]\n   */\n  cardNumber?: string;\n  /**\n   * @member {CardType} [cardType]\n   */\n  cardType?: CardType;\n  /**\n   * @member {boolean} [defaultPayment]\n   */\n  defaultPayment?: boolean;\n  /**\n   * @member {string} [expiryMonth]\n   */\n  expiryMonth?: string;\n  /**\n   * @member {string} [expiryYear]\n   */\n  expiryYear?: string;\n  /**\n   * @member {string} [id]\n   */\n  id?: string;\n  /**\n   * @member {string} [issueNumber]\n   */\n  issueNumber?: string;\n  /**\n   * @member {boolean} [saved]\n   */\n  saved?: boolean;\n  /**\n   * @member {string} [startMonth]\n   */\n  startMonth?: string;\n  /**\n   * @member {string} [startYear]\n   */\n  startYear?: string;\n  /**\n   * @member {string} [subscriptionId]\n   */\n  subscriptionId?: string;\n}\n\n/**\n * @interface\n * An interface representing PickupOrderEntryGroup.\n */\nexport interface PickupOrderEntryGroup {\n  /**\n   * @member {PointOfService} [deliveryPointOfService]\n   */\n  deliveryPointOfService?: PointOfService;\n  /**\n   * @member {number} [distance]\n   */\n  distance?: number;\n  /**\n   * @member {OrderEntry[]} [entries]\n   */\n  entries?: OrderEntry[];\n  /**\n   * @member {number} [quantity]\n   */\n  quantity?: number;\n  /**\n   * @member {Price} [totalPriceWithTax]\n   */\n  totalPriceWithTax?: Price;\n}\n\n/**\n * @interface\n * An interface representing Principal.\n */\nexport interface Principal {\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {string} [uid]\n   */\n  uid?: string;\n}\n\n/**\n * @interface\n * An interface representing Cart.\n */\nexport interface Cart {\n  /**\n   * @member {PromotionResult[]} [appliedOrderPromotions]\n   */\n  appliedOrderPromotions?: PromotionResult[];\n  /**\n   * @member {PromotionResult[]} [appliedProductPromotions]\n   */\n  appliedProductPromotions?: PromotionResult[];\n  /**\n   * @member {Voucher[]} [appliedVouchers]\n   */\n  appliedVouchers?: Voucher[];\n  /**\n   * @member {boolean} [calculated]\n   */\n  calculated?: boolean;\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n  /**\n   * @member {Address} [deliveryAddress]\n   */\n  deliveryAddress?: Address;\n  /**\n   * @member {Price} [deliveryCost]\n   */\n  deliveryCost?: Price;\n  /**\n   * @member {number} [deliveryItemsQuantity]\n   */\n  deliveryItemsQuantity?: number;\n  /**\n   * @member {DeliveryMode} [deliveryMode]\n   */\n  deliveryMode?: DeliveryMode;\n  /**\n   * @member {DeliveryOrderEntryGroup[]} [deliveryOrderGroups]\n   */\n  deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n  /**\n   * @member {string} [description]\n   */\n  description?: string;\n  /**\n   * @member {OrderEntry[]} [entries]\n   */\n  entries?: OrderEntry[];\n  /**\n   * @member {Date} [expirationTime]\n   */\n  expirationTime?: Date;\n  /**\n   * @member {string} [guid]\n   */\n  guid?: string;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {boolean} [net]\n   */\n  net?: boolean;\n  /**\n   * @member {Price} [orderDiscounts]\n   */\n  orderDiscounts?: Price;\n  /**\n   * @member {PaymentDetails} [paymentInfo]\n   */\n  paymentInfo?: PaymentDetails;\n  /**\n   * @member {number} [pickupItemsQuantity]\n   */\n  pickupItemsQuantity?: number;\n  /**\n   * @member {PickupOrderEntryGroup[]} [pickupOrderGroups]\n   */\n  pickupOrderGroups?: PickupOrderEntryGroup[];\n  /**\n   * @member {PromotionResult[]} [potentialOrderPromotions]\n   */\n  potentialOrderPromotions?: PromotionResult[];\n  /**\n   * @member {PromotionResult[]} [potentialProductPromotions]\n   */\n  potentialProductPromotions?: PromotionResult[];\n  /**\n   * @member {Price} [productDiscounts]\n   */\n  productDiscounts?: Price;\n  /**\n   * @member {Date} [saveTime]\n   */\n  saveTime?: Date;\n  /**\n   * @member {Principal} [savedBy]\n   */\n  savedBy?: Principal;\n  /**\n   * @member {string} [site]\n   */\n  site?: string;\n  /**\n   * @member {string} [store]\n   */\n  store?: string;\n  /**\n   * @member {Price} [subTotal]\n   */\n  subTotal?: Price;\n  /**\n   * @member {Price} [totalDiscounts]\n   */\n  totalDiscounts?: Price;\n  /**\n   * @member {number} [totalItems]\n   */\n  totalItems?: number;\n  /**\n   * @member {Price} [totalPrice]\n   */\n  totalPrice?: Price;\n  /**\n   * @member {Price} [totalPriceWithTax]\n   */\n  totalPriceWithTax?: Price;\n  /**\n   * @member {Price} [totalTax]\n   */\n  totalTax?: Price;\n  /**\n   * @member {number} [totalUnitCount]\n   */\n  totalUnitCount?: number;\n  /**\n   * @member {Principal} [user]\n   */\n  user?: Principal;\n}\n\n/**\n * @interface\n * An interface representing CartList.\n */\nexport interface CartList {\n  /**\n   * @member {Cart[]} [carts]\n   */\n  carts?: Cart[];\n}\n\n/**\n * @interface\n * An interface representing CartModification.\n */\nexport interface CartModification {\n  /**\n   * @member {boolean} [deliveryModeChanged]\n   */\n  deliveryModeChanged?: boolean;\n  /**\n   * @member {OrderEntry} [entry]\n   */\n  entry?: OrderEntry;\n  /**\n   * @member {number} [quantity]\n   */\n  quantity?: number;\n  /**\n   * @member {number} [quantityAdded]\n   */\n  quantityAdded?: number;\n  /**\n   * @member {string} [statusCode]\n   */\n  statusCode?: string;\n  /**\n   * @member {string} [statusMessage]\n   */\n  statusMessage?: string;\n}\n\n/**\n * @interface\n * An interface representing CategoryHierarchy.\n */\nexport interface CategoryHierarchy {\n  /**\n   * @member {string} [id]\n   */\n  id?: string;\n  /**\n   * @member {Date} [lastModified]\n   */\n  lastModified?: Date;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {CategoryHierarchy[]} [subcategories]\n   */\n  subcategories?: CategoryHierarchy[];\n  /**\n   * @member {string} [url]\n   */\n  url?: string;\n}\n\n/**\n * @interface\n * An interface representing CatalogVersion.\n */\nexport interface CatalogVersion {\n  /**\n   * @member {CategoryHierarchy[]} [categories]\n   */\n  categories?: CategoryHierarchy[];\n  /**\n   * @member {string} [id]\n   */\n  id?: string;\n  /**\n   * @member {Date} [lastModified]\n   */\n  lastModified?: Date;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {string} [url]\n   */\n  url?: string;\n}\n\n/**\n * @interface\n * An interface representing Catalog.\n */\nexport interface Catalog {\n  /**\n   * @member {CatalogVersion[]} [catalogVersions]\n   */\n  catalogVersions?: CatalogVersion[];\n  /**\n   * @member {string} [id]\n   */\n  id?: string;\n  /**\n   * @member {Date} [lastModified]\n   */\n  lastModified?: Date;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {string} [url]\n   */\n  url?: string;\n}\n\n/**\n * @interface\n * An interface representing CatalogList.\n */\nexport interface CatalogList {\n  /**\n   * @member {Catalog[]} [catalogs]\n   */\n  catalogs?: Catalog[];\n}\n\n/**\n * @interface\n * An interface representing ComponentIDList.\n */\nexport interface ComponentIDList {\n  /**\n   * @member {string[]} [idList]\n   */\n  idList?: string[];\n}\n\n/**\n * @interface\n * An interface representing ConsignmentEntry.\n */\nexport interface ConsignmentEntry {\n  /**\n   * @member {OrderEntry} [orderEntry]\n   */\n  orderEntry?: OrderEntry;\n  /**\n   * @member {number} [quantity]\n   */\n  quantity?: number;\n  /**\n   * @member {number} [shippedQuantity]\n   */\n  shippedQuantity?: number;\n}\n\n/**\n * @interface\n * An interface representing Consignment.\n */\nexport interface Consignment {\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n  /**\n   * @member {PointOfService} [deliveryPointOfService]\n   */\n  deliveryPointOfService?: PointOfService;\n  /**\n   * @member {ConsignmentEntry[]} [entries]\n   */\n  entries?: ConsignmentEntry[];\n  /**\n   * @member {Address} [shippingAddress]\n   */\n  shippingAddress?: Address;\n  /**\n   * @member {string} [status]\n   */\n  status?: string;\n  /**\n   * @member {Date} [statusDate]\n   */\n  statusDate?: Date;\n  /**\n   * @member {string} [trackingID]\n   */\n  trackingID?: string;\n}\n\n/**\n * @interface\n * An interface representing CountryList.\n */\nexport interface CountryList {\n  /**\n   * @member {Country[]} [countries]\n   */\n  countries?: Country[];\n}\n\n/**\n * @interface\n * An interface representing CurrencyList.\n */\nexport interface CurrencyList {\n  /**\n   * @member {Currency[]} [currencies]\n   */\n  currencies?: Currency[];\n}\n\n/**\n * @interface\n * An interface representing DeliveryModeList.\n */\nexport interface DeliveryModeList {\n  /**\n   * @member {DeliveryMode[]} [deliveryModes]\n   */\n  deliveryModes?: DeliveryMode[];\n}\n\n/**\n * @interface\n * An interface representing FacetValue.\n */\nexport interface FacetValue {\n  /**\n   * @member {number} [count]\n   */\n  count?: number;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {SearchState} [query]\n   */\n  query?: SearchState;\n  /**\n   * @member {boolean} [selected]\n   */\n  selected?: boolean;\n}\n\n/**\n * @interface\n * An interface representing Facet.\n */\nexport interface Facet {\n  /**\n   * @member {boolean} [category]\n   */\n  category?: boolean;\n  /**\n   * @member {boolean} [multiSelect]\n   */\n  multiSelect?: boolean;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {number} [priority]\n   */\n  priority?: number;\n  /**\n   * @member {FacetValue[]} [topValues]\n   */\n  topValues?: FacetValue[];\n  /**\n   * @member {FacetValue[]} [values]\n   */\n  values?: FacetValue[];\n  /**\n   * @member {boolean} [visible]\n   */\n  visible?: boolean;\n}\n\n/**\n * @interface\n * An interface representing LanguageList.\n */\nexport interface LanguageList {\n  /**\n   * @member {Language[]} [languages]\n   */\n  languages?: Language[];\n}\n\n/**\n * @interface\n * An interface representing Pagination.\n * Pagination info\n *\n */\nexport interface Pagination {\n  /**\n   * @member {number} [count] Number of elements on this page\n   */\n  count?: number;\n  /**\n   * @member {number} [page] Current page number\n   */\n  page?: number;\n  /**\n   * @member {number} [totalCount] Total number of elements\n   */\n  totalCount?: number;\n  /**\n   * @member {number} [totalPages] Total number of pages\n   */\n  totalPages?: number;\n}\n\n/**\n * @interface\n * An interface representing Sort.\n * Sort option\n *\n */\nexport interface Sort {\n  /**\n   * @member {boolean} [asc]\n   */\n  asc?: boolean;\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n}\n\n/**\n * @interface\n * An interface representing ListAdaptedComponents.\n */\nexport interface ListAdaptedComponents {\n  /**\n   * @member {any[]} [components]\n   */\n  components?: any[];\n  /**\n   * @member {Pagination} [pagination]\n   */\n  pagination?: Pagination;\n  /**\n   * @member {Sort[]} [sorts]\n   */\n  sorts?: Sort[];\n}\n\n/**\n * @interface\n * An interface representing MemberList.\n */\nexport interface MemberList {\n  /**\n   * @member {Principal[]} [members]\n   */\n  members?: Principal[];\n}\n\n/**\n * @interface\n * An interface representing OrderEntryList.\n */\nexport interface OrderEntryList {\n  /**\n   * @member {OrderEntry[]} [orderEntries]\n   */\n  orderEntries?: OrderEntry[];\n}\n\n/**\n * @interface\n * An interface representing OrderHistory.\n */\nexport interface OrderHistory {\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n  /**\n   * @member {string} [guid]\n   */\n  guid?: string;\n  /**\n   * @member {Date} [placed]\n   */\n  placed?: Date;\n  /**\n   * @member {string} [status]\n   */\n  status?: string;\n  /**\n   * @member {string} [statusDisplay]\n   */\n  statusDisplay?: string;\n  /**\n   * @member {Price} [total]\n   */\n  total?: Price;\n}\n\n/**\n * @interface\n * An interface representing PaginationModel.\n */\nexport interface PaginationModel {\n  /**\n   * @member {number} [currentPage]\n   */\n  currentPage?: number;\n  /**\n   * @member {number} [pageSize]\n   */\n  pageSize?: number;\n  /**\n   * @member {string} [sort]\n   */\n  sort?: string;\n  /**\n   * @member {number} [totalPages]\n   */\n  totalPages?: number;\n  /**\n   * @member {number} [totalResults]\n   */\n  totalResults?: number;\n}\n\n/**\n * @interface\n * An interface representing SortModel.\n */\nexport interface SortModel {\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {boolean} [selected]\n   */\n  selected?: boolean;\n}\n\n/**\n * @interface\n * An interface representing OrderHistoryList.\n */\nexport interface OrderHistoryList {\n  /**\n   * @member {OrderHistory[]} [orders]\n   */\n  orders?: OrderHistory[];\n  /**\n   * @member {PaginationModel} [pagination]\n   */\n  pagination?: PaginationModel;\n  /**\n   * @member {SortModel[]} [sorts]\n   */\n  sorts?: SortModel[];\n}\n\n/**\n * @interface\n * An interface representing OrderStatusUpdateElement.\n */\nexport interface OrderStatusUpdateElement {\n  /**\n   * @member {string} [baseSiteId]\n   */\n  baseSiteId?: string;\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n  /**\n   * @member {string} [status]\n   */\n  status?: string;\n}\n\n/**\n * @interface\n * An interface representing OrderStatusUpdateElementList.\n */\nexport interface OrderStatusUpdateElementList {\n  /**\n   * @member {OrderStatusUpdateElement[]} [orderStatusUpdateElements]\n   */\n  orderStatusUpdateElements?: OrderStatusUpdateElement[];\n}\n\n/**\n * @interface\n * An interface representing Order.\n */\nexport interface Order {\n  /**\n   * @member {PromotionResult[]} [appliedOrderPromotions]\n   */\n  appliedOrderPromotions?: PromotionResult[];\n  /**\n   * @member {PromotionResult[]} [appliedProductPromotions]\n   */\n  appliedProductPromotions?: PromotionResult[];\n  /**\n   * @member {Voucher[]} [appliedVouchers]\n   */\n  appliedVouchers?: Voucher[];\n  /**\n   * @member {boolean} [calculated]\n   */\n  calculated?: boolean;\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n  /**\n   * @member {Consignment[]} [consignments]\n   */\n  consignments?: Consignment[];\n  /**\n   * @member {Date} [created]\n   */\n  created?: Date;\n  /**\n   * @member {Address} [deliveryAddress]\n   */\n  deliveryAddress?: Address;\n  /**\n   * @member {Price} [deliveryCost]\n   */\n  deliveryCost?: Price;\n  /**\n   * @member {number} [deliveryItemsQuantity]\n   */\n  deliveryItemsQuantity?: number;\n  /**\n   * @member {DeliveryMode} [deliveryMode]\n   */\n  deliveryMode?: DeliveryMode;\n  /**\n   * @member {DeliveryOrderEntryGroup[]} [deliveryOrderGroups]\n   */\n  deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n  /**\n   * @member {string} [deliveryStatus]\n   */\n  deliveryStatus?: string;\n  /**\n   * @member {string} [deliveryStatusDisplay]\n   */\n  deliveryStatusDisplay?: string;\n  /**\n   * @member {OrderEntry[]} [entries]\n   */\n  entries?: OrderEntry[];\n  /**\n   * @member {boolean} [guestCustomer]\n   */\n  guestCustomer?: boolean;\n  /**\n   * @member {string} [guid]\n   */\n  guid?: string;\n  /**\n   * @member {boolean} [net]\n   */\n  net?: boolean;\n  /**\n   * @member {Price} [orderDiscounts]\n   */\n  orderDiscounts?: Price;\n  /**\n   * @member {PaymentDetails} [paymentInfo]\n   */\n  paymentInfo?: PaymentDetails;\n  /**\n   * @member {number} [pickupItemsQuantity]\n   */\n  pickupItemsQuantity?: number;\n  /**\n   * @member {PickupOrderEntryGroup[]} [pickupOrderGroups]\n   */\n  pickupOrderGroups?: PickupOrderEntryGroup[];\n  /**\n   * @member {Price} [productDiscounts]\n   */\n  productDiscounts?: Price;\n  /**\n   * @member {string} [site]\n   */\n  site?: string;\n  /**\n   * @member {string} [status]\n   */\n  status?: string;\n  /**\n   * @member {string} [statusDisplay]\n   */\n  statusDisplay?: string;\n  /**\n   * @member {string} [store]\n   */\n  store?: string;\n  /**\n   * @member {Price} [subTotal]\n   */\n  subTotal?: Price;\n  /**\n   * @member {Price} [totalDiscounts]\n   */\n  totalDiscounts?: Price;\n  /**\n   * @member {number} [totalItems]\n   */\n  totalItems?: number;\n  /**\n   * @member {Price} [totalPrice]\n   */\n  totalPrice?: Price;\n  /**\n   * @member {Price} [totalPriceWithTax]\n   */\n  totalPriceWithTax?: Price;\n  /**\n   * @member {Price} [totalTax]\n   */\n  totalTax?: Price;\n  /**\n   * @member {OrderEntry[]} [unconsignedEntries]\n   */\n  unconsignedEntries?: OrderEntry[];\n  /**\n   * @member {Principal} [user]\n   */\n  user?: Principal;\n}\n\n/**\n * @interface\n * An interface representing PaymentDetailsList.\n */\nexport interface PaymentDetailsList {\n  /**\n   * @member {PaymentDetails[]} [payments]\n   */\n  payments?: PaymentDetails[];\n}\n\n/**\n * @interface\n * An interface representing PointOfServiceStock.\n */\nexport interface PointOfServiceStock {\n  /**\n   * @member {Address} [address]\n   */\n  address?: Address;\n  /**\n   * @member {string} [description]\n   */\n  description?: string;\n  /**\n   * @member {string} [displayName]\n   */\n  displayName?: string;\n  /**\n   * @member {number} [distanceKm]\n   */\n  distanceKm?: number;\n  /**\n   * @member {{ [propertyName: string]: string }} [features]\n   */\n  features?: { [propertyName: string]: string };\n  /**\n   * @member {string} [formattedDistance]\n   */\n  formattedDistance?: string;\n  /**\n   * @member {GeoPoint} [geoPoint]\n   */\n  geoPoint?: GeoPoint;\n  /**\n   * @member {Image} [mapIcon]\n   */\n  mapIcon?: Image;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {OpeningSchedule} [openingHours]\n   */\n  openingHours?: OpeningSchedule;\n  /**\n   * @member {Stock} [stockInfo]\n   */\n  stockInfo?: Stock;\n  /**\n   * @member {string} [storeContent]\n   */\n  storeContent?: string;\n  /**\n   * @member {Image[]} [storeImages]\n   */\n  storeImages?: Image[];\n  /**\n   * @member {string} [url]\n   */\n  url?: string;\n}\n\n/**\n * @interface\n * An interface representing ProductExpressUpdateElement.\n */\nexport interface ProductExpressUpdateElement {\n  /**\n   * @member {string} [catalogId]\n   */\n  catalogId?: string;\n  /**\n   * @member {string} [catalogVersion]\n   */\n  catalogVersion?: string;\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n}\n\n/**\n * @interface\n * An interface representing ProductExpressUpdateElementList.\n */\nexport interface ProductExpressUpdateElementList {\n  /**\n   * @member {ProductExpressUpdateElement[]} [productExpressUpdateElements]\n   */\n  productExpressUpdateElements?: ProductExpressUpdateElement[];\n}\n\n/**\n * @interface\n * An interface representing ProductList.\n */\nexport interface ProductList {\n  /**\n   * @member {string} [catalog]\n   */\n  catalog?: string;\n  /**\n   * @member {number} [currentPage]\n   */\n  currentPage?: number;\n  /**\n   * @member {Product[]} [products]\n   */\n  products?: Product[];\n  /**\n   * @member {number} [totalPageCount]\n   */\n  totalPageCount?: number;\n  /**\n   * @member {number} [totalProductCount]\n   */\n  totalProductCount?: number;\n  /**\n   * @member {string} [version]\n   */\n  version?: string;\n}\n\n/**\n * @interface\n * An interface representing ProductReferenceList.\n */\nexport interface ProductReferenceList {\n  /**\n   * @member {ProductReference[]} [references]\n   */\n  references?: ProductReference[];\n}\n\n/**\n * @interface\n * An interface representing SpellingSuggestion.\n */\nexport interface SpellingSuggestion {\n  /**\n   * @member {string} [query]\n   */\n  query?: string;\n  /**\n   * @member {string} [suggestion]\n   */\n  suggestion?: string;\n}\n\n/**\n * @interface\n * An interface representing ProductSearchPage.\n */\nexport interface ProductSearchPage {\n  /**\n   * @member {Breadcrumb[]} [breadcrumbs]\n   */\n  breadcrumbs?: Breadcrumb[];\n  /**\n   * @member {string} [categoryCode]\n   */\n  categoryCode?: string;\n  /**\n   * @member {SearchState} [currentQuery]\n   */\n  currentQuery?: SearchState;\n  /**\n   * @member {Facet[]} [facets]\n   */\n  facets?: Facet[];\n  /**\n   * @member {string} [freeTextSearch]\n   */\n  freeTextSearch?: string;\n  /**\n   * @member {string} [keywordRedirectUrl]\n   */\n  keywordRedirectUrl?: string;\n  /**\n   * @member {PaginationModel} [pagination]\n   */\n  pagination?: PaginationModel;\n  /**\n   * @member {Product[]} [products]\n   */\n  products?: Product[];\n  /**\n   * @member {SortModel[]} [sorts]\n   */\n  sorts?: SortModel[];\n  /**\n   * @member {SpellingSuggestion} [spellingSuggestion]\n   */\n  spellingSuggestion?: SpellingSuggestion;\n}\n\n/**\n * @interface\n * An interface representing PromotionList.\n */\nexport interface PromotionList {\n  /**\n   * @member {Promotion[]} [promotions]\n   */\n  promotions?: Promotion[];\n}\n\n/**\n * @interface\n * An interface representing PromotionResultList.\n */\nexport interface PromotionResultList {\n  /**\n   * @member {PromotionResult[]} [promotions]\n   */\n  promotions?: PromotionResult[];\n}\n\n/**\n * @interface\n * An interface representing ReviewList.\n */\nexport interface ReviewList {\n  /**\n   * @member {Review[]} [reviews]\n   */\n  reviews?: Review[];\n}\n\n/**\n * @interface\n * An interface representing SaveCartResult.\n */\nexport interface SaveCartResult {\n  /**\n   * @member {Cart} [savedCartData]\n   */\n  savedCartData?: Cart;\n}\n\n/**\n * @interface\n * An interface representing StoreFinderSearchPage.\n */\nexport interface StoreFinderSearchPage {\n  /**\n   * @member {number} [boundEastLongitude]\n   */\n  boundEastLongitude?: number;\n  /**\n   * @member {number} [boundNorthLatitude]\n   */\n  boundNorthLatitude?: number;\n  /**\n   * @member {number} [boundSouthLatitude]\n   */\n  boundSouthLatitude?: number;\n  /**\n   * @member {number} [boundWestLongitude]\n   */\n  boundWestLongitude?: number;\n  /**\n   * @member {string} [locationText]\n   */\n  locationText?: string;\n  /**\n   * @member {PaginationModel} [pagination]\n   */\n  pagination?: PaginationModel;\n  /**\n   * @member {SortModel[]} [sorts]\n   */\n  sorts?: SortModel[];\n  /**\n   * @member {number} [sourceLatitude]\n   */\n  sourceLatitude?: number;\n  /**\n   * @member {number} [sourceLongitude]\n   */\n  sourceLongitude?: number;\n  /**\n   * @member {PointOfService[]} [stores]\n   */\n  stores?: PointOfService[];\n}\n\n/**\n * @interface\n * An interface representing StoreFinderStockSearchPage.\n */\nexport interface StoreFinderStockSearchPage {\n  /**\n   * @member {number} [boundEastLongitude]\n   */\n  boundEastLongitude?: number;\n  /**\n   * @member {number} [boundNorthLatitude]\n   */\n  boundNorthLatitude?: number;\n  /**\n   * @member {number} [boundSouthLatitude]\n   */\n  boundSouthLatitude?: number;\n  /**\n   * @member {number} [boundWestLongitude]\n   */\n  boundWestLongitude?: number;\n  /**\n   * @member {string} [locationText]\n   */\n  locationText?: string;\n  /**\n   * @member {PaginationModel} [pagination]\n   */\n  pagination?: PaginationModel;\n  /**\n   * @member {Product} [product]\n   */\n  product?: Product;\n  /**\n   * @member {SortModel[]} [sorts]\n   */\n  sorts?: SortModel[];\n  /**\n   * @member {number} [sourceLatitude]\n   */\n  sourceLatitude?: number;\n  /**\n   * @member {number} [sourceLongitude]\n   */\n  sourceLongitude?: number;\n  /**\n   * @member {PointOfServiceStock[]} [stores]\n   */\n  stores?: PointOfServiceStock[];\n}\n\n/**\n * @interface\n * An interface representing Suggestion.\n */\nexport interface Suggestion {\n  /**\n   * @member {string} [value]\n   */\n  value?: string;\n}\n\n/**\n * @interface\n * An interface representing SuggestionList.\n */\nexport interface SuggestionList {\n  /**\n   * @member {Suggestion[]} [suggestions]\n   */\n  suggestions?: Suggestion[];\n}\n\n/**\n * @interface\n * An interface representing Title.\n */\nexport interface Title {\n  /**\n   * @member {string} [code]\n   */\n  code?: string;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n}\n\n/**\n * @interface\n * An interface representing TitleList.\n */\nexport interface TitleList {\n  /**\n   * @member {Title[]} [titles]\n   */\n  titles?: Title[];\n}\n\n/**\n * @interface\n * An interface representing UserGroup.\n */\nexport interface UserGroup {\n  /**\n   * @member {Principal[]} [members]\n   */\n  members?: Principal[];\n  /**\n   * @member {number} [membersCount]\n   */\n  membersCount?: number;\n  /**\n   * @member {string} [name]\n   */\n  name?: string;\n  /**\n   * @member {UserGroup[]} [subGroups]\n   */\n  subGroups?: UserGroup[];\n  /**\n   * @member {string} [uid]\n   */\n  uid?: string;\n}\n\n/**\n * @interface\n * An interface representing UserGroupList.\n */\nexport interface UserGroupList {\n  /**\n   * @member {number} [currentPage]\n   */\n  currentPage?: number;\n  /**\n   * @member {number} [numberOfPages]\n   */\n  numberOfPages?: number;\n  /**\n   * @member {number} [pageSize]\n   */\n  pageSize?: number;\n  /**\n   * @member {number} [totalNumber]\n   */\n  totalNumber?: number;\n  /**\n   * @member {UserGroup[]} [userGroups]\n   */\n  userGroups?: UserGroup[];\n}\n\n/**\n * @interface\n * An interface representing UserSignUp.\n */\nexport interface UserSignUp {\n  /**\n   * @member {string} [firstName]\n   */\n  firstName?: string;\n  /**\n   * @member {string} [lastName]\n   */\n  lastName?: string;\n  /**\n   * @member {string} [password]\n   */\n  password?: string;\n  /**\n   * @member {string} [titleCode]\n   */\n  titleCode?: string;\n  /**\n   * @member {string} [uid]\n   */\n  uid?: string;\n}\n\n/**\n * @interface\n * An interface representing VoucherList.\n */\nexport interface VoucherList {\n  /**\n   * @member {Voucher[]} [vouchers]\n   */\n  vouchers?: Voucher[];\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetCardTypesOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetCardTypesOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetCatalogsOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetCatalogsOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields1} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields1;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetCatalogOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetCatalogOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields2} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields2;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetCatalogVersionOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetCatalogVersionOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields3} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields3;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetCategoriesOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetCategoriesOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields4} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields4;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetComponentByIdListOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetComponentByIdListOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {string} [catalogCode] Catalog code\n   */\n  catalogCode?: string;\n  /**\n   * @member {string} [productCode] Product code\n   */\n  productCode?: string;\n  /**\n   * @member {string} [categoryCode] Category code\n   */\n  categoryCode?: string;\n  /**\n   * @member {Fields5} [fields] Response configuration (list of fields, which\n   * should be returned in response). Possible values include: 'BASIC',\n   * 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields5;\n  /**\n   * @member {number} [currentPage] Optional pagination parameter. Default\n   * value 0. Default value: 0 .\n   */\n  currentPage?: number;\n  /**\n   * @member {number} [pageSize] Optional pagination parameter. Default value\n   * 10. Default value: 10 .\n   */\n  pageSize?: number;\n  /**\n   * @member {string} [sort] Optional sort criterion. No default value.\n   */\n  sort?: string;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetComponentByIdOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetComponentByIdOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {string} [catalogCode] Catalog code\n   */\n  catalogCode?: string;\n  /**\n   * @member {string} [productCode] Product code\n   */\n  productCode?: string;\n  /**\n   * @member {string} [categoryCode] Category code\n   */\n  categoryCode?: string;\n  /**\n   * @member {Fields6} [fields] Response configuration (list of fields, which\n   * should be returned in response). Possible values include: 'BASIC',\n   * 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields6;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetPageDataOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetPageDataOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {PageType} [pageType] page type. Possible values include:\n   * 'ContentPage', 'ProductPage', 'CategoryPage', 'CatalogPage'. Default\n   * value: 'ContentPage' .\n   */\n  pageType?: PageType;\n  /**\n   * @member {string} [pageLabelOrId] Page Label or Id\n   */\n  pageLabelOrId?: string;\n  /**\n   * @member {string} [code] If pageType is ProductPage, code should be product\n   * code; if pageType is CategoryPage, code should be category code; if\n   * pageType is CatalogPage, code should be catalog code\n   */\n  code?: string;\n  /**\n   * @member {Fields7} [fields] Response configuration (list of fields, which\n   * should be returned in response). Possible values include: 'BASIC',\n   * 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields7;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetCurrenciesOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetCurrenciesOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields8} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields8;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetAllCustomerGroupsOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetAllCustomerGroupsOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {number} [currentPage] Current page number (starts with 0).\n   * Default value: 0 .\n   */\n  currentPage?: number;\n  /**\n   * @member {number} [pageSize] Number of customer group returned in one page.\n   * Default value: 20 .\n   */\n  pageSize?: number;\n  /**\n   * @member {Fields9} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'BASIC' .\n   */\n  fields?: Fields9;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetCustomerGroupOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetCustomerGroupOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields10} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'BASIC' .\n   */\n  fields?: Fields10;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetDeliveryCountriesOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetDeliveryCountriesOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields11} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields11;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2ExportProductsOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2ExportProductsOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields12} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields12;\n  /**\n   * @member {number} [currentPage] The current result page requested. Default\n   * value: 0 .\n   */\n  currentPage?: number;\n  /**\n   * @member {number} [pageSize] The number of results returned per page.\n   * Default value: 20 .\n   */\n  pageSize?: number;\n  /**\n   * @member {string} [catalog] The catalog to retrieve products from. The\n   * catalog must be provided along with the version.\n   */\n  catalog?: string;\n  /**\n   * @member {string} [version] The catalog version. The catalog version must\n   * be provided along with the catalog.\n   */\n  version?: string;\n  /**\n   * @member {string} [timestamp] When this parameter is set, only products\n   * modified after the given time will be returned. This parameter should be\n   * in ISO-8601 format (for example, 2018-01-09T16:28:45+0000).\n   */\n  timestamp?: string;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2OrderStatusFeedOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2OrderStatusFeedOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields13} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields13;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetLanguagesOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetLanguagesOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields14} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields14;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetOrderOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetOrderOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields15} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields15;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2ExpressUpdateOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2ExpressUpdateOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {string} [catalog] Only products from this catalog are returned.\n   * Format: catalogId:catalogVersion\n   */\n  catalog?: string;\n  /**\n   * @member {Fields16} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields16;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2SearchProductsOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2SearchProductsOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {string} [query] Serialized query, free text search, facets. The\n   * format of a serialized query:\n   * freeTextSearch:sort:facetKey1:facetValue1:facetKey2:facetValue2\n   */\n  query?: string;\n  /**\n   * @member {number} [currentPage] The current result page requested. Default\n   * value: 0 .\n   */\n  currentPage?: number;\n  /**\n   * @member {number} [pageSize] The number of results returned per page.\n   * Default value: 20 .\n   */\n  pageSize?: number;\n  /**\n   * @member {SortEnum} [sort] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'\n   */\n  sort?: SortEnum;\n  /**\n   * @member {string} [fields] The context to be used in the search query.\n   * Default value: 'DEFAULT' .\n   */\n  fields?: string;\n  /**\n   * @member {string} [searchQueryContext] searchQueryContext\n   */\n  searchQueryContext?: string;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2CountSearchProductsOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2CountSearchProductsOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {string} [query] Serialized query, free text search, facets. The\n   * format of a serialized query:\n   * freeTextSearch:sort:facetKey1:facetValue1:facetKey2:facetValue2\n   */\n  query?: string;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetSuggestionsOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetSuggestionsOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields17} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields17;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetProductByCodeOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetProductByCodeOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields18} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields18;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2ExportProductReferencesOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2ExportProductReferencesOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {number} [pageSize] Maximum size of returned results. Default\n   * value: 2147483647 .\n   */\n  pageSize?: number;\n  /**\n   * @member {Fields19} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields19;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetProductReviewsOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetProductReviewsOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {number} [maxCount] Maximum count of reviews\n   */\n  maxCount?: number;\n  /**\n   * @member {Fields20} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields20;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2CreateReviewPrimOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2CreateReviewPrimOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields21} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields21;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2SearchProductStockByLocationOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2SearchProductStockByLocationOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {string} [location] Free-text location\n   */\n  location?: string;\n  /**\n   * @member {number} [latitude] Latitude location parameter.\n   */\n  latitude?: number;\n  /**\n   * @member {number} [longitude] Longitude location parameter.\n   */\n  longitude?: number;\n  /**\n   * @member {number} [currentPage] The current result page requested. Default\n   * value: 0 .\n   */\n  currentPage?: number;\n  /**\n   * @member {number} [pageSize] The number of results returned per page.\n   * Default value: 20 .\n   */\n  pageSize?: number;\n  /**\n   * @member {Fields22} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields22;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2CountSearchProductStockByLocationOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2CountSearchProductStockByLocationOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {string} [location] Free-text location\n   */\n  location?: string;\n  /**\n   * @member {number} [latitude] Latitude location parameter.\n   */\n  latitude?: number;\n  /**\n   * @member {number} [longitude] Longitude location parameter.\n   */\n  longitude?: number;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetStockDataOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetStockDataOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields23} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields23;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetPromotionsPrimOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetPromotionsPrimOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {string} [promotionGroup] Only promotions from this group are\n   * returned\n   */\n  promotionGroup?: string;\n  /**\n   * @member {Fields24} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'BASIC' .\n   */\n  fields?: Fields24;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetPromotionByCodeOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetPromotionByCodeOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields25} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'BASIC' .\n   */\n  fields?: Fields25;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2LocationSearchOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2LocationSearchOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {string} [query] Location in natural language i.e. city or\n   * country.\n   */\n  query?: string;\n  /**\n   * @member {number} [latitude] Coordinate that specifies the north-south\n   * position of a point on the Earth's surface.\n   */\n  latitude?: number;\n  /**\n   * @member {number} [longitude] Coordinate that specifies the east-west\n   * position of a point on the Earth's surface.\n   */\n  longitude?: number;\n  /**\n   * @member {number} [currentPage] The current result page requested. Default\n   * value: 0 .\n   */\n  currentPage?: number;\n  /**\n   * @member {number} [pageSize] The number of results returned per page.\n   * Default value: 20 .\n   */\n  pageSize?: number;\n  /**\n   * @member {string} [sort] Sorting method applied to the return results.\n   * Default value: 'asc' .\n   */\n  sort?: string;\n  /**\n   * @member {number} [radius] Radius in meters. Max value: 40075000.0 (Earth's\n   * perimeter). Default value: 100000 .\n   */\n  radius?: number;\n  /**\n   * @member {number} [accuracy] Accuracy in meters. Default value: 0 .\n   */\n  accuracy?: number;\n  /**\n   * @member {Fields26} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields26;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2CountLocationSearchOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2CountLocationSearchOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {string} [query] Location in natural language i.e. city or\n   * country.\n   */\n  query?: string;\n  /**\n   * @member {number} [latitude] Coordinate that specifies the north-south\n   * position of a point on the Earth's surface.\n   */\n  latitude?: number;\n  /**\n   * @member {number} [longitude] Coordinate that specifies the east-west\n   * position of a point on the Earth's surface.\n   */\n  longitude?: number;\n  /**\n   * @member {number} [radius] Radius in meters. Max value: 40075000.0 (Earth's\n   * perimeter). Default value: 100000 .\n   */\n  radius?: number;\n  /**\n   * @member {number} [accuracy] Accuracy in meters. Default value: 0 .\n   */\n  accuracy?: number;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2LocationDetailsOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2LocationDetailsOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields27} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields27;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetTitlesOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetTitlesOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields28} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields28;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2RegisterUserPrimOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2RegisterUserPrimOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields29} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields29;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetUserOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetUserOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields30} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields30;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetAddressesOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetAddressesOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields31} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields31;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2CreateAddressPrimOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2CreateAddressPrimOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields32} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields32;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2VerifyAddressPrimOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2VerifyAddressPrimOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields33} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields33;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetAddressOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetAddressOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields34} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields34;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetCartsOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetCartsOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields35} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields35;\n  /**\n   * @member {boolean} [savedCartsOnly] Optional parameter. If the parameter is\n   * provided and its value is true, only saved carts are returned. Default\n   * value: false .\n   */\n  savedCartsOnly?: boolean;\n  /**\n   * @member {number} [currentPage] Optional pagination parameter in case of\n   * savedCartsOnly == true. Default value 0. Default value: 0 .\n   */\n  currentPage?: number;\n  /**\n   * @member {number} [pageSize] Optional {@link PaginationData} parameter in\n   * case of savedCartsOnly == true. Default value 20. Default value: 20 .\n   */\n  pageSize?: number;\n  /**\n   * @member {string} [sort] Optional sort criterion in case of savedCartsOnly\n   * == true. No default value.\n   */\n  sort?: string;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2CreateCartOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2CreateCartOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {string} [oldCartId] Anonymous cart GUID.\n   */\n  oldCartId?: string;\n  /**\n   * @member {string} [toMergeCartGuid] The GUID of the user's cart that will\n   * be merged with the anonymous cart.\n   */\n  toMergeCartGuid?: string;\n  /**\n   * @member {Fields36} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields36;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetCartOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetCartOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields37} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields37;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2CreateAndSetAddressPrimOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2CreateAndSetAddressPrimOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields38} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields38;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2CloneSaveCartOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2CloneSaveCartOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {string} [name] The name that should be applied to the cloned\n   * cart.\n   */\n  name?: string;\n  /**\n   * @member {string} [description] The description that should be applied to\n   * the cloned cart.\n   */\n  description?: string;\n  /**\n   * @member {Fields39} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields39;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetCartDeliveryModeOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetCartDeliveryModeOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields40} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields40;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetSupportedDeliveryModesOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetSupportedDeliveryModesOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields41} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields41;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetCartEntriesOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetCartEntriesOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields42} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields42;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2AddCartEntryPrimOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2AddCartEntryPrimOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields43} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields43;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetCartEntryOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetCartEntryOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields44} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields44;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2SetCartEntryPrimOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2SetCartEntryPrimOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields45} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields45;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2UpdateCartEntryPrimOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2UpdateCartEntryPrimOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields46} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields46;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2FlagForDeletionOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2FlagForDeletionOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields47} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields47;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2AddPaymentDetailsPrimOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2AddPaymentDetailsPrimOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields48} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields48;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetPromotionsOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetPromotionsOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields49} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields49;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetPromotionOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetPromotionOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields50} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields50;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2RestoreSavedCartOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2RestoreSavedCartOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields51} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields51;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2SaveCartOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2SaveCartOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {string} [saveCartName] The name that should be applied to the\n   * saved cart.\n   */\n  saveCartName?: string;\n  /**\n   * @member {string} [saveCartDescription] The description that should be\n   * applied to the saved cart.\n   */\n  saveCartDescription?: string;\n  /**\n   * @member {Fields52} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields52;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetSavedCartOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetSavedCartOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields53} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields53;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetVouchersOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetVouchersOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields54} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields54;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetAllCustomerGroupsForCustomerOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetAllCustomerGroupsForCustomerOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields55} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields55;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetOrdersForUserOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetOrdersForUserOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {string} [statuses] Filters only certain order statuses. For\n   * example, statuses=CANCELLED,CHECKED_VALID would only return orders with\n   * status CANCELLED or CHECKED_VALID.\n   */\n  statuses?: string;\n  /**\n   * @member {number} [currentPage] The current result page requested. Default\n   * value: 0 .\n   */\n  currentPage?: number;\n  /**\n   * @member {number} [pageSize] The number of results returned per page.\n   * Default value: 20 .\n   */\n  pageSize?: number;\n  /**\n   * @member {string} [sort] Sorting method applied to the return results.\n   */\n  sort?: string;\n  /**\n   * @member {Fields56} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields56;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetCountOrdersForUserOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetCountOrdersForUserOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {string} [statuses] Filters only certain order statuses. For\n   * example, statuses=CANCELLED,CHECKED_VALID would only return orders with\n   * status CANCELLED or CHECKED_VALID.\n   */\n  statuses?: string;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2PlaceOrderOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2PlaceOrderOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {string} [securityCode] CCV security code.\n   */\n  securityCode?: string;\n  /**\n   * @member {Fields57} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields57;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetOrderForUserByCodeOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetOrderForUserByCodeOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields58} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields58;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2ChangePasswordOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2ChangePasswordOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {string} [old] Old password. Required only for ROLE_CUSTOMERGROUP\n   */\n  old?: string;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetPaymentInfosOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetPaymentInfosOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields59} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields59;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetPaymentDetailsOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetPaymentDetailsOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields60} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'DEFAULT' .\n   */\n  fields?: Fields60;\n}\n\n/**\n * @interface\n * An interface representing CommerceWebservicesV2GetVoucherByCodeOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface CommerceWebservicesV2GetVoucherByCodeOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {Fields61} [fields] Response configuration. This is the list of\n   * fields that should be returned in the response body. Possible values\n   * include: 'BASIC', 'DEFAULT', 'FULL'. Default value: 'BASIC' .\n   */\n  fields?: Fields61;\n}\n\n/**\n * Defines values for PriceType.\n * Possible values include: 'BUY', 'FROM'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: PriceType = <PriceType>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum PriceType {\n  BUY = 'BUY',\n  FROM = 'FROM',\n}\n\n/**\n * Defines values for ImageType.\n * Possible values include: 'PRIMARY', 'GALLERY'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: ImageType = <ImageType>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum ImageType {\n  PRIMARY = 'PRIMARY',\n  GALLERY = 'GALLERY',\n}\n\n/**\n * Defines values for Fields.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields = <Fields>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields1.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields1 = <Fields1>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields1 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields2.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields2 = <Fields2>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields2 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields3.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields3 = <Fields3>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields3 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields4.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields4 = <Fields4>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields4 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields5.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields5 = <Fields5>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields5 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields6.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields6 = <Fields6>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields6 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for PageType.\n * Possible values include: 'ContentPage', 'ProductPage', 'CategoryPage',\n * 'CatalogPage'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: PageType = <PageType>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum PageType {\n  ContentPage = 'ContentPage',\n  ProductPage = 'ProductPage',\n  CategoryPage = 'CategoryPage',\n  CatalogPage = 'CatalogPage',\n}\n\n/**\n * Defines values for Fields7.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields7 = <Fields7>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields7 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields8.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields8 = <Fields8>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields8 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields9.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields9 = <Fields9>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields9 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields10.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields10 = <Fields10>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields10 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields11.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields11 = <Fields11>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields11 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields12.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields12 = <Fields12>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields12 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields13.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields13 = <Fields13>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields13 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields14.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields14 = <Fields14>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields14 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields15.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields15 = <Fields15>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields15 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields16.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields16 = <Fields16>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields16 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for SortEnum.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: SortEnum = <SortEnum>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum SortEnum {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields17.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields17 = <Fields17>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields17 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields18.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields18 = <Fields18>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields18 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields19.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields19 = <Fields19>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields19 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields20.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields20 = <Fields20>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields20 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields21.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields21 = <Fields21>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields21 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields22.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields22 = <Fields22>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields22 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields23.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields23 = <Fields23>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields23 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields24.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields24 = <Fields24>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields24 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields25.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields25 = <Fields25>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields25 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields26.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields26 = <Fields26>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields26 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields27.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields27 = <Fields27>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields27 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields28.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields28 = <Fields28>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields28 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields29.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields29 = <Fields29>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields29 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields30.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields30 = <Fields30>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields30 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields31.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields31 = <Fields31>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields31 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields32.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields32 = <Fields32>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields32 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields33.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields33 = <Fields33>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields33 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields34.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields34 = <Fields34>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields34 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields35.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields35 = <Fields35>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields35 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields36.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields36 = <Fields36>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields36 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields37.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields37 = <Fields37>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields37 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields38.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields38 = <Fields38>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields38 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields39.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields39 = <Fields39>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields39 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields40.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields40 = <Fields40>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields40 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields41.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields41 = <Fields41>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields41 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields42.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields42 = <Fields42>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields42 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields43.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields43 = <Fields43>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields43 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields44.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields44 = <Fields44>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields44 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields45.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields45 = <Fields45>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields45 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields46.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields46 = <Fields46>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields46 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields47.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields47 = <Fields47>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields47 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields48.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields48 = <Fields48>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields48 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields49.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields49 = <Fields49>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields49 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields50.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields50 = <Fields50>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields50 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields51.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields51 = <Fields51>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields51 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields52.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields52 = <Fields52>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields52 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields53.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields53 = <Fields53>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields53 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields54.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields54 = <Fields54>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields54 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields55.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields55 = <Fields55>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields55 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields56.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields56 = <Fields56>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields56 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields57.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields57 = <Fields57>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields57 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields58.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields58 = <Fields58>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields58 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields59.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields59 = <Fields59>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields59 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields60.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields60 = <Fields60>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields60 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Fields61.\n * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Fields61 = <Fields61>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Fields61 {\n  BASIC = 'BASIC',\n  DEFAULT = 'DEFAULT',\n  FULL = 'FULL',\n}\n\n/**\n * Defines values for Type.\n * Possible values include: 'all', 'product', 'order'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: Type = <Type>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nexport enum Type {\n  All = 'all',\n  Product = 'product',\n  Order = 'order',\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/models/index.ts","/*\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\n\nexport const Country = {\n  serializedName: \"Country\",\n  type: {\n    name: \"Composite\",\n    className: \"Country\",\n    modelProperties: {\n      isocode: {\n        serializedName: \"isocode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Region = {\n  serializedName: \"Region\",\n  type: {\n    name: \"Composite\",\n    className: \"Region\",\n    modelProperties: {\n      countryIso: {\n        serializedName: \"countryIso\",\n        type: {\n          name: \"String\"\n        }\n      },\n      isocode: {\n        serializedName: \"isocode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      isocodeShort: {\n        serializedName: \"isocodeShort\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Address = {\n  serializedName: \"Address\",\n  type: {\n    name: \"Composite\",\n    className: \"Address\",\n    modelProperties: {\n      companyName: {\n        serializedName: \"companyName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      country: {\n        serializedName: \"country\",\n        type: {\n          name: \"Composite\",\n          className: \"Country\"\n        }\n      },\n      defaultAddress: {\n        serializedName: \"defaultAddress\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      email: {\n        serializedName: \"email\",\n        type: {\n          name: \"String\"\n        }\n      },\n      firstName: {\n        serializedName: \"firstName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      formattedAddress: {\n        serializedName: \"formattedAddress\",\n        type: {\n          name: \"String\"\n        }\n      },\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastName: {\n        serializedName: \"lastName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      line1: {\n        serializedName: \"line1\",\n        type: {\n          name: \"String\"\n        }\n      },\n      line2: {\n        serializedName: \"line2\",\n        type: {\n          name: \"String\"\n        }\n      },\n      phone: {\n        serializedName: \"phone\",\n        type: {\n          name: \"String\"\n        }\n      },\n      postalCode: {\n        serializedName: \"postalCode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      region: {\n        serializedName: \"region\",\n        type: {\n          name: \"Composite\",\n          className: \"Region\"\n        }\n      },\n      shippingAddress: {\n        serializedName: \"shippingAddress\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      title: {\n        serializedName: \"title\",\n        type: {\n          name: \"String\"\n        }\n      },\n      titleCode: {\n        serializedName: \"titleCode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      town: {\n        serializedName: \"town\",\n        type: {\n          name: \"String\"\n        }\n      },\n      visibleInAddressBook: {\n        serializedName: \"visibleInAddressBook\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const AddressList = {\n  serializedName: \"AddressList\",\n  type: {\n    name: \"Composite\",\n    className: \"AddressList\",\n    modelProperties: {\n      addresses: {\n        serializedName: \"addresses\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"AddressElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Address\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorModel = {\n  serializedName: \"error\",\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      message: {\n        serializedName: \"message\",\n        type: {\n          name: \"String\"\n        }\n      },\n      reason: {\n        serializedName: \"reason\",\n        type: {\n          name: \"String\"\n        }\n      },\n      subject: {\n        serializedName: \"subject\",\n        type: {\n          name: \"String\"\n        }\n      },\n      subjectType: {\n        serializedName: \"subjectType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorList = {\n  serializedName: \"errorList\",\n  type: {\n    name: \"Composite\",\n    className: \"ErrorList\",\n    modelProperties: {\n      errors: {\n        serializedName: \"errors\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"ErrorModelElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"ErrorModel\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const AddressValidation = {\n  serializedName: \"AddressValidation\",\n  type: {\n    name: \"Composite\",\n    className: \"AddressValidation\",\n    modelProperties: {\n      decision: {\n        serializedName: \"decision\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errors: {\n        serializedName: \"errors\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorList\"\n        }\n      },\n      suggestedAddresses: {\n        serializedName: \"suggestedAddresses\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"AddressElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Address\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Price = {\n  serializedName: \"Price\",\n  type: {\n    name: \"Composite\",\n    className: \"Price\",\n    modelProperties: {\n      currencyIso: {\n        serializedName: \"currencyIso\",\n        type: {\n          name: \"String\"\n        }\n      },\n      formattedValue: {\n        serializedName: \"formattedValue\",\n        type: {\n          name: \"String\"\n        }\n      },\n      maxQuantity: {\n        serializedName: \"maxQuantity\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      minQuantity: {\n        serializedName: \"minQuantity\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      priceType: {\n        serializedName: \"priceType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const Stock = {\n  serializedName: \"Stock\",\n  type: {\n    name: \"Composite\",\n    className: \"Stock\",\n    modelProperties: {\n      stockLevel: {\n        serializedName: \"stockLevel\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      stockLevelStatus: {\n        serializedName: \"stockLevelStatus\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Image = {\n  serializedName: \"Image\",\n  type: {\n    name: \"Composite\",\n    className: \"Image\",\n    modelProperties: {\n      altText: {\n        serializedName: \"altText\",\n        type: {\n          name: \"String\"\n        }\n      },\n      format: {\n        serializedName: \"format\",\n        type: {\n          name: \"String\"\n        }\n      },\n      galleryIndex: {\n        serializedName: \"galleryIndex\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      imageType: {\n        serializedName: \"imageType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      url: {\n        serializedName: \"url\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const VariantOptionQualifier = {\n  serializedName: \"VariantOptionQualifier\",\n  type: {\n    name: \"Composite\",\n    className: \"VariantOptionQualifier\",\n    modelProperties: {\n      image: {\n        serializedName: \"image\",\n        type: {\n          name: \"Composite\",\n          className: \"Image\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      qualifier: {\n        serializedName: \"qualifier\",\n        type: {\n          name: \"String\"\n        }\n      },\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const VariantOption = {\n  serializedName: \"VariantOption\",\n  type: {\n    name: \"Composite\",\n    className: \"VariantOption\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      priceData: {\n        serializedName: \"priceData\",\n        type: {\n          name: \"Composite\",\n          className: \"Price\"\n        }\n      },\n      stock: {\n        serializedName: \"stock\",\n        type: {\n          name: \"Composite\",\n          className: \"Stock\"\n        }\n      },\n      url: {\n        serializedName: \"url\",\n        type: {\n          name: \"String\"\n        }\n      },\n      variantOptionQualifiers: {\n        serializedName: \"variantOptionQualifiers\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"VariantOptionQualifierElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"VariantOptionQualifier\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const BaseOption = {\n  serializedName: \"BaseOption\",\n  type: {\n    name: \"Composite\",\n    className: \"BaseOption\",\n    modelProperties: {\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"VariantOptionElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"VariantOption\"\n            }\n          }\n        }\n      },\n      selected: {\n        serializedName: \"selected\",\n        type: {\n          name: \"Composite\",\n          className: \"VariantOption\"\n        }\n      },\n      variantType: {\n        serializedName: \"variantType\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SearchQuery = {\n  serializedName: \"SearchQuery\",\n  type: {\n    name: \"Composite\",\n    className: \"SearchQuery\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SearchState = {\n  serializedName: \"SearchState\",\n  type: {\n    name: \"Composite\",\n    className: \"SearchState\",\n    modelProperties: {\n      query: {\n        serializedName: \"query\",\n        type: {\n          name: \"Composite\",\n          className: \"SearchQuery\"\n        }\n      },\n      url: {\n        serializedName: \"url\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Breadcrumb = {\n  serializedName: \"Breadcrumb\",\n  type: {\n    name: \"Composite\",\n    className: \"Breadcrumb\",\n    modelProperties: {\n      facetCode: {\n        serializedName: \"facetCode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      facetName: {\n        serializedName: \"facetName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      facetValueCode: {\n        serializedName: \"facetValueCode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      facetValueName: {\n        serializedName: \"facetValueName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      removeQuery: {\n        serializedName: \"removeQuery\",\n        type: {\n          name: \"Composite\",\n          className: \"SearchState\"\n        }\n      },\n      truncateQuery: {\n        serializedName: \"truncateQuery\",\n        type: {\n          name: \"Composite\",\n          className: \"SearchState\"\n        }\n      }\n    }\n  }\n};\n\nexport const Component = {\n  serializedName: \"Component\",\n  type: {\n    name: \"Composite\",\n    className: \"Component\",\n    modelProperties: {\n      modifiedtime: {\n        serializedName: \"modifiedtime\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      otherProperties: {\n        serializedName: \"otherProperties\",\n        type: {\n          name: \"Object\"\n        }\n      },\n      typeCode: {\n        serializedName: \"typeCode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      uid: {\n        serializedName: \"uid\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ComponentList = {\n  serializedName: \"ComponentList\",\n  type: {\n    name: \"Composite\",\n    className: \"ComponentList\",\n    modelProperties: {\n      component: {\n        serializedName: \"component\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"ComponentElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Component\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ContentSlot = {\n  serializedName: \"ContentSlot\",\n  type: {\n    name: \"Composite\",\n    className: \"ContentSlot\",\n    modelProperties: {\n      components: {\n        serializedName: \"components\",\n        type: {\n          name: \"Composite\",\n          className: \"ComponentList\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      position: {\n        serializedName: \"position\",\n        type: {\n          name: \"String\"\n        }\n      },\n      slotId: {\n        serializedName: \"slotId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      slotShared: {\n        serializedName: \"slotShared\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      slotStatus: {\n        serializedName: \"slotStatus\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContentSlotList = {\n  serializedName: \"ContentSlotList\",\n  type: {\n    name: \"Composite\",\n    className: \"ContentSlotList\",\n    modelProperties: {\n      contentSlot: {\n        serializedName: \"contentSlot\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"ContentSlotElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"ContentSlot\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const CMSPage = {\n  serializedName: \"CMSPage\",\n  type: {\n    name: \"Composite\",\n    className: \"CMSPage\",\n    modelProperties: {\n      contentSlots: {\n        serializedName: \"contentSlots\",\n        type: {\n          name: \"Composite\",\n          className: \"ContentSlotList\"\n        }\n      },\n      defaultPage: {\n        serializedName: \"defaultPage\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      template: {\n        serializedName: \"template\",\n        type: {\n          name: \"String\"\n        }\n      },\n      title: {\n        serializedName: \"title\",\n        type: {\n          name: \"String\"\n        }\n      },\n      typeCode: {\n        serializedName: \"typeCode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      uid: {\n        serializedName: \"uid\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CardType = {\n  serializedName: \"CardType\",\n  type: {\n    name: \"Composite\",\n    className: \"CardType\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CardTypeList = {\n  serializedName: \"CardTypeList\",\n  type: {\n    name: \"Composite\",\n    className: \"CardTypeList\",\n    modelProperties: {\n      cardTypes: {\n        serializedName: \"cardTypes\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"CardTypeElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"CardType\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const PromotionOrderEntryConsumed = {\n  serializedName: \"PromotionOrderEntryConsumed\",\n  type: {\n    name: \"Composite\",\n    className: \"PromotionOrderEntryConsumed\",\n    modelProperties: {\n      adjustedUnitPrice: {\n        serializedName: \"adjustedUnitPrice\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      orderEntryNumber: {\n        serializedName: \"orderEntryNumber\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      quantity: {\n        serializedName: \"quantity\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const PromotionRestriction = {\n  serializedName: \"PromotionRestriction\",\n  type: {\n    name: \"Composite\",\n    className: \"PromotionRestriction\",\n    modelProperties: {\n      description: {\n        serializedName: \"description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      restrictionType: {\n        serializedName: \"restrictionType\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Promotion = {\n  serializedName: \"Promotion\",\n  type: {\n    name: \"Composite\",\n    className: \"Promotion\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      couldFireMessages: {\n        serializedName: \"couldFireMessages\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"stringElementType\",\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      description: {\n        serializedName: \"description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      enabled: {\n        serializedName: \"enabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      endDate: {\n        serializedName: \"endDate\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      firedMessages: {\n        serializedName: \"firedMessages\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"stringElementType\",\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      priority: {\n        serializedName: \"priority\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      productBanner: {\n        serializedName: \"productBanner\",\n        type: {\n          name: \"Composite\",\n          className: \"Image\"\n        }\n      },\n      promotionGroup: {\n        serializedName: \"promotionGroup\",\n        type: {\n          name: \"String\"\n        }\n      },\n      promotionType: {\n        serializedName: \"promotionType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      restrictions: {\n        serializedName: \"restrictions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"PromotionRestrictionElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"PromotionRestriction\"\n            }\n          }\n        }\n      },\n      startDate: {\n        serializedName: \"startDate\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      title: {\n        serializedName: \"title\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PromotionResult = {\n  serializedName: \"PromotionResult\",\n  type: {\n    name: \"Composite\",\n    className: \"PromotionResult\",\n    modelProperties: {\n      consumedEntries: {\n        serializedName: \"consumedEntries\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"PromotionOrderEntryConsumedElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"PromotionOrderEntryConsumed\"\n            }\n          }\n        }\n      },\n      description: {\n        serializedName: \"description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      promotion: {\n        serializedName: \"promotion\",\n        type: {\n          name: \"Composite\",\n          className: \"Promotion\"\n        }\n      }\n    }\n  }\n};\n\nexport const Currency = {\n  serializedName: \"Currency\",\n  type: {\n    name: \"Composite\",\n    className: \"Currency\",\n    modelProperties: {\n      active: {\n        serializedName: \"active\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      isocode: {\n        serializedName: \"isocode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      symbol: {\n        serializedName: \"symbol\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Voucher = {\n  serializedName: \"Voucher\",\n  type: {\n    name: \"Composite\",\n    className: \"Voucher\",\n    modelProperties: {\n      appliedValue: {\n        serializedName: \"appliedValue\",\n        type: {\n          name: \"Composite\",\n          className: \"Price\"\n        }\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      currency: {\n        serializedName: \"currency\",\n        type: {\n          name: \"Composite\",\n          className: \"Currency\"\n        }\n      },\n      description: {\n        serializedName: \"description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      freeShipping: {\n        serializedName: \"freeShipping\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      valueFormatted: {\n        serializedName: \"valueFormatted\",\n        type: {\n          name: \"String\"\n        }\n      },\n      valueString: {\n        serializedName: \"valueString\",\n        type: {\n          name: \"String\"\n        }\n      },\n      voucherCode: {\n        serializedName: \"voucherCode\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DeliveryMode = {\n  serializedName: \"DeliveryMode\",\n  type: {\n    name: \"Composite\",\n    className: \"DeliveryMode\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      deliveryCost: {\n        serializedName: \"deliveryCost\",\n        type: {\n          name: \"Composite\",\n          className: \"Price\"\n        }\n      },\n      description: {\n        serializedName: \"description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GeoPoint = {\n  serializedName: \"GeoPoint\",\n  type: {\n    name: \"Composite\",\n    className: \"GeoPoint\",\n    modelProperties: {\n      latitude: {\n        serializedName: \"latitude\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      longitude: {\n        serializedName: \"longitude\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const Time = {\n  serializedName: \"Time\",\n  type: {\n    name: \"Composite\",\n    className: \"Time\",\n    modelProperties: {\n      formattedHour: {\n        serializedName: \"formattedHour\",\n        type: {\n          name: \"String\"\n        }\n      },\n      hour: {\n        serializedName: \"hour\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      minute: {\n        serializedName: \"minute\",\n        type: {\n          name: \"ByteArray\"\n        }\n      }\n    }\n  }\n};\n\nexport const SpecialOpeningDay = {\n  serializedName: \"SpecialOpeningDay\",\n  type: {\n    name: \"Composite\",\n    className: \"SpecialOpeningDay\",\n    modelProperties: {\n      closed: {\n        serializedName: \"closed\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      closingTime: {\n        serializedName: \"closingTime\",\n        type: {\n          name: \"Composite\",\n          className: \"Time\"\n        }\n      },\n      comment: {\n        serializedName: \"comment\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      formattedDate: {\n        serializedName: \"formattedDate\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      openingTime: {\n        serializedName: \"openingTime\",\n        type: {\n          name: \"Composite\",\n          className: \"Time\"\n        }\n      }\n    }\n  }\n};\n\nexport const WeekdayOpeningDay = {\n  serializedName: \"WeekdayOpeningDay\",\n  type: {\n    name: \"Composite\",\n    className: \"WeekdayOpeningDay\",\n    modelProperties: {\n      closed: {\n        serializedName: \"closed\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      closingTime: {\n        serializedName: \"closingTime\",\n        type: {\n          name: \"Composite\",\n          className: \"Time\"\n        }\n      },\n      openingTime: {\n        serializedName: \"openingTime\",\n        type: {\n          name: \"Composite\",\n          className: \"Time\"\n        }\n      },\n      weekDay: {\n        serializedName: \"weekDay\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OpeningSchedule = {\n  serializedName: \"OpeningSchedule\",\n  type: {\n    name: \"Composite\",\n    className: \"OpeningSchedule\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      specialDayOpeningList: {\n        serializedName: \"specialDayOpeningList\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"SpecialOpeningDayElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"SpecialOpeningDay\"\n            }\n          }\n        }\n      },\n      weekDayOpeningList: {\n        serializedName: \"weekDayOpeningList\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"WeekdayOpeningDayElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"WeekdayOpeningDay\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const PointOfService = {\n  serializedName: \"PointOfService\",\n  type: {\n    name: \"Composite\",\n    className: \"PointOfService\",\n    modelProperties: {\n      address: {\n        serializedName: \"address\",\n        type: {\n          name: \"Composite\",\n          className: \"Address\"\n        }\n      },\n      description: {\n        serializedName: \"description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      displayName: {\n        serializedName: \"displayName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      distanceKm: {\n        serializedName: \"distanceKm\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      features: {\n        serializedName: \"features\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            serializedName: \"stringElementType\",\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      formattedDistance: {\n        serializedName: \"formattedDistance\",\n        type: {\n          name: \"String\"\n        }\n      },\n      geoPoint: {\n        serializedName: \"geoPoint\",\n        type: {\n          name: \"Composite\",\n          className: \"GeoPoint\"\n        }\n      },\n      mapIcon: {\n        serializedName: \"mapIcon\",\n        type: {\n          name: \"Composite\",\n          className: \"Image\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      openingHours: {\n        serializedName: \"openingHours\",\n        type: {\n          name: \"Composite\",\n          className: \"OpeningSchedule\"\n        }\n      },\n      storeContent: {\n        serializedName: \"storeContent\",\n        type: {\n          name: \"String\"\n        }\n      },\n      storeImages: {\n        serializedName: \"storeImages\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"ImageElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Image\"\n            }\n          }\n        }\n      },\n      url: {\n        serializedName: \"url\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Category = {\n  serializedName: \"Category\",\n  type: {\n    name: \"Composite\",\n    className: \"Category\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      image: {\n        serializedName: \"image\",\n        type: {\n          name: \"Composite\",\n          className: \"Image\"\n        }\n      },\n      url: {\n        serializedName: \"url\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FeatureUnit = {\n  serializedName: \"FeatureUnit\",\n  type: {\n    name: \"Composite\",\n    className: \"FeatureUnit\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      symbol: {\n        serializedName: \"symbol\",\n        type: {\n          name: \"String\"\n        }\n      },\n      unitType: {\n        serializedName: \"unitType\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FeatureValue = {\n  serializedName: \"FeatureValue\",\n  type: {\n    name: \"Composite\",\n    className: \"FeatureValue\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Feature = {\n  serializedName: \"Feature\",\n  type: {\n    name: \"Composite\",\n    className: \"Feature\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      comparable: {\n        serializedName: \"comparable\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      description: {\n        serializedName: \"description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      featureUnit: {\n        serializedName: \"featureUnit\",\n        type: {\n          name: \"Composite\",\n          className: \"FeatureUnit\"\n        }\n      },\n      featureValues: {\n        serializedName: \"featureValues\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"FeatureValueElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"FeatureValue\"\n            }\n          }\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      range: {\n        serializedName: \"range\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Classification = {\n  serializedName: \"Classification\",\n  type: {\n    name: \"Composite\",\n    className: \"Classification\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      features: {\n        serializedName: \"features\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"FeatureElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Feature\"\n            }\n          }\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FutureStock = {\n  serializedName: \"FutureStock\",\n  type: {\n    name: \"Composite\",\n    className: \"FutureStock\",\n    modelProperties: {\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      formattedDate: {\n        serializedName: \"formattedDate\",\n        type: {\n          name: \"String\"\n        }\n      },\n      stock: {\n        serializedName: \"stock\",\n        type: {\n          name: \"Composite\",\n          className: \"Stock\"\n        }\n      }\n    }\n  }\n};\n\nexport const PriceRange = {\n  serializedName: \"PriceRange\",\n  type: {\n    name: \"Composite\",\n    className: \"PriceRange\",\n    modelProperties: {\n      maxPrice: {\n        serializedName: \"maxPrice\",\n        type: {\n          name: \"Composite\",\n          className: \"Price\"\n        }\n      },\n      minPrice: {\n        serializedName: \"minPrice\",\n        type: {\n          name: \"Composite\",\n          className: \"Price\"\n        }\n      }\n    }\n  }\n};\n\nexport const ProductReference = {\n  serializedName: \"ProductReference\",\n  type: {\n    name: \"Composite\",\n    className: \"ProductReference\",\n    modelProperties: {\n      description: {\n        serializedName: \"description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      preselected: {\n        serializedName: \"preselected\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      quantity: {\n        serializedName: \"quantity\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      referenceType: {\n        serializedName: \"referenceType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      target: {\n        serializedName: \"target\",\n        type: {\n          name: \"Composite\",\n          className: \"Product\"\n        }\n      }\n    }\n  }\n};\n\nexport const Language = {\n  serializedName: \"Language\",\n  type: {\n    name: \"Composite\",\n    className: \"Language\",\n    modelProperties: {\n      active: {\n        serializedName: \"active\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      isocode: {\n        serializedName: \"isocode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nativeName: {\n        serializedName: \"nativeName\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const User = {\n  serializedName: \"User\",\n  type: {\n    name: \"Composite\",\n    className: \"User\",\n    modelProperties: {\n      currency: {\n        serializedName: \"currency\",\n        type: {\n          name: \"Composite\",\n          className: \"Currency\"\n        }\n      },\n      customerId: {\n        serializedName: \"customerId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      deactivationDate: {\n        serializedName: \"deactivationDate\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      defaultAddress: {\n        serializedName: \"defaultAddress\",\n        type: {\n          name: \"Composite\",\n          className: \"Address\"\n        }\n      },\n      displayUid: {\n        serializedName: \"displayUid\",\n        type: {\n          name: \"String\"\n        }\n      },\n      firstName: {\n        serializedName: \"firstName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      language: {\n        serializedName: \"language\",\n        type: {\n          name: \"Composite\",\n          className: \"Language\"\n        }\n      },\n      lastName: {\n        serializedName: \"lastName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      title: {\n        serializedName: \"title\",\n        type: {\n          name: \"String\"\n        }\n      },\n      titleCode: {\n        serializedName: \"titleCode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      uid: {\n        serializedName: \"uid\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Review = {\n  serializedName: \"Review\",\n  type: {\n    name: \"Composite\",\n    className: \"Review\",\n    modelProperties: {\n      alias: {\n        serializedName: \"alias\",\n        type: {\n          name: \"String\"\n        }\n      },\n      comment: {\n        serializedName: \"comment\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      headline: {\n        serializedName: \"headline\",\n        type: {\n          name: \"String\"\n        }\n      },\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      principal: {\n        serializedName: \"principal\",\n        type: {\n          name: \"Composite\",\n          className: \"User\"\n        }\n      },\n      rating: {\n        serializedName: \"rating\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const VariantCategory = {\n  serializedName: \"VariantCategory\",\n  type: {\n    name: \"Composite\",\n    className: \"VariantCategory\",\n    modelProperties: {\n      hasImage: {\n        serializedName: \"hasImage\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      priority: {\n        serializedName: \"priority\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const VariantValueCategory = {\n  serializedName: \"VariantValueCategory\",\n  type: {\n    name: \"Composite\",\n    className: \"VariantValueCategory\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      sequence: {\n        serializedName: \"sequence\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      superCategories: {\n        serializedName: \"superCategories\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"VariantCategoryElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"VariantCategory\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const VariantMatrixElement = {\n  serializedName: \"VariantMatrixElement\",\n  type: {\n    name: \"Composite\",\n    className: \"VariantMatrixElement\",\n    modelProperties: {\n      elements: {\n        serializedName: \"elements\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"VariantMatrixElementElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"VariantMatrixElement\"\n            }\n          }\n        }\n      },\n      isLeaf: {\n        serializedName: \"isLeaf\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      parentVariantCategory: {\n        serializedName: \"parentVariantCategory\",\n        type: {\n          name: \"Composite\",\n          className: \"VariantCategory\"\n        }\n      },\n      variantOption: {\n        serializedName: \"variantOption\",\n        type: {\n          name: \"Composite\",\n          className: \"VariantOption\"\n        }\n      },\n      variantValueCategory: {\n        serializedName: \"variantValueCategory\",\n        type: {\n          name: \"Composite\",\n          className: \"VariantValueCategory\"\n        }\n      }\n    }\n  }\n};\n\nexport const Product = {\n  serializedName: \"Product\",\n  type: {\n    name: \"Composite\",\n    className: \"Product\",\n    modelProperties: {\n      availableForPickup: {\n        serializedName: \"availableForPickup\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      averageRating: {\n        serializedName: \"averageRating\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      baseOptions: {\n        serializedName: \"baseOptions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"BaseOptionElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"BaseOption\"\n            }\n          }\n        }\n      },\n      baseProduct: {\n        serializedName: \"baseProduct\",\n        type: {\n          name: \"String\"\n        }\n      },\n      categories: {\n        serializedName: \"categories\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"CategoryElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Category\"\n            }\n          }\n        }\n      },\n      classifications: {\n        serializedName: \"classifications\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"ClassificationElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Classification\"\n            }\n          }\n        }\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      description: {\n        serializedName: \"description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      futureStocks: {\n        serializedName: \"futureStocks\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"FutureStockElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"FutureStock\"\n            }\n          }\n        }\n      },\n      images: {\n        serializedName: \"images\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"ImageElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Image\"\n            }\n          }\n        }\n      },\n      manufacturer: {\n        serializedName: \"manufacturer\",\n        type: {\n          name: \"String\"\n        }\n      },\n      multidimensional: {\n        serializedName: \"multidimensional\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      numberOfReviews: {\n        serializedName: \"numberOfReviews\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      potentialPromotions: {\n        serializedName: \"potentialPromotions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"PromotionElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Promotion\"\n            }\n          }\n        }\n      },\n      price: {\n        serializedName: \"price\",\n        type: {\n          name: \"Composite\",\n          className: \"Price\"\n        }\n      },\n      priceRange: {\n        serializedName: \"priceRange\",\n        type: {\n          name: \"Composite\",\n          className: \"PriceRange\"\n        }\n      },\n      productReferences: {\n        serializedName: \"productReferences\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"ProductReferenceElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"ProductReference\"\n            }\n          }\n        }\n      },\n      purchasable: {\n        serializedName: \"purchasable\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      reviews: {\n        serializedName: \"reviews\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"ReviewElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Review\"\n            }\n          }\n        }\n      },\n      stock: {\n        serializedName: \"stock\",\n        type: {\n          name: \"Composite\",\n          className: \"Stock\"\n        }\n      },\n      summary: {\n        serializedName: \"summary\",\n        type: {\n          name: \"String\"\n        }\n      },\n      url: {\n        serializedName: \"url\",\n        type: {\n          name: \"String\"\n        }\n      },\n      variantMatrix: {\n        serializedName: \"variantMatrix\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"VariantMatrixElementElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"VariantMatrixElement\"\n            }\n          }\n        }\n      },\n      variantOptions: {\n        serializedName: \"variantOptions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"VariantOptionElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"VariantOption\"\n            }\n          }\n        }\n      },\n      variantType: {\n        serializedName: \"variantType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      volumePrices: {\n        serializedName: \"volumePrices\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"PriceElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Price\"\n            }\n          }\n        }\n      },\n      volumePricesFlag: {\n        serializedName: \"volumePricesFlag\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const OrderEntry = {\n  serializedName: \"OrderEntry\",\n  type: {\n    name: \"Composite\",\n    className: \"OrderEntry\",\n    modelProperties: {\n      basePrice: {\n        serializedName: \"basePrice\",\n        type: {\n          name: \"Composite\",\n          className: \"Price\"\n        }\n      },\n      deliveryMode: {\n        serializedName: \"deliveryMode\",\n        type: {\n          name: \"Composite\",\n          className: \"DeliveryMode\"\n        }\n      },\n      deliveryPointOfService: {\n        serializedName: \"deliveryPointOfService\",\n        type: {\n          name: \"Composite\",\n          className: \"PointOfService\"\n        }\n      },\n      entryNumber: {\n        serializedName: \"entryNumber\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      product: {\n        serializedName: \"product\",\n        type: {\n          name: \"Composite\",\n          className: \"Product\"\n        }\n      },\n      quantity: {\n        serializedName: \"quantity\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      totalPrice: {\n        serializedName: \"totalPrice\",\n        type: {\n          name: \"Composite\",\n          className: \"Price\"\n        }\n      },\n      updateable: {\n        serializedName: \"updateable\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const DeliveryOrderEntryGroup = {\n  serializedName: \"DeliveryOrderEntryGroup\",\n  type: {\n    name: \"Composite\",\n    className: \"DeliveryOrderEntryGroup\",\n    modelProperties: {\n      deliveryAddress: {\n        serializedName: \"deliveryAddress\",\n        type: {\n          name: \"Composite\",\n          className: \"Address\"\n        }\n      },\n      entries: {\n        serializedName: \"entries\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"OrderEntryElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"OrderEntry\"\n            }\n          }\n        }\n      },\n      quantity: {\n        serializedName: \"quantity\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      totalPriceWithTax: {\n        serializedName: \"totalPriceWithTax\",\n        type: {\n          name: \"Composite\",\n          className: \"Price\"\n        }\n      }\n    }\n  }\n};\n\nexport const PaymentDetails = {\n  serializedName: \"PaymentDetails\",\n  type: {\n    name: \"Composite\",\n    className: \"PaymentDetails\",\n    modelProperties: {\n      accountHolderName: {\n        serializedName: \"accountHolderName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      billingAddress: {\n        serializedName: \"billingAddress\",\n        type: {\n          name: \"Composite\",\n          className: \"Address\"\n        }\n      },\n      cardNumber: {\n        serializedName: \"cardNumber\",\n        type: {\n          name: \"String\"\n        }\n      },\n      cardType: {\n        serializedName: \"cardType\",\n        type: {\n          name: \"Composite\",\n          className: \"CardType\"\n        }\n      },\n      defaultPayment: {\n        serializedName: \"defaultPayment\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      expiryMonth: {\n        serializedName: \"expiryMonth\",\n        type: {\n          name: \"String\"\n        }\n      },\n      expiryYear: {\n        serializedName: \"expiryYear\",\n        type: {\n          name: \"String\"\n        }\n      },\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      issueNumber: {\n        serializedName: \"issueNumber\",\n        type: {\n          name: \"String\"\n        }\n      },\n      saved: {\n        serializedName: \"saved\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      startMonth: {\n        serializedName: \"startMonth\",\n        type: {\n          name: \"String\"\n        }\n      },\n      startYear: {\n        serializedName: \"startYear\",\n        type: {\n          name: \"String\"\n        }\n      },\n      subscriptionId: {\n        serializedName: \"subscriptionId\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PickupOrderEntryGroup = {\n  serializedName: \"PickupOrderEntryGroup\",\n  type: {\n    name: \"Composite\",\n    className: \"PickupOrderEntryGroup\",\n    modelProperties: {\n      deliveryPointOfService: {\n        serializedName: \"deliveryPointOfService\",\n        type: {\n          name: \"Composite\",\n          className: \"PointOfService\"\n        }\n      },\n      distance: {\n        serializedName: \"distance\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      entries: {\n        serializedName: \"entries\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"OrderEntryElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"OrderEntry\"\n            }\n          }\n        }\n      },\n      quantity: {\n        serializedName: \"quantity\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      totalPriceWithTax: {\n        serializedName: \"totalPriceWithTax\",\n        type: {\n          name: \"Composite\",\n          className: \"Price\"\n        }\n      }\n    }\n  }\n};\n\nexport const Principal = {\n  serializedName: \"Principal\",\n  type: {\n    name: \"Composite\",\n    className: \"Principal\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      uid: {\n        serializedName: \"uid\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Cart = {\n  serializedName: \"Cart\",\n  type: {\n    name: \"Composite\",\n    className: \"Cart\",\n    modelProperties: {\n      appliedOrderPromotions: {\n        serializedName: \"appliedOrderPromotions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"PromotionResultElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"PromotionResult\"\n            }\n          }\n        }\n      },\n      appliedProductPromotions: {\n        serializedName: \"appliedProductPromotions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"PromotionResultElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"PromotionResult\"\n            }\n          }\n        }\n      },\n      appliedVouchers: {\n        serializedName: \"appliedVouchers\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"VoucherElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Voucher\"\n            }\n          }\n        }\n      },\n      calculated: {\n        serializedName: \"calculated\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      deliveryAddress: {\n        serializedName: \"deliveryAddress\",\n        type: {\n          name: \"Composite\",\n          className: \"Address\"\n        }\n      },\n      deliveryCost: {\n        serializedName: \"deliveryCost\",\n        type: {\n          name: \"Composite\",\n          className: \"Price\"\n        }\n      },\n      deliveryItemsQuantity: {\n        serializedName: \"deliveryItemsQuantity\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      deliveryMode: {\n        serializedName: \"deliveryMode\",\n        type: {\n          name: \"Composite\",\n          className: \"DeliveryMode\"\n        }\n      },\n      deliveryOrderGroups: {\n        serializedName: \"deliveryOrderGroups\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"DeliveryOrderEntryGroupElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"DeliveryOrderEntryGroup\"\n            }\n          }\n        }\n      },\n      description: {\n        serializedName: \"description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      entries: {\n        serializedName: \"entries\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"OrderEntryElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"OrderEntry\"\n            }\n          }\n        }\n      },\n      expirationTime: {\n        serializedName: \"expirationTime\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      guid: {\n        serializedName: \"guid\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      net: {\n        serializedName: \"net\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      orderDiscounts: {\n        serializedName: \"orderDiscounts\",\n        type: {\n          name: \"Composite\",\n          className: \"Price\"\n        }\n      },\n      paymentInfo: {\n        serializedName: \"paymentInfo\",\n        type: {\n          name: \"Composite\",\n          className: \"PaymentDetails\"\n        }\n      },\n      pickupItemsQuantity: {\n        serializedName: \"pickupItemsQuantity\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      pickupOrderGroups: {\n        serializedName: \"pickupOrderGroups\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"PickupOrderEntryGroupElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"PickupOrderEntryGroup\"\n            }\n          }\n        }\n      },\n      potentialOrderPromotions: {\n        serializedName: \"potentialOrderPromotions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"PromotionResultElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"PromotionResult\"\n            }\n          }\n        }\n      },\n      potentialProductPromotions: {\n        serializedName: \"potentialProductPromotions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"PromotionResultElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"PromotionResult\"\n            }\n          }\n        }\n      },\n      productDiscounts: {\n        serializedName: \"productDiscounts\",\n        type: {\n          name: \"Composite\",\n          className: \"Price\"\n        }\n      },\n      saveTime: {\n        serializedName: \"saveTime\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      savedBy: {\n        serializedName: \"savedBy\",\n        type: {\n          name: \"Composite\",\n          className: \"Principal\"\n        }\n      },\n      site: {\n        serializedName: \"site\",\n        type: {\n          name: \"String\"\n        }\n      },\n      store: {\n        serializedName: \"store\",\n        type: {\n          name: \"String\"\n        }\n      },\n      subTotal: {\n        serializedName: \"subTotal\",\n        type: {\n          name: \"Composite\",\n          className: \"Price\"\n        }\n      },\n      totalDiscounts: {\n        serializedName: \"totalDiscounts\",\n        type: {\n          name: \"Composite\",\n          className: \"Price\"\n        }\n      },\n      totalItems: {\n        serializedName: \"totalItems\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      totalPrice: {\n        serializedName: \"totalPrice\",\n        type: {\n          name: \"Composite\",\n          className: \"Price\"\n        }\n      },\n      totalPriceWithTax: {\n        serializedName: \"totalPriceWithTax\",\n        type: {\n          name: \"Composite\",\n          className: \"Price\"\n        }\n      },\n      totalTax: {\n        serializedName: \"totalTax\",\n        type: {\n          name: \"Composite\",\n          className: \"Price\"\n        }\n      },\n      totalUnitCount: {\n        serializedName: \"totalUnitCount\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      user: {\n        serializedName: \"user\",\n        type: {\n          name: \"Composite\",\n          className: \"Principal\"\n        }\n      }\n    }\n  }\n};\n\nexport const CartList = {\n  serializedName: \"CartList\",\n  type: {\n    name: \"Composite\",\n    className: \"CartList\",\n    modelProperties: {\n      carts: {\n        serializedName: \"carts\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"CartElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Cart\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const CartModification = {\n  serializedName: \"CartModification\",\n  type: {\n    name: \"Composite\",\n    className: \"CartModification\",\n    modelProperties: {\n      deliveryModeChanged: {\n        serializedName: \"deliveryModeChanged\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      entry: {\n        serializedName: \"entry\",\n        type: {\n          name: \"Composite\",\n          className: \"OrderEntry\"\n        }\n      },\n      quantity: {\n        serializedName: \"quantity\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      quantityAdded: {\n        serializedName: \"quantityAdded\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      statusCode: {\n        serializedName: \"statusCode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      statusMessage: {\n        serializedName: \"statusMessage\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CategoryHierarchy = {\n  serializedName: \"CategoryHierarchy\",\n  type: {\n    name: \"Composite\",\n    className: \"CategoryHierarchy\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"lastModified\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      subcategories: {\n        serializedName: \"subcategories\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"CategoryHierarchyElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"CategoryHierarchy\"\n            }\n          }\n        }\n      },\n      url: {\n        serializedName: \"url\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CatalogVersion = {\n  serializedName: \"CatalogVersion\",\n  type: {\n    name: \"Composite\",\n    className: \"CatalogVersion\",\n    modelProperties: {\n      categories: {\n        serializedName: \"categories\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"CategoryHierarchyElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"CategoryHierarchy\"\n            }\n          }\n        }\n      },\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"lastModified\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      url: {\n        serializedName: \"url\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Catalog = {\n  serializedName: \"Catalog\",\n  type: {\n    name: \"Composite\",\n    className: \"Catalog\",\n    modelProperties: {\n      catalogVersions: {\n        serializedName: \"catalogVersions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"CatalogVersionElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"CatalogVersion\"\n            }\n          }\n        }\n      },\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"lastModified\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      url: {\n        serializedName: \"url\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CatalogList = {\n  serializedName: \"CatalogList\",\n  type: {\n    name: \"Composite\",\n    className: \"CatalogList\",\n    modelProperties: {\n      catalogs: {\n        serializedName: \"catalogs\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"CatalogElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Catalog\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ComponentIDList = {\n  serializedName: \"ComponentIDList\",\n  type: {\n    name: \"Composite\",\n    className: \"ComponentIDList\",\n    modelProperties: {\n      idList: {\n        serializedName: \"idList\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"stringElementType\",\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ConsignmentEntry = {\n  serializedName: \"ConsignmentEntry\",\n  type: {\n    name: \"Composite\",\n    className: \"ConsignmentEntry\",\n    modelProperties: {\n      orderEntry: {\n        serializedName: \"orderEntry\",\n        type: {\n          name: \"Composite\",\n          className: \"OrderEntry\"\n        }\n      },\n      quantity: {\n        serializedName: \"quantity\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      shippedQuantity: {\n        serializedName: \"shippedQuantity\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const Consignment = {\n  serializedName: \"Consignment\",\n  type: {\n    name: \"Composite\",\n    className: \"Consignment\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      deliveryPointOfService: {\n        serializedName: \"deliveryPointOfService\",\n        type: {\n          name: \"Composite\",\n          className: \"PointOfService\"\n        }\n      },\n      entries: {\n        serializedName: \"entries\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"ConsignmentEntryElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"ConsignmentEntry\"\n            }\n          }\n        }\n      },\n      shippingAddress: {\n        serializedName: \"shippingAddress\",\n        type: {\n          name: \"Composite\",\n          className: \"Address\"\n        }\n      },\n      status: {\n        serializedName: \"status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      statusDate: {\n        serializedName: \"statusDate\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      trackingID: {\n        serializedName: \"trackingID\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CountryList = {\n  serializedName: \"CountryList\",\n  type: {\n    name: \"Composite\",\n    className: \"CountryList\",\n    modelProperties: {\n      countries: {\n        serializedName: \"countries\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"CountryElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Country\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const CurrencyList = {\n  serializedName: \"CurrencyList\",\n  type: {\n    name: \"Composite\",\n    className: \"CurrencyList\",\n    modelProperties: {\n      currencies: {\n        serializedName: \"currencies\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"CurrencyElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Currency\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DeliveryModeList = {\n  serializedName: \"DeliveryModeList\",\n  type: {\n    name: \"Composite\",\n    className: \"DeliveryModeList\",\n    modelProperties: {\n      deliveryModes: {\n        serializedName: \"deliveryModes\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"DeliveryModeElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"DeliveryMode\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const FacetValue = {\n  serializedName: \"FacetValue\",\n  type: {\n    name: \"Composite\",\n    className: \"FacetValue\",\n    modelProperties: {\n      count: {\n        serializedName: \"count\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      query: {\n        serializedName: \"query\",\n        type: {\n          name: \"Composite\",\n          className: \"SearchState\"\n        }\n      },\n      selected: {\n        serializedName: \"selected\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const Facet = {\n  serializedName: \"Facet\",\n  type: {\n    name: \"Composite\",\n    className: \"Facet\",\n    modelProperties: {\n      category: {\n        serializedName: \"category\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      multiSelect: {\n        serializedName: \"multiSelect\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      priority: {\n        serializedName: \"priority\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      topValues: {\n        serializedName: \"topValues\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"FacetValueElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"FacetValue\"\n            }\n          }\n        }\n      },\n      values: {\n        serializedName: \"values\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"FacetValueElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"FacetValue\"\n            }\n          }\n        }\n      },\n      visible: {\n        serializedName: \"visible\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const LanguageList = {\n  serializedName: \"LanguageList\",\n  type: {\n    name: \"Composite\",\n    className: \"LanguageList\",\n    modelProperties: {\n      languages: {\n        serializedName: \"languages\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"LanguageElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Language\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Pagination = {\n  serializedName: \"pagination\",\n  type: {\n    name: \"Composite\",\n    className: \"Pagination\",\n    modelProperties: {\n      count: {\n        serializedName: \"count\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      page: {\n        serializedName: \"page\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      totalCount: {\n        serializedName: \"totalCount\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      totalPages: {\n        serializedName: \"totalPages\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const Sort = {\n  serializedName: \"sort\",\n  type: {\n    name: \"Composite\",\n    className: \"Sort\",\n    modelProperties: {\n      asc: {\n        serializedName: \"asc\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ListAdaptedComponents = {\n  serializedName: \"ListAdaptedComponents\",\n  type: {\n    name: \"Composite\",\n    className: \"ListAdaptedComponents\",\n    modelProperties: {\n      components: {\n        serializedName: \"components\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"ObjectElementType\",\n            type: {\n              name: \"Object\"\n            }\n          }\n        }\n      },\n      pagination: {\n        serializedName: \"pagination\",\n        type: {\n          name: \"Composite\",\n          className: \"Pagination\"\n        }\n      },\n      sorts: {\n        serializedName: \"sorts\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"SortElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Sort\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const MemberList = {\n  serializedName: \"MemberList\",\n  type: {\n    name: \"Composite\",\n    className: \"MemberList\",\n    modelProperties: {\n      members: {\n        serializedName: \"members\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"PrincipalElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Principal\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const OrderEntryList = {\n  serializedName: \"OrderEntryList\",\n  type: {\n    name: \"Composite\",\n    className: \"OrderEntryList\",\n    modelProperties: {\n      orderEntries: {\n        serializedName: \"orderEntries\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"OrderEntryElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"OrderEntry\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const OrderHistory = {\n  serializedName: \"OrderHistory\",\n  type: {\n    name: \"Composite\",\n    className: \"OrderHistory\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      guid: {\n        serializedName: \"guid\",\n        type: {\n          name: \"String\"\n        }\n      },\n      placed: {\n        serializedName: \"placed\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      status: {\n        serializedName: \"status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      statusDisplay: {\n        serializedName: \"statusDisplay\",\n        type: {\n          name: \"String\"\n        }\n      },\n      total: {\n        serializedName: \"total\",\n        type: {\n          name: \"Composite\",\n          className: \"Price\"\n        }\n      }\n    }\n  }\n};\n\nexport const PaginationModel = {\n  serializedName: \"Pagination\",\n  type: {\n    name: \"Composite\",\n    className: \"PaginationModel\",\n    modelProperties: {\n      currentPage: {\n        serializedName: \"currentPage\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      pageSize: {\n        serializedName: \"pageSize\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      sort: {\n        serializedName: \"sort\",\n        type: {\n          name: \"String\"\n        }\n      },\n      totalPages: {\n        serializedName: \"totalPages\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      totalResults: {\n        serializedName: \"totalResults\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const SortModel = {\n  serializedName: \"Sort\",\n  type: {\n    name: \"Composite\",\n    className: \"SortModel\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      selected: {\n        serializedName: \"selected\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const OrderHistoryList = {\n  serializedName: \"OrderHistoryList\",\n  type: {\n    name: \"Composite\",\n    className: \"OrderHistoryList\",\n    modelProperties: {\n      orders: {\n        serializedName: \"orders\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"OrderHistoryElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"OrderHistory\"\n            }\n          }\n        }\n      },\n      pagination: {\n        serializedName: \"pagination\",\n        type: {\n          name: \"Composite\",\n          className: \"PaginationModel\"\n        }\n      },\n      sorts: {\n        serializedName: \"sorts\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"SortModelElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"SortModel\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const OrderStatusUpdateElement = {\n  serializedName: \"OrderStatusUpdateElement\",\n  type: {\n    name: \"Composite\",\n    className: \"OrderStatusUpdateElement\",\n    modelProperties: {\n      baseSiteId: {\n        serializedName: \"baseSiteId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      status: {\n        serializedName: \"status\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OrderStatusUpdateElementList = {\n  serializedName: \"OrderStatusUpdateElementList\",\n  type: {\n    name: \"Composite\",\n    className: \"OrderStatusUpdateElementList\",\n    modelProperties: {\n      orderStatusUpdateElements: {\n        serializedName: \"orderStatusUpdateElements\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"OrderStatusUpdateElementElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"OrderStatusUpdateElement\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Order = {\n  serializedName: \"Order\",\n  type: {\n    name: \"Composite\",\n    className: \"Order\",\n    modelProperties: {\n      appliedOrderPromotions: {\n        serializedName: \"appliedOrderPromotions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"PromotionResultElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"PromotionResult\"\n            }\n          }\n        }\n      },\n      appliedProductPromotions: {\n        serializedName: \"appliedProductPromotions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"PromotionResultElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"PromotionResult\"\n            }\n          }\n        }\n      },\n      appliedVouchers: {\n        serializedName: \"appliedVouchers\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"VoucherElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Voucher\"\n            }\n          }\n        }\n      },\n      calculated: {\n        serializedName: \"calculated\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      consignments: {\n        serializedName: \"consignments\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"ConsignmentElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Consignment\"\n            }\n          }\n        }\n      },\n      created: {\n        serializedName: \"created\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      deliveryAddress: {\n        serializedName: \"deliveryAddress\",\n        type: {\n          name: \"Composite\",\n          className: \"Address\"\n        }\n      },\n      deliveryCost: {\n        serializedName: \"deliveryCost\",\n        type: {\n          name: \"Composite\",\n          className: \"Price\"\n        }\n      },\n      deliveryItemsQuantity: {\n        serializedName: \"deliveryItemsQuantity\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      deliveryMode: {\n        serializedName: \"deliveryMode\",\n        type: {\n          name: \"Composite\",\n          className: \"DeliveryMode\"\n        }\n      },\n      deliveryOrderGroups: {\n        serializedName: \"deliveryOrderGroups\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"DeliveryOrderEntryGroupElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"DeliveryOrderEntryGroup\"\n            }\n          }\n        }\n      },\n      deliveryStatus: {\n        serializedName: \"deliveryStatus\",\n        type: {\n          name: \"String\"\n        }\n      },\n      deliveryStatusDisplay: {\n        serializedName: \"deliveryStatusDisplay\",\n        type: {\n          name: \"String\"\n        }\n      },\n      entries: {\n        serializedName: \"entries\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"OrderEntryElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"OrderEntry\"\n            }\n          }\n        }\n      },\n      guestCustomer: {\n        serializedName: \"guestCustomer\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      guid: {\n        serializedName: \"guid\",\n        type: {\n          name: \"String\"\n        }\n      },\n      net: {\n        serializedName: \"net\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      orderDiscounts: {\n        serializedName: \"orderDiscounts\",\n        type: {\n          name: \"Composite\",\n          className: \"Price\"\n        }\n      },\n      paymentInfo: {\n        serializedName: \"paymentInfo\",\n        type: {\n          name: \"Composite\",\n          className: \"PaymentDetails\"\n        }\n      },\n      pickupItemsQuantity: {\n        serializedName: \"pickupItemsQuantity\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      pickupOrderGroups: {\n        serializedName: \"pickupOrderGroups\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"PickupOrderEntryGroupElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"PickupOrderEntryGroup\"\n            }\n          }\n        }\n      },\n      productDiscounts: {\n        serializedName: \"productDiscounts\",\n        type: {\n          name: \"Composite\",\n          className: \"Price\"\n        }\n      },\n      site: {\n        serializedName: \"site\",\n        type: {\n          name: \"String\"\n        }\n      },\n      status: {\n        serializedName: \"status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      statusDisplay: {\n        serializedName: \"statusDisplay\",\n        type: {\n          name: \"String\"\n        }\n      },\n      store: {\n        serializedName: \"store\",\n        type: {\n          name: \"String\"\n        }\n      },\n      subTotal: {\n        serializedName: \"subTotal\",\n        type: {\n          name: \"Composite\",\n          className: \"Price\"\n        }\n      },\n      totalDiscounts: {\n        serializedName: \"totalDiscounts\",\n        type: {\n          name: \"Composite\",\n          className: \"Price\"\n        }\n      },\n      totalItems: {\n        serializedName: \"totalItems\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      totalPrice: {\n        serializedName: \"totalPrice\",\n        type: {\n          name: \"Composite\",\n          className: \"Price\"\n        }\n      },\n      totalPriceWithTax: {\n        serializedName: \"totalPriceWithTax\",\n        type: {\n          name: \"Composite\",\n          className: \"Price\"\n        }\n      },\n      totalTax: {\n        serializedName: \"totalTax\",\n        type: {\n          name: \"Composite\",\n          className: \"Price\"\n        }\n      },\n      unconsignedEntries: {\n        serializedName: \"unconsignedEntries\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"OrderEntryElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"OrderEntry\"\n            }\n          }\n        }\n      },\n      user: {\n        serializedName: \"user\",\n        type: {\n          name: \"Composite\",\n          className: \"Principal\"\n        }\n      }\n    }\n  }\n};\n\nexport const PaymentDetailsList = {\n  serializedName: \"PaymentDetailsList\",\n  type: {\n    name: \"Composite\",\n    className: \"PaymentDetailsList\",\n    modelProperties: {\n      payments: {\n        serializedName: \"payments\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"PaymentDetailsElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"PaymentDetails\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const PointOfServiceStock = {\n  serializedName: \"PointOfServiceStock\",\n  type: {\n    name: \"Composite\",\n    className: \"PointOfServiceStock\",\n    modelProperties: {\n      address: {\n        serializedName: \"address\",\n        type: {\n          name: \"Composite\",\n          className: \"Address\"\n        }\n      },\n      description: {\n        serializedName: \"description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      displayName: {\n        serializedName: \"displayName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      distanceKm: {\n        serializedName: \"distanceKm\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      features: {\n        serializedName: \"features\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            serializedName: \"stringElementType\",\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      formattedDistance: {\n        serializedName: \"formattedDistance\",\n        type: {\n          name: \"String\"\n        }\n      },\n      geoPoint: {\n        serializedName: \"geoPoint\",\n        type: {\n          name: \"Composite\",\n          className: \"GeoPoint\"\n        }\n      },\n      mapIcon: {\n        serializedName: \"mapIcon\",\n        type: {\n          name: \"Composite\",\n          className: \"Image\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      openingHours: {\n        serializedName: \"openingHours\",\n        type: {\n          name: \"Composite\",\n          className: \"OpeningSchedule\"\n        }\n      },\n      stockInfo: {\n        serializedName: \"stockInfo\",\n        type: {\n          name: \"Composite\",\n          className: \"Stock\"\n        }\n      },\n      storeContent: {\n        serializedName: \"storeContent\",\n        type: {\n          name: \"String\"\n        }\n      },\n      storeImages: {\n        serializedName: \"storeImages\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"ImageElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Image\"\n            }\n          }\n        }\n      },\n      url: {\n        serializedName: \"url\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ProductExpressUpdateElement = {\n  serializedName: \"ProductExpressUpdateElement\",\n  type: {\n    name: \"Composite\",\n    className: \"ProductExpressUpdateElement\",\n    modelProperties: {\n      catalogId: {\n        serializedName: \"catalogId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      catalogVersion: {\n        serializedName: \"catalogVersion\",\n        type: {\n          name: \"String\"\n        }\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ProductExpressUpdateElementList = {\n  serializedName: \"ProductExpressUpdateElementList\",\n  type: {\n    name: \"Composite\",\n    className: \"ProductExpressUpdateElementList\",\n    modelProperties: {\n      productExpressUpdateElements: {\n        serializedName: \"productExpressUpdateElements\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"ProductExpressUpdateElementElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"ProductExpressUpdateElement\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ProductList = {\n  serializedName: \"ProductList\",\n  type: {\n    name: \"Composite\",\n    className: \"ProductList\",\n    modelProperties: {\n      catalog: {\n        serializedName: \"catalog\",\n        type: {\n          name: \"String\"\n        }\n      },\n      currentPage: {\n        serializedName: \"currentPage\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      products: {\n        serializedName: \"products\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"ProductElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Product\"\n            }\n          }\n        }\n      },\n      totalPageCount: {\n        serializedName: \"totalPageCount\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      totalProductCount: {\n        serializedName: \"totalProductCount\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      version: {\n        serializedName: \"version\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ProductReferenceList = {\n  serializedName: \"ProductReferenceList\",\n  type: {\n    name: \"Composite\",\n    className: \"ProductReferenceList\",\n    modelProperties: {\n      references: {\n        serializedName: \"references\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"ProductReferenceElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"ProductReference\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SpellingSuggestion = {\n  serializedName: \"SpellingSuggestion\",\n  type: {\n    name: \"Composite\",\n    className: \"SpellingSuggestion\",\n    modelProperties: {\n      query: {\n        serializedName: \"query\",\n        type: {\n          name: \"String\"\n        }\n      },\n      suggestion: {\n        serializedName: \"suggestion\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ProductSearchPage = {\n  serializedName: \"ProductSearchPage\",\n  type: {\n    name: \"Composite\",\n    className: \"ProductSearchPage\",\n    modelProperties: {\n      breadcrumbs: {\n        serializedName: \"breadcrumbs\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"BreadcrumbElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Breadcrumb\"\n            }\n          }\n        }\n      },\n      categoryCode: {\n        serializedName: \"categoryCode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      currentQuery: {\n        serializedName: \"currentQuery\",\n        type: {\n          name: \"Composite\",\n          className: \"SearchState\"\n        }\n      },\n      facets: {\n        serializedName: \"facets\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"FacetElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Facet\"\n            }\n          }\n        }\n      },\n      freeTextSearch: {\n        serializedName: \"freeTextSearch\",\n        type: {\n          name: \"String\"\n        }\n      },\n      keywordRedirectUrl: {\n        serializedName: \"keywordRedirectUrl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      pagination: {\n        serializedName: \"pagination\",\n        type: {\n          name: \"Composite\",\n          className: \"PaginationModel\"\n        }\n      },\n      products: {\n        serializedName: \"products\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"ProductElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Product\"\n            }\n          }\n        }\n      },\n      sorts: {\n        serializedName: \"sorts\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"SortModelElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"SortModel\"\n            }\n          }\n        }\n      },\n      spellingSuggestion: {\n        serializedName: \"spellingSuggestion\",\n        type: {\n          name: \"Composite\",\n          className: \"SpellingSuggestion\"\n        }\n      }\n    }\n  }\n};\n\nexport const PromotionList = {\n  serializedName: \"PromotionList\",\n  type: {\n    name: \"Composite\",\n    className: \"PromotionList\",\n    modelProperties: {\n      promotions: {\n        serializedName: \"promotions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"PromotionElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Promotion\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const PromotionResultList = {\n  serializedName: \"PromotionResultList\",\n  type: {\n    name: \"Composite\",\n    className: \"PromotionResultList\",\n    modelProperties: {\n      promotions: {\n        serializedName: \"promotions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"PromotionResultElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"PromotionResult\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ReviewList = {\n  serializedName: \"ReviewList\",\n  type: {\n    name: \"Composite\",\n    className: \"ReviewList\",\n    modelProperties: {\n      reviews: {\n        serializedName: \"reviews\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"ReviewElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Review\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SaveCartResult = {\n  serializedName: \"SaveCartResult\",\n  type: {\n    name: \"Composite\",\n    className: \"SaveCartResult\",\n    modelProperties: {\n      savedCartData: {\n        serializedName: \"savedCartData\",\n        type: {\n          name: \"Composite\",\n          className: \"Cart\"\n        }\n      }\n    }\n  }\n};\n\nexport const StoreFinderSearchPage = {\n  serializedName: \"StoreFinderSearchPage\",\n  type: {\n    name: \"Composite\",\n    className: \"StoreFinderSearchPage\",\n    modelProperties: {\n      boundEastLongitude: {\n        serializedName: \"boundEastLongitude\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      boundNorthLatitude: {\n        serializedName: \"boundNorthLatitude\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      boundSouthLatitude: {\n        serializedName: \"boundSouthLatitude\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      boundWestLongitude: {\n        serializedName: \"boundWestLongitude\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      locationText: {\n        serializedName: \"locationText\",\n        type: {\n          name: \"String\"\n        }\n      },\n      pagination: {\n        serializedName: \"pagination\",\n        type: {\n          name: \"Composite\",\n          className: \"PaginationModel\"\n        }\n      },\n      sorts: {\n        serializedName: \"sorts\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"SortModelElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"SortModel\"\n            }\n          }\n        }\n      },\n      sourceLatitude: {\n        serializedName: \"sourceLatitude\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      sourceLongitude: {\n        serializedName: \"sourceLongitude\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      stores: {\n        serializedName: \"stores\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"PointOfServiceElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"PointOfService\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const StoreFinderStockSearchPage = {\n  serializedName: \"StoreFinderStockSearchPage\",\n  type: {\n    name: \"Composite\",\n    className: \"StoreFinderStockSearchPage\",\n    modelProperties: {\n      boundEastLongitude: {\n        serializedName: \"boundEastLongitude\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      boundNorthLatitude: {\n        serializedName: \"boundNorthLatitude\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      boundSouthLatitude: {\n        serializedName: \"boundSouthLatitude\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      boundWestLongitude: {\n        serializedName: \"boundWestLongitude\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      locationText: {\n        serializedName: \"locationText\",\n        type: {\n          name: \"String\"\n        }\n      },\n      pagination: {\n        serializedName: \"pagination\",\n        type: {\n          name: \"Composite\",\n          className: \"PaginationModel\"\n        }\n      },\n      product: {\n        serializedName: \"product\",\n        type: {\n          name: \"Composite\",\n          className: \"Product\"\n        }\n      },\n      sorts: {\n        serializedName: \"sorts\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"SortModelElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"SortModel\"\n            }\n          }\n        }\n      },\n      sourceLatitude: {\n        serializedName: \"sourceLatitude\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      sourceLongitude: {\n        serializedName: \"sourceLongitude\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      stores: {\n        serializedName: \"stores\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"PointOfServiceStockElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"PointOfServiceStock\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Suggestion = {\n  serializedName: \"Suggestion\",\n  type: {\n    name: \"Composite\",\n    className: \"Suggestion\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SuggestionList = {\n  serializedName: \"SuggestionList\",\n  type: {\n    name: \"Composite\",\n    className: \"SuggestionList\",\n    modelProperties: {\n      suggestions: {\n        serializedName: \"suggestions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"SuggestionElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Suggestion\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Title = {\n  serializedName: \"Title\",\n  type: {\n    name: \"Composite\",\n    className: \"Title\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TitleList = {\n  serializedName: \"TitleList\",\n  type: {\n    name: \"Composite\",\n    className: \"TitleList\",\n    modelProperties: {\n      titles: {\n        serializedName: \"titles\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"TitleElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Title\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const UserGroup = {\n  serializedName: \"UserGroup\",\n  type: {\n    name: \"Composite\",\n    className: \"UserGroup\",\n    modelProperties: {\n      members: {\n        serializedName: \"members\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"PrincipalElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Principal\"\n            }\n          }\n        }\n      },\n      membersCount: {\n        serializedName: \"membersCount\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      subGroups: {\n        serializedName: \"subGroups\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"UserGroupElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"UserGroup\"\n            }\n          }\n        }\n      },\n      uid: {\n        serializedName: \"uid\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const UserGroupList = {\n  serializedName: \"UserGroupList\",\n  type: {\n    name: \"Composite\",\n    className: \"UserGroupList\",\n    modelProperties: {\n      currentPage: {\n        serializedName: \"currentPage\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      numberOfPages: {\n        serializedName: \"numberOfPages\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      pageSize: {\n        serializedName: \"pageSize\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      totalNumber: {\n        serializedName: \"totalNumber\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      userGroups: {\n        serializedName: \"userGroups\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"UserGroupElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"UserGroup\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const UserSignUp = {\n  serializedName: \"UserSignUp\",\n  type: {\n    name: \"Composite\",\n    className: \"UserSignUp\",\n    modelProperties: {\n      firstName: {\n        serializedName: \"firstName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastName: {\n        serializedName: \"lastName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      password: {\n        serializedName: \"password\",\n        type: {\n          name: \"String\"\n        }\n      },\n      titleCode: {\n        serializedName: \"titleCode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      uid: {\n        serializedName: \"uid\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const VoucherList = {\n  serializedName: \"VoucherList\",\n  type: {\n    name: \"Composite\",\n    className: \"VoucherList\",\n    modelProperties: {\n      vouchers: {\n        serializedName: \"vouchers\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"VoucherElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Voucher\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetCardTypesOptionalParams = {\n  serializedName: \"GetCardTypesOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetCardTypesOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetCatalogsOptionalParams = {\n  serializedName: \"GetCatalogsOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetCatalogsOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetCatalogOptionalParams = {\n  serializedName: \"GetCatalogOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetCatalogOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetCatalogVersionOptionalParams = {\n  serializedName: \"GetCatalogVersionOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetCatalogVersionOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetCategoriesOptionalParams = {\n  serializedName: \"GetCategoriesOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetCategoriesOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetComponentByIdListOptionalParams = {\n  serializedName: \"GetComponentByIdListOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetComponentByIdListOptionalParams\",\n    modelProperties: {\n      catalogCode: {\n        serializedName: \"catalogCode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      productCode: {\n        serializedName: \"productCode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      categoryCode: {\n        serializedName: \"categoryCode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      },\n      currentPage: {\n        serializedName: \"currentPage\",\n        defaultValue: 0,\n        type: {\n          name: \"Number\"\n        }\n      },\n      pageSize: {\n        serializedName: \"pageSize\",\n        defaultValue: 10,\n        type: {\n          name: \"Number\"\n        }\n      },\n      sort: {\n        serializedName: \"sort\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetComponentByIdOptionalParams = {\n  serializedName: \"GetComponentByIdOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetComponentByIdOptionalParams\",\n    modelProperties: {\n      catalogCode: {\n        serializedName: \"catalogCode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      productCode: {\n        serializedName: \"productCode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      categoryCode: {\n        serializedName: \"categoryCode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetPageDataOptionalParams = {\n  serializedName: \"GetPageDataOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetPageDataOptionalParams\",\n    modelProperties: {\n      pageType: {\n        serializedName: \"pageType\",\n        defaultValue: 'ContentPage',\n        type: {\n          name: \"String\"\n        }\n      },\n      pageLabelOrId: {\n        serializedName: \"pageLabelOrId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetCurrenciesOptionalParams = {\n  serializedName: \"GetCurrenciesOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetCurrenciesOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetAllCustomerGroupsOptionalParams = {\n  serializedName: \"GetAllCustomerGroupsOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetAllCustomerGroupsOptionalParams\",\n    modelProperties: {\n      currentPage: {\n        serializedName: \"currentPage\",\n        defaultValue: 0,\n        type: {\n          name: \"Number\"\n        }\n      },\n      pageSize: {\n        serializedName: \"pageSize\",\n        defaultValue: 20,\n        type: {\n          name: \"Number\"\n        }\n      },\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'BASIC',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetCustomerGroupOptionalParams = {\n  serializedName: \"GetCustomerGroupOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetCustomerGroupOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'BASIC',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetDeliveryCountriesOptionalParams = {\n  serializedName: \"GetDeliveryCountriesOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetDeliveryCountriesOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2ExportProductsOptionalParams = {\n  serializedName: \"ExportProductsOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2ExportProductsOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      },\n      currentPage: {\n        serializedName: \"currentPage\",\n        defaultValue: 0,\n        type: {\n          name: \"Number\"\n        }\n      },\n      pageSize: {\n        serializedName: \"pageSize\",\n        defaultValue: 20,\n        type: {\n          name: \"Number\"\n        }\n      },\n      catalog: {\n        serializedName: \"catalog\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      timestamp: {\n        serializedName: \"timestamp\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2OrderStatusFeedOptionalParams = {\n  serializedName: \"OrderStatusFeedOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2OrderStatusFeedOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetLanguagesOptionalParams = {\n  serializedName: \"GetLanguagesOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetLanguagesOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetOrderOptionalParams = {\n  serializedName: \"GetOrderOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetOrderOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2ExpressUpdateOptionalParams = {\n  serializedName: \"ExpressUpdateOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2ExpressUpdateOptionalParams\",\n    modelProperties: {\n      catalog: {\n        serializedName: \"catalog\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2SearchProductsOptionalParams = {\n  serializedName: \"SearchProductsOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2SearchProductsOptionalParams\",\n    modelProperties: {\n      query: {\n        serializedName: \"query\",\n        type: {\n          name: \"String\"\n        }\n      },\n      currentPage: {\n        serializedName: \"currentPage\",\n        defaultValue: 0,\n        type: {\n          name: \"Number\"\n        }\n      },\n      pageSize: {\n        serializedName: \"pageSize\",\n        defaultValue: 20,\n        type: {\n          name: \"Number\"\n        }\n      },\n      sort: {\n        serializedName: \"sort\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      },\n      searchQueryContext: {\n        serializedName: \"searchQueryContext\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2CountSearchProductsOptionalParams = {\n  serializedName: \"CountSearchProductsOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2CountSearchProductsOptionalParams\",\n    modelProperties: {\n      query: {\n        serializedName: \"query\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetSuggestionsOptionalParams = {\n  serializedName: \"GetSuggestionsOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetSuggestionsOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetProductByCodeOptionalParams = {\n  serializedName: \"GetProductByCodeOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetProductByCodeOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2ExportProductReferencesOptionalParams = {\n  serializedName: \"ExportProductReferencesOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2ExportProductReferencesOptionalParams\",\n    modelProperties: {\n      pageSize: {\n        serializedName: \"pageSize\",\n        defaultValue: 2147483647,\n        type: {\n          name: \"Number\"\n        }\n      },\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetProductReviewsOptionalParams = {\n  serializedName: \"GetProductReviewsOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetProductReviewsOptionalParams\",\n    modelProperties: {\n      maxCount: {\n        serializedName: \"maxCount\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2CreateReviewPrimOptionalParams = {\n  serializedName: \"CreateReviewPrimOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2CreateReviewPrimOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2SearchProductStockByLocationOptionalParams = {\n  serializedName: \"SearchProductStockByLocationOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2SearchProductStockByLocationOptionalParams\",\n    modelProperties: {\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      },\n      latitude: {\n        serializedName: \"latitude\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      longitude: {\n        serializedName: \"longitude\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      currentPage: {\n        serializedName: \"currentPage\",\n        defaultValue: 0,\n        type: {\n          name: \"Number\"\n        }\n      },\n      pageSize: {\n        serializedName: \"pageSize\",\n        defaultValue: 20,\n        type: {\n          name: \"Number\"\n        }\n      },\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2CountSearchProductStockByLocationOptionalParams = {\n  serializedName: \"CountSearchProductStockByLocationOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2CountSearchProductStockByLocationOptionalParams\",\n    modelProperties: {\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      },\n      latitude: {\n        serializedName: \"latitude\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      longitude: {\n        serializedName: \"longitude\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetStockDataOptionalParams = {\n  serializedName: \"GetStockDataOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetStockDataOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetPromotionsPrimOptionalParams = {\n  serializedName: \"GetPromotionsPrimOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetPromotionsPrimOptionalParams\",\n    modelProperties: {\n      promotionGroup: {\n        serializedName: \"promotionGroup\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'BASIC',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetPromotionByCodeOptionalParams = {\n  serializedName: \"GetPromotionByCodeOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetPromotionByCodeOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'BASIC',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2LocationSearchOptionalParams = {\n  serializedName: \"LocationSearchOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2LocationSearchOptionalParams\",\n    modelProperties: {\n      query: {\n        serializedName: \"query\",\n        type: {\n          name: \"String\"\n        }\n      },\n      latitude: {\n        serializedName: \"latitude\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      longitude: {\n        serializedName: \"longitude\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      currentPage: {\n        serializedName: \"currentPage\",\n        defaultValue: 0,\n        type: {\n          name: \"Number\"\n        }\n      },\n      pageSize: {\n        serializedName: \"pageSize\",\n        defaultValue: 20,\n        type: {\n          name: \"Number\"\n        }\n      },\n      sort: {\n        serializedName: \"sort\",\n        defaultValue: 'asc',\n        type: {\n          name: \"String\"\n        }\n      },\n      radius: {\n        serializedName: \"radius\",\n        defaultValue: 100000,\n        type: {\n          name: \"Number\"\n        }\n      },\n      accuracy: {\n        serializedName: \"accuracy\",\n        defaultValue: 0,\n        type: {\n          name: \"Number\"\n        }\n      },\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2CountLocationSearchOptionalParams = {\n  serializedName: \"CountLocationSearchOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2CountLocationSearchOptionalParams\",\n    modelProperties: {\n      query: {\n        serializedName: \"query\",\n        type: {\n          name: \"String\"\n        }\n      },\n      latitude: {\n        serializedName: \"latitude\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      longitude: {\n        serializedName: \"longitude\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      radius: {\n        serializedName: \"radius\",\n        defaultValue: 100000,\n        type: {\n          name: \"Number\"\n        }\n      },\n      accuracy: {\n        serializedName: \"accuracy\",\n        defaultValue: 0,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2LocationDetailsOptionalParams = {\n  serializedName: \"LocationDetailsOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2LocationDetailsOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetTitlesOptionalParams = {\n  serializedName: \"GetTitlesOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetTitlesOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2RegisterUserPrimOptionalParams = {\n  serializedName: \"RegisterUserPrimOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2RegisterUserPrimOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetUserOptionalParams = {\n  serializedName: \"GetUserOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetUserOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetAddressesOptionalParams = {\n  serializedName: \"GetAddressesOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetAddressesOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2CreateAddressPrimOptionalParams = {\n  serializedName: \"CreateAddressPrimOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2CreateAddressPrimOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2VerifyAddressPrimOptionalParams = {\n  serializedName: \"VerifyAddressPrimOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2VerifyAddressPrimOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetAddressOptionalParams = {\n  serializedName: \"GetAddressOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetAddressOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetCartsOptionalParams = {\n  serializedName: \"GetCartsOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetCartsOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      },\n      savedCartsOnly: {\n        serializedName: \"savedCartsOnly\",\n        defaultValue: false,\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      currentPage: {\n        serializedName: \"currentPage\",\n        defaultValue: 0,\n        type: {\n          name: \"Number\"\n        }\n      },\n      pageSize: {\n        serializedName: \"pageSize\",\n        defaultValue: 20,\n        type: {\n          name: \"Number\"\n        }\n      },\n      sort: {\n        serializedName: \"sort\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2CreateCartOptionalParams = {\n  serializedName: \"CreateCartOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2CreateCartOptionalParams\",\n    modelProperties: {\n      oldCartId: {\n        serializedName: \"oldCartId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      toMergeCartGuid: {\n        serializedName: \"toMergeCartGuid\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetCartOptionalParams = {\n  serializedName: \"GetCartOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetCartOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2CreateAndSetAddressPrimOptionalParams = {\n  serializedName: \"CreateAndSetAddressPrimOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2CreateAndSetAddressPrimOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2CloneSaveCartOptionalParams = {\n  serializedName: \"CloneSaveCartOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2CloneSaveCartOptionalParams\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      description: {\n        serializedName: \"description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetCartDeliveryModeOptionalParams = {\n  serializedName: \"GetCartDeliveryModeOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetCartDeliveryModeOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetSupportedDeliveryModesOptionalParams = {\n  serializedName: \"GetSupportedDeliveryModesOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetSupportedDeliveryModesOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetCartEntriesOptionalParams = {\n  serializedName: \"GetCartEntriesOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetCartEntriesOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2AddCartEntryPrimOptionalParams = {\n  serializedName: \"AddCartEntryPrimOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2AddCartEntryPrimOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetCartEntryOptionalParams = {\n  serializedName: \"GetCartEntryOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetCartEntryOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2SetCartEntryPrimOptionalParams = {\n  serializedName: \"SetCartEntryPrimOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2SetCartEntryPrimOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2UpdateCartEntryPrimOptionalParams = {\n  serializedName: \"UpdateCartEntryPrimOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2UpdateCartEntryPrimOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2FlagForDeletionOptionalParams = {\n  serializedName: \"FlagForDeletionOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2FlagForDeletionOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2AddPaymentDetailsPrimOptionalParams = {\n  serializedName: \"AddPaymentDetailsPrimOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2AddPaymentDetailsPrimOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetPromotionsOptionalParams = {\n  serializedName: \"GetPromotionsOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetPromotionsOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetPromotionOptionalParams = {\n  serializedName: \"GetPromotionOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetPromotionOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2RestoreSavedCartOptionalParams = {\n  serializedName: \"RestoreSavedCartOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2RestoreSavedCartOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2SaveCartOptionalParams = {\n  serializedName: \"SaveCartOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2SaveCartOptionalParams\",\n    modelProperties: {\n      saveCartName: {\n        serializedName: \"saveCartName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      saveCartDescription: {\n        serializedName: \"saveCartDescription\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetSavedCartOptionalParams = {\n  serializedName: \"GetSavedCartOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetSavedCartOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetVouchersOptionalParams = {\n  serializedName: \"GetVouchersOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetVouchersOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetAllCustomerGroupsForCustomerOptionalParams = {\n  serializedName: \"GetAllCustomerGroupsForCustomerOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetAllCustomerGroupsForCustomerOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetOrdersForUserOptionalParams = {\n  serializedName: \"GetOrdersForUserOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetOrdersForUserOptionalParams\",\n    modelProperties: {\n      statuses: {\n        serializedName: \"statuses\",\n        type: {\n          name: \"String\"\n        }\n      },\n      currentPage: {\n        serializedName: \"currentPage\",\n        defaultValue: 0,\n        type: {\n          name: \"Number\"\n        }\n      },\n      pageSize: {\n        serializedName: \"pageSize\",\n        defaultValue: 20,\n        type: {\n          name: \"Number\"\n        }\n      },\n      sort: {\n        serializedName: \"sort\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetCountOrdersForUserOptionalParams = {\n  serializedName: \"GetCountOrdersForUserOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetCountOrdersForUserOptionalParams\",\n    modelProperties: {\n      statuses: {\n        serializedName: \"statuses\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2PlaceOrderOptionalParams = {\n  serializedName: \"PlaceOrderOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2PlaceOrderOptionalParams\",\n    modelProperties: {\n      securityCode: {\n        serializedName: \"securityCode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetOrderForUserByCodeOptionalParams = {\n  serializedName: \"GetOrderForUserByCodeOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetOrderForUserByCodeOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2ChangePasswordOptionalParams = {\n  serializedName: \"ChangePasswordOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2ChangePasswordOptionalParams\",\n    modelProperties: {\n      old: {\n        serializedName: \"old\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetPaymentInfosOptionalParams = {\n  serializedName: \"GetPaymentInfosOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetPaymentInfosOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetPaymentDetailsOptionalParams = {\n  serializedName: \"GetPaymentDetailsOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetPaymentDetailsOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'DEFAULT',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommerceWebservicesV2GetVoucherByCodeOptionalParams = {\n  serializedName: \"GetVoucherByCodeOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"CommerceWebservicesV2GetVoucherByCodeOptionalParams\",\n    modelProperties: {\n      fields: {\n        serializedName: \"fields\",\n        defaultValue: 'BASIC',\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./lib/models/mappers.ts","/*\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"ms-rest-js\";\n\nconst packageName = \"hybris-occ-client\";\nconst packageVersion = \"0.1.1\";\n\nexport class CommerceWebservicesV2Context extends msRest.ServiceClient {\n  baseUri: string;\n\n  /**\n   * @class\n   * Initializes a new instance of the CommerceWebservicesV2Context class.\n   * @constructor\n   *\n   * @param {string} [baseUri] - The base URI of the service.\n   *\n   * @param {object} [options] - The parameter options\n   *\n   * @param {Array} [options.filters] - Filters to be added to the request pipeline\n   *\n   * @param {object} [options.requestOptions] - The request options. Detailed info can be found at\n   * {@link https://github.github.io/fetch/#Request Options doc}\n   *\n   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy\n   *\n   */\n  constructor(baseUri?: string, options?: msRest.ServiceClientOptions) {\n\n    if (!options) {\n      options = {};\n    }\n\n    super(undefined, options);\n\n    this.baseUri = baseUri as string;\n    if (!this.baseUri) {\n      this.baseUri = \"http://backoffice.christian-spartacus1-s2-public.model-t.myhybris.cloud\";\n    }\n\n    this.addUserAgentInfo(`${packageName}/${packageVersion}`);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/commerceWebservicesV2Context.ts"],"sourceRoot":""}